<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Box.V2.Core</name>
    </assembly>
    <members>
        <member name="T:Box.V2.Auth.AuthRepository">
            <summary>
            Default auth repository implementation that will manage the life cycle of the authentication tokens. 
            This class can be extended to provide your own token management implementation by overriding the virtual methods
            </summary>
        </member>
        <member name="E:Box.V2.Auth.AuthRepository.SessionInvalidated">
            <summary>
            Fires when the authentication session is invalidated
            </summary>
        </member>
        <member name="E:Box.V2.Auth.AuthRepository.SessionAuthenticated">
            <summary>
            Fires when a new set of auth token and refresh token pair has been fetched
            </summary>
        </member>
        <member name="M:Box.V2.Auth.AuthRepository.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService,Box.V2.Converter.IBoxConverter)">
            <summary>
            Instantiates a new AuthRepository.
            </summary>
            <param name="boxConfig">The Box configuration that should be used.</param>
            <param name="boxService">The Box service that will be used to make the requests.</param>
            <param name="converter">How requests/responses will be serialized/deserialized respectively.</param>
        </member>
        <member name="M:Box.V2.Auth.AuthRepository.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService,Box.V2.Converter.IBoxConverter,Box.V2.Auth.OAuthSession)">
            <summary>
            Instantiates a new AuthRepository
            </summary>
            <param name="boxConfig">The Box configuration that should be used</param>
            <param name="boxService">The Box service that will be used to make the requests</param>
            <param name="converter">How requests/responses will be serialized/deserialized respectively</param>
            <param name="session">The current authenticated session</param>
        </member>
        <member name="P:Box.V2.Auth.AuthRepository.Session">
            <summary>
            The current session of the Box Client
            </summary>
        </member>
        <member name="M:Box.V2.Auth.AuthRepository.AuthenticateAsync(System.String)">
            <summary>
            Authenticates the session by exchanging the provided auth code for a Access/Refresh token pair
            </summary>
            <param name="authCode">Authorization Code. The authorization code is only valid for 30 seconds.</param>
            <returns>The session of the Box Client after authentification</returns>
        </member>
        <member name="M:Box.V2.Auth.AuthRepository.RefreshAccessTokenAsync(System.String)">
            <summary>
            Refreshes the session by exchanging the access token for a new Access/Refresh token pair. In general,
            this method should not need to be called explicitly, as an automatic refresh is invoked when the SDK 
            detects that the tokens have expired. 
            </summary>
            <param name="accessToken">The access token to refresh.</param>
            <returns>Refreshed session of Box Client.</returns>
        </member>
        <member name="M:Box.V2.Auth.AuthRepository.LogoutAsync">
            <summary>
            Logs the current session out by invalidating the current Access/Refresh tokens
            </summary>
        </member>
        <member name="M:Box.V2.Auth.AuthRepository.ExchangeAuthCode(System.String)">
            <summary>
            Performs the authentication request using the provided auth code
            </summary>
            <param name="authCode">Authorization Code. The authorization code is only valid for 30 seconds.</param>
            <returns>The current session after exchanging Authorization Code</returns>
        </member>
        <member name="M:Box.V2.Auth.AuthRepository.ExchangeRefreshToken(System.String)">
            <summary>
            Performs the refresh request using the provided refresh token
            </summary>
            <param name="refreshToken">Refresh token used to exchange for a new access token. Each refresh_token is valid for one use in 60 days. Every time you get a new access_token by using a refresh_token, we reset your timer for the 60 day period and hand you a new refresh_token</param>
            <returns>Refreshed Box Client session</returns>
        </member>
        <member name="M:Box.V2.Auth.AuthRepository.InvalidateTokens(System.String)">
            <summary>
            Performs the revoke request using the provided access token. This will invalidate both the access and refresh tokens
            </summary>
            <param name="accessToken">The access token to invalidate</param>
        </member>
        <member name="M:Box.V2.Auth.AuthRepository.OnSessionInvalidated">
            <summary>
            Allows sub classes to invoke the SessionInvalidated event
            </summary>
        </member>
        <member name="M:Box.V2.Auth.AuthRepository.OnSessionAuthenticated(Box.V2.Auth.OAuthSession)">
             <summary>
             Allows sub classes to invoke the SessionAuthenticated event.
             </summary>
            <param name="session">Authenticated session.</param>
        </member>
        <member name="P:Box.V2.Auth.IAuthRepository.Session">
            <summary>
            The active OAuth2 session
            </summary>
        </member>
        <member name="E:Box.V2.Auth.IAuthRepository.SessionInvalidated">
            <summary>
            Event for when the session is no longer valid and a new set of Access/Refresh tokens are required
            </summary>
        </member>
        <member name="E:Box.V2.Auth.IAuthRepository.SessionAuthenticated">
            <summary>
            Fires when a new set of auth token and refresh token pair has been fetched
            </summary>
        </member>
        <member name="M:Box.V2.Auth.IAuthRepository.AuthenticateAsync(System.String)">
            <summary>
            Performs the 2nd step of the OAuth2 workflow and exchanges the auth code
            for an Access and Refresh token
            </summary>
            <param name="authCode">The auth code received from step 1 of the OAuth2 workflow</param>
            <returns>A fully authenticated OAuth2 session</returns>
        </member>
        <member name="M:Box.V2.Auth.IAuthRepository.RefreshAccessTokenAsync(System.String)">
            <summary>
            Exchanges an expired access token for a renewed one using the current refresh token
            </summary>
            <param name="accessToken">The expired access token</param>
            <returns>A fully authenticated OAuth2 session</returns>
        </member>
        <member name="M:Box.V2.Auth.IAuthRepository.LogoutAsync">
            <summary>
            Revokes access by invalidating both the access token and refresh token
            </summary>
            <returns>Task</returns>
        </member>
        <member name="T:Box.V2.Auth.Token.ActorTokenBuilder">
            <summary>
            Builder for building an actor token.
            </summary>
        </member>
        <member name="F:Box.V2.Auth.Token.ActorTokenBuilder.userId">
            <summary>
            External user id.
            </summary>
        </member>
        <member name="F:Box.V2.Auth.Token.ActorTokenBuilder.userName">
            <summary>
            External user name.
            </summary>
        </member>
        <member name="F:Box.V2.Auth.Token.ActorTokenBuilder.clientId">
            <summary>
            Client id.
            </summary>
        </member>
        <member name="M:Box.V2.Auth.Token.ActorTokenBuilder.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="clientId"></param>
        </member>
        <member name="M:Box.V2.Auth.Token.ActorTokenBuilder.SetUserName(System.String)">
            <summary>
            Set external user name.
            </summary>
            <param name="userName">The external user name.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Box.V2.Auth.Token.ActorTokenBuilder.Build">
            <summary>
            Build the actorToken.
            </summary>
            <returns>The actorToken in string.</returns>
        </member>
        <member name="T:Box.V2.Auth.Token.TokenExchange">
            <summary>
            Logic for token exchange.
            </summary>
        </member>
        <member name="M:Box.V2.Auth.Token.TokenExchange.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Box.V2.Auth.Token.TokenExchange"/> class.
            </summary>
            <param name="token">The access token.</param>
            <param name="scope">The scope to be limited to.</param>
        </member>
        <member name="M:Box.V2.Auth.Token.TokenExchange.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Box.V2.Auth.Token.TokenExchange"/> class.
            </summary>
            <param name="token">The access token.</param>
            <param name="scopes">The scopes to be limited to.</param>
        </member>
        <member name="M:Box.V2.Auth.Token.TokenExchange.SetActorToken(System.String)">
            <summary>
            Set actor token.
            </summary>
            <param name="actorToken">The actor user token.</param>
        </member>
        <member name="M:Box.V2.Auth.Token.TokenExchange.SetResource(System.String)">
            <summary>
            Set resource.
            </summary>
            <param name="resourceUrl">The resource url.</param>
        </member>
        <member name="M:Box.V2.Auth.Token.TokenExchange.ExchangeAsync">
            <summary>
            Get a down scoped token.
            </summary>
            <returns>The down scoped access token.</returns>
        </member>
        <member name="T:Box.V2.Auth.OAuthSession">
            <summary>
            Box representation of an OAuth2 session
            </summary>
        </member>
        <member name="M:Box.V2.Auth.OAuthSession.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Instantiates a new OAuth 2 session. This is primarily used if you are developing a custom
            OAuth login experience
            </summary>
            <param name="access_token">A valid access token</param>
            <param name="refresh_token">A valid refresh token</param>
            <param name="expires_in">Time in seconds the access token will expire</param>
            <param name="token_type">Token type (usually bearer)</param>
        </member>
        <member name="P:Box.V2.Auth.OAuthSession.AccessToken">
            <summary>
            The token used to retrieve all data that requires authorization
            </summary>
        </member>
        <member name="P:Box.V2.Auth.OAuthSession.RefreshToken">
            <summary>
            Refresh token used to exchange for a new access token. This token is only good 
            for one time use. Once used, both the current refresh token token and access token 
            will be invalidated.
            </summary>
        </member>
        <member name="P:Box.V2.Auth.OAuthSession.ExpiresIn">
            <summary>
            Seconds the access token will be active.
            </summary>
        </member>
        <member name="P:Box.V2.Auth.OAuthSession.TokenType">
            <summary>
            Represents how the access token will be generated and presented
            Most commonly this will be "bearer", anybody with a bearer token will have access.
            </summary>
        </member>
        <member name="P:Box.V2.Auth.OAuthSession.RestrictedTo">
            <summary>
            Gets the restricted to.
            </summary>
            <value>
            The restricted to.
            </value>
        </member>
        <member name="T:Box.V2.BoxClient">
            <summary>
            The central entrypoint for all SDK interaction. The BoxClient houses all of the API endpoints and are represented 
            as resource managers for each distinct endpoint
            </summary>
        </member>
        <member name="M:Box.V2.BoxClient.#ctor(Box.V2.Config.IBoxConfig,System.String,System.Nullable{System.Boolean})">
            <summary>
            Instantiates a BoxClient with the provided config object
            </summary>
            <param name="boxConfig">The config object to be used</param>
            <param name="asUser">The user ID to set as the 'As-User' header parameter; used to make calls in the context of a user using an admin token</param>
            <param name="suppressNotifications">Whether or not to suppress both email and webhook notifications. Typically used for administrative API calls. Your application must have “Manage an Enterprise” scope, and the user making the API calls is a co-admin with the correct "Edit settings for your company" permission.</param>
        </member>
        <member name="M:Box.V2.BoxClient.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Auth.OAuthSession,System.String,System.Nullable{System.Boolean})">
            <summary>
            Instantiates a BoxClient with the provided config object and auth session
            </summary>
            <param name="boxConfig">The config object to be used</param>
            <param name="authSession">A fully authenticated auth session</param>
            <param name="asUser">The user ID to set as the 'As-User' header parameter; used to make calls in the context of a user using an admin token</param>
            <param name="suppressNotifications">Whether or not to suppress both email and webhook notifications. Typically used for administrative API calls. Your application must have “Manage an Enterprise” scope, and the user making the API calls is a co-admin with the correct "Edit settings for your company" permission.</param>
        </member>
        <member name="M:Box.V2.BoxClient.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Auth.IAuthRepository,System.String,System.Nullable{System.Boolean})">
            <summary>
            Instantiates a BoxClient that uses JWT authentication
            </summary>
            <param name="boxConfig">The config object to be used</param>
            <param name="authRepository">An IAuthRepository that knows how to retrieve new tokens using JWT</param>
            <param name="asUser">The user ID to set as the 'As-User' header parameter; used to make calls in the context of a user using an admin token</param>
            <param name="suppressNotifications">Whether or not to suppress both email and webhook notifications. Typically used for administrative API calls. Your application must have “Manage an Enterprise” scope, and the user making the API calls is a co-admin with the correct "Edit settings for your company" permission.</param>
        </member>
        <member name="M:Box.V2.BoxClient.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Converter.IBoxConverter,Box.V2.Request.IRequestHandler,Box.V2.Services.IBoxService,Box.V2.Auth.IAuthRepository,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new BoxClient with the provided config, converter, service and auth objects.
            </summary>
            <param name="boxConfig">The config object to use</param>
            <param name="boxConverter">The box converter object to use</param>
            <param name="requestHandler">The box request handler to use</param>
            <param name="boxService">The box service to use</param>
            <param name="auth">The auth repository object to use</param>
            <param name="asUser">The user ID to set as the 'As-User' header parameter; used to make calls in the context of a user using an admin token</param>
            <param name="suppressNotifications">Whether or not to suppress both email and webhook notifications. Typically used for administrative API calls. Your application must have “Manage an Enterprise” scope, and the user making the API calls is a co-admin with the correct "Edit settings for your company" permission.</param>
        </member>
        <member name="M:Box.V2.BoxClient.AddResourcePlugin``1">
            <summary>
            Adds additional resource managers/endpoints to the BoxClient.
            This is meant to allow for the inclusion of beta APIs or unofficial endpoints
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Box.V2.BoxClient.Config">
            <summary>
            The configuration parameters used by the Box Service
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.FilesManager">
            <summary>
            The manager that represents the files endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.FoldersManager">
            <summary>
            The manager that represents the folders endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.CommentsManager">
            <summary>
            The manager that represents the comments endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.CollaborationsManager">
            <summary>
            The manager that represents the collaboration endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.SearchManager">
            <summary>
            The manager that represents the search endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.EventsManager">
            <summary>
            The manager that represents the events endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.UsersManager">
            <summary>
            The manager that represents the users endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.GroupsManager">
            <summary>
            The manager that represents the groups endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.RetentionPoliciesManager">
            <summary>
            The manager that represents the retention policies endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.MetadataManager">
            <summary>
            The manager that represents the file and folder metadata endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.WebhooksManager">
            <summary>
            The manager that represents the webhooks V2 endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.RecentItemsManager">
            <summary>
            The manager that represents the recent items endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.TasksManager">
            <summary>
            The manager that represents the tasks endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.LegalHoldPoliciesManager">
            <summary>
            The manager that represents the legal hold policies endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.Auth">
            <summary>
            The Auth repository that holds the auth session
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.ResourcePlugins">
            <summary>
            Allows resource managers to be registered and retrieved as plugins
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.SharedItemsManager">
            <summary>
            The manager that represents the shared items endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.CollectionsManager">
            <summary>
            The manager that represents the collections endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.DevicePinManager">
            <summary>
            The manager that represents the device pin endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.WebLinksManager">
            <summary>
            The manager that represents the weblinks endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.CollaborationWhitelistManager">
            <summary>
            The manager that represents the collaboration whitelist endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.TermsOfServiceManager">
            <summary>
            The manager that represents the terms of service endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.MetadataCascadePolicyManager">
            <summary>
            The manager that represents the metadata cascade policy endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.StoragePoliciesManager">
            <summary>
            The manager that represents the storage policies endpoint
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.SignRequestsManager">
            <summary>
            The manager that represents sign requests endpoints.
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.SignTemplatesManager">
            <summary>
            The manager that represents sign templates endpoints.
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.FileRequestsManager">
            <summary>
            The manager that represents all of the file requests endpoints.
            </summary>
        </member>
        <member name="P:Box.V2.BoxClient.BoxAIManager">
            <summary>
            The manager that represents all of the AI endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.CCGAuth.BoxCCGAuth.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService)">
            <summary>
            Constructor for CCG authentication
            </summary>
            <param name="boxConfig">Config contains information about client id, client secret, enterprise id.</param>
            <param name="boxService">Box service is used to perform GetToken requests</param>
        </member>
        <member name="M:Box.V2.CCGAuth.BoxCCGAuth.#ctor(Box.V2.Config.IBoxConfig)">
            <summary>
            Constructor for CCG authentication with default boxService
            </summary>
            <param name="boxConfig">Config contains information about client id, client secret, enterprise id.</param>
        </member>
        <member name="M:Box.V2.CCGAuth.BoxCCGAuth.AdminClient(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Create admin BoxClient using an admin access token
            </summary>
            <param name="adminToken">Admin access token</param>
            <param name="asUser">The user ID to set as the 'As-User' header parameter; used to make calls in the context of a user using an admin token</param>
            <param name="suppressNotifications">Whether or not to suppress both email and webhook notifications. Typically used for administrative API calls. Your application must have “Manage an Enterprise” scope, and the user making the API calls is a co-admin with the correct "Edit settings for your company" permission.</param>
            <returns>BoxClient that uses CCG authentication</returns>
        </member>
        <member name="M:Box.V2.CCGAuth.BoxCCGAuth.AdminClient(System.String,System.Nullable{System.Boolean})">
            <summary>
            Create admin BoxClient
            </summary>
            <param name="asUser">The user ID to set as the 'As-User' header parameter; used to make calls in the context of a user using an admin token</param>
            <param name="suppressNotifications">Whether or not to suppress both email and webhook notifications. Typically used for administrative API calls. Your application must have “Manage an Enterprise” scope, and the user making the API calls is a co-admin with the correct "Edit settings for your company" permission.</param>
            <returns>BoxClient that uses CCG authentication</returns>
        </member>
        <member name="M:Box.V2.CCGAuth.BoxCCGAuth.UserClient(System.String,System.String)">
            <summary>
            Create user BoxClient using a user access token
            </summary>
            <param name="userToken">User access token</param>
            <param name="userId">Id of the user</param>
            <returns>BoxClient that uses CCG authentication</returns>
        </member>
        <member name="M:Box.V2.CCGAuth.BoxCCGAuth.UserClient(System.String)">
            <summary>
            Create user BoxClient
            </summary>
            <param name="userId">Id of the user</param>
            <returns>BoxClient that uses CCG authentication</returns>
        </member>
        <member name="M:Box.V2.CCGAuth.BoxCCGAuth.AdminTokenAsync">
            <summary>
            Get admin token by posting data to auth url
            </summary>
            <returns>Admin token</returns>
        </member>
        <member name="M:Box.V2.CCGAuth.BoxCCGAuth.UserTokenAsync(System.String)">
            <summary>
            Once you have created an App User or Managed User, you can request a User Access Token via the App Auth feature, which will return the OAuth 2.0 access token for the specified User.
            </summary>
            <param name="userId">Id of the user</param>
            <returns>User token</returns>
        </member>
        <member name="M:Box.V2.CCGAuth.BoxCCGAuth.Session(System.String)">
            <summary>
            Create OAuth session from token
            </summary>
            <param name="token">Access token created by method UserToken, or AdminToken</param>
            <returns>OAuth session</returns>
        </member>
        <member name="T:Box.V2.CCGAuth.CCGAuthRepository">
            <summary>
            CCG auth repository used by an AdminClient or UserClient
            </summary>
        </member>
        <member name="P:Box.V2.CCGAuth.CCGAuthRepository.Session">
            <summary>
            OAuth session
            </summary>
        </member>
        <member name="P:Box.V2.CCGAuth.CCGAuthRepository.BoxCCGAuth">
            <summary>
            Box Authentication using a Client Credentials Grant (CCG)
            </summary>
        </member>
        <member name="P:Box.V2.CCGAuth.CCGAuthRepository.UserId">
            <summary>
            Id of the user
            </summary>
        </member>
        <member name="E:Box.V2.CCGAuth.CCGAuthRepository.SessionInvalidated">
            <summary>
            Event fired when session is invalidated
            </summary>
        </member>
        <member name="E:Box.V2.CCGAuth.CCGAuthRepository.SessionAuthenticated">
            <summary>
            Event fired after authetication
            </summary>
        </member>
        <member name="M:Box.V2.CCGAuth.CCGAuthRepository.#ctor(Box.V2.Auth.OAuthSession,Box.V2.CCGAuth.BoxCCGAuth,System.String)">
            <summary>
            Constructor CCG auth repository
            </summary>
            <param name="session">OAuth session</param>
            <param name="boxCCGAuth">CCG authentication</param>
            <param name="userId">Id of the user</param>
        </member>
        <member name="M:Box.V2.CCGAuth.CCGAuthRepository.#ctor(Box.V2.CCGAuth.BoxCCGAuth,System.String)">
            <summary>
            Constructor CCG auth repository
            </summary>
            <param name="boxCCGAuth">CCG authentication</param>
            <param name="userId">Id of the user</param>
        </member>
        <member name="M:Box.V2.CCGAuth.CCGAuthRepository.AuthenticateAsync(System.String)">
            <summary>
            Not used for this type of authentication
            </summary>
            <param name="authCode"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.CCGAuth.CCGAuthRepository.LogoutAsync">
            <summary>
            Not used for this type of authentication
            </summary>
            <returns></returns>
        </member>
        <member name="M:Box.V2.CCGAuth.CCGAuthRepository.RefreshAccessTokenAsync(System.String)">
            <summary>
            Retrieves a new access token using BoxCCGAuth
            </summary>
            <param name="accessToken">This input is not used. Could be set to null</param>
            <returns>OAuth session</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfig.#ctor(System.String,System.String,System.Uri)">
            <summary>
            Instantiates a Box config with all of the standard defaults
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="redirectUri"></param>
        </member>
        <member name="M:Box.V2.Config.BoxConfig.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Instantiates a Box config for use with JWT authentication
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="enterpriseId"></param>
            <param name="jwtPrivateKey"></param>
            <param name="jwtPrivateKeyPassword"></param>
            <param name="jwtPublicKeyId"></param>
        </member>
        <member name="M:Box.V2.Config.BoxConfig.CreateFromJsonFile(System.IO.Stream)">
            <summary>
            Create BoxConfig from json file.
            </summary>
            <param name="jsonFile">json file stream.</param>
            <returns>IBoxConfig instance.</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfig.CreateFromJsonString(System.String)">
            <summary>
            Create BoxConfig from json string
            </summary>
            <param name="jsonString">json string.</param>
            <returns>IBoxConfig instance.</returns>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.JWTAudience">
            <summary>
            Audience claim for JWT token. 
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.AcceptEncoding">
            <summary>
            Sends compressed responses from Box for faster response times
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.FilesUploadSessionEndpointUri">
            <summary>
            Upload session
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.SharedItemsUri">
            <summary>
            Gets the shared items endpoint URI.
            </summary>
            <value>
            The shared items endpoint URI.
            </value>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.TaskAssignmentsEndpointUri">
            <summary>
            Gets the task assignments endpoint URI.
            </summary>
            <value>
            The task assignments endpoint URI.
            </value>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.TasksEndpointUri">
            <summary>
            Gets the tasks endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.CollectionsEndpointUri">
            <summary>
            Gets the collections endpoint URI.
            </summary>
            <value>
            The collections endpoint URI.
            </value>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.WebLinksEndpointUri">
            <summary>
            Gets the web links endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.LegalHoldPoliciesEndpointUri">
            <summary>
            Gets the legal hold policies endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.LegalHoldPolicyAssignmentsEndpointUri">
            <summary>
            Gets the legal hold policies endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.FileVersionLegalHoldsEndpointUri">
            <summary>
            Gets the file viersion legal holds endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.ZipDownloadsEndpointUri">
            <summary>
            Gets the zip downloads endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.FolderLocksEndpointUri">
            <summary>
            Gets the folder locks endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.SignRequestsEndpointUri">
            <summary>
            Gets the sign requests endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.SignRequestsEndpointWithPathUri">
            <summary>
            Gets the sign requests endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.SignTemplatesEndpointUri">
            <summary>
            Gets the sign templates endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.SignTemplatesEndpointWithPathUri">
            <summary>
            Gets the sign templates endpoint URI with path.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.FileRequestsEndpointWithPathUri">
            <summary>
            Gets the file requests endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.AIEndpointWithPathUri">
            <summary>
            Gets the AI endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.WebProxy">
            <summary>
            The web proxy for HttpRequestHandler
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.Timeout">
            <summary>
            Timeout for the connection
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfig.RetryStrategy">
            <summary>
            Retry strategy for failed requests
            </summary>
        </member>
        <member name="T:Box.V2.Config.BoxConfigBuilder">
            <summary>
            Builder used to instantiate new BoxConfig. It follows FluentBuilder pattern and can be used by chaining methods.
            </summary>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.#ctor(System.String,System.String,System.Uri)">
            <summary>
            Instantiates a BoxConfigBuilder with all of the standard defaults
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="redirectUri"></param>
            <returns>BoxConfigBuilder instance.</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Instantiates a BoxConfigBuilder for use with JWT authentication
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <param name="enterpriseId"></param>
            <param name="jwtPrivateKey"></param>
            <param name="jwtPrivateKeyPassword"></param>
            <param name="jwtPublicKeyId"></param>
            <returns>BoxConfigBuilder instance.</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.#ctor(System.String,System.String)">
            <summary>
            Instantiates a BoxConfigBuilder for use with CCG authentication
            </summary>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <returns>BoxConfigBuilder instance.</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.CreateFromJsonFile(System.IO.Stream)">
            <summary>
            Create BoxConfigBuilder from json file.
            </summary>
            <param name="jsonFile">json file stream.</param>
            <returns>BoxConfigBuilder instance.</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.CreateFromJsonString(System.String)">
            <summary>
            Create BoxConfigBuilder from json string
            </summary>
            <param name="jsonString">json string.</param>
            <returns>BoxConfigBuilder instance.</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.Build">
            <summary>
            Create IBoxConfig from the builder.
            </summary>
            <returns>IBoxConfig instance.</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetUserAgent(System.String)">
            <summary>
            Sets user agent.
            </summary>
            <param name="userAgent">User agent.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetBoxApiHostUri(System.Uri)">
            <summary>
            Sets BoxAPI host uri.
            </summary>
            <param name="boxApiHostUri">BoxAPI host uri.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetBoxAccountApiHostUri(System.Uri)">
            <summary>
            Sets BoxAPI account host uri.
            </summary>
            <param name="boxAccountApiHostUri">BoxAPI account host uri.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetBoxUploadApiUri(System.Uri)">
            <summary>
            Sets BoxAPI upload uri.
            </summary>
            <param name="boxUploadApiUri">BoxAPI upload uri.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetRedirectUri(System.Uri)">
            <summary>
            Sets redirect uri.
            </summary>
            <param name="redirectUri">Redirect uri.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetDeviceId(System.String)">
            <summary>
            Sets device id.
            </summary>
            <param name="deviceId">Device id.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetDeviceName(System.String)">
            <summary>
            Sets device name.
            </summary>
            <param name="deviceName">Device name.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetAcceptEncoding(System.Nullable{Box.V2.Config.CompressionType})">
            <summary>
            Sets acceptEncoding.
            </summary>
            <param name="acceptEncoding">AcceptEncoding.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetWebProxy(System.Net.IWebProxy)">
            <summary>
            Sets web proxy for HttpRequestHandler.
            </summary>
            <param name="webProxy">Web proxy for HttpRequestHandler.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetTimeout(System.TimeSpan)">
            <summary>
            Sets connection timeout for HttpRequestHandler.
            </summary>
            <param name="timeout">Connection timeout for HttpRequestHandler.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetEnterpriseId(System.String)">
            <summary>
            Sets enterprise id.
            </summary>
            <param name="enterpriseId">Enteprise id.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetRetryStrategy(Box.V2.Utility.IRetryStrategy)">
            <summary>
            Sets retry strategy.
            </summary>
            <param name="enterpriseId">Retry strategy.</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="M:Box.V2.Config.BoxConfigBuilder.SetJWTAudience(System.String)">
            <summary>
            Sets audience claim used in JWT tokens.
            </summary>
            <param name="jwtAudience">Audience claim value</param>
            <returns>this BoxConfigBuilder object for chaining</returns>
        </member>
        <member name="P:Box.V2.Config.BoxConfigBuilder.AcceptEncoding">
            <summary>
            Sends compressed responses from Box for faster response times
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfigBuilder.WebProxy">
            <summary>
            The web proxy for HttpRequestHandler
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfigBuilder.Timeout">
            <summary>
            Timeout for the connection
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfigBuilder.RetryStrategy">
            <summary>
            Retry strategy for failed requests
            </summary>
        </member>
        <member name="P:Box.V2.Config.BoxConfigBuilder.JWTAudience">
            <summary>
            Audience claim for JWT token. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.SharedItemsString">
            <summary>
            The shared items constant
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.CollectionsString">
            <summary>
            The collections endpoint constant
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.WebLinksString">
            <summary>
            The web links endpoint constant
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.LegalHoldPoliciesString">
            <summary>
            The legal hold policies endpoint constant
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.LegalHoldPolicyAssignmentsString">
            <summary>
            The legal hold policy assignments endpoint constant
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.FileVersionLegalHoldsString">
            <summary>
            The legal hold policy assignments endpoint constant
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.RepresentationTypes.Pdf">
            <summary>
             This requests a pdf representation of all document Box file types
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.RepresentationTypes.ExtractedText">
            <summary>
            This requests a text format of all document file types including text/code files supported by Box
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.RepresentationTypes.ThumbnailSmall">
            <summary>
            This will request a small jpg thumbnail of all document, image, and video Box file types
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.RepresentationTypes.ImageMedium">
            <summary>
            This will request two images of type jpg and png with dimensions of 1024x1024 for all
            document, image, and video Box file types
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.RepresentationTypes.ImageLarge">
            <summary>
            This will request two images of type jpg and png with dimensions of 2048x2048 for all
            document, image, and video Box file types
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.ContentDispositionTypes.Inline">
            <summary>
            Passing this value into set_content_disposition_type will ensure that the browser opens the representation
            in another window
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.ContentDispositionTypes.Attachment">
            <summary>
            Passing this value into set_content_disposition_type will ensure that the browser downloads the representation
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemCreate">
            <summary>
            A folder or file was created. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemUpload">
            <summary>
            A folder of file was uploaded.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.CommentCreate">
            <summary>
            A comment was created on a folder, file, or other comment. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.CommentDelete">
            <summary>
            A comment was deleted on folder, file, or other comment. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemDownload">
            <summary>
            A file or folder was downloaded. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemPreview">
            <summary>
            a file was previewed. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemMove">
            <summary>
            A file or folder was moved. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemCopy">
            <summary>
            A file or folder was copied. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.TaskAssignmentCreate">
            <summary>
            A task was assigned. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.TaskCreate">
            <summary>
            A task was created. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.LockCreate">
            <summary>
            A file was locked. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.LockDestroy">
            <summary>
            A file was unlocked. If a locked file is deleted, the source file will be null. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemTrash">
            <summary>
            A file or folder was marked as deleted. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.CollabAddCollaborator">
            <summary>
            A collaborator was added to a folder.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.CollabRoleChange">
            <summary>
            A collaborator has their role changed. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.CollabInviteCollaborator">
            <summary>
            A collaborator was invited on a folder. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.CollabRemoveCollaborator">
            <summary>
            A collaborator was removed from a folder. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemSync">
            <summary>
            A folder was marked for sync. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemUnsync">
            <summary>
            A folder was un-marked for sync. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemRename">
            <summary>
            A file or folder was renamed.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemSharedCreate">
            <summary>
            A file or folder was enabled for sharing. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemSharedUnshare">
            <summary>
            A file or folder was disabled for sharing. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemShared">
            <summary>
            A folder was shared. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.ItemMakeCurrentVersion">
            <summary>
            A previous version of a file was promoted to the current version. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.TagItemCreate">
            <summary>
            A Tag was added to a file or folder. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.EnableTwoFactorAuth">
            <summary>
            2 factor authentication enabled by user. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.AdminInviteAccept">
            <summary>
            Free user accepts invitation to become a managed user. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.AdminInviteReject">
            <summary>
            Free user rejects invitation to become a managed user. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.AccessGranted">
            <summary>
            Revoke Box access to account. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.GroupAddUser">
            <summary>
            Added user to group. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.UserEventTypes.GroupRemoveUser">
            <summary>
            Removed user from group.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.GroupAddUser">
            <summary>
            Added user to group.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.NewUser">
            <summary>
            Created user. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.GroupCreation">
            <summary>
            Created new group.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.GroupDeletion">
            <summary>
            Deleted group. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.DeleteUser">
            <summary>
            Deleted group. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.GroupEdited">
            <summary>
            Edited group.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.EditUser">
            <summary>
            Edited user.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.GroupRemoveUser">
            <summary>
            Removed user from group.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.AdminLogin">
            <summary>
            Admin login.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.AddDeviceAssociation">
            <summary>
            Added device association.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ChangeFolderPermission">
            <summary>
            Edit the permissions on a folder. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.FailedLogin">
            <summary>
            Failed login.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Login">
            <summary>
            Login.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.RemoveDeviceAssociation">
            <summary>
            Removed device association. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.TermsOfServiceAgree">
            <summary>
            Agree to terms.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.TermsOfServiceReject">
            <summary>
            Rejected terms. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.FileMarkedMalicious">
            <summary>
            Virus found on a file. Event is only received by enterprises that have opted in to be notified. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Copy">
            <summary>
            Copied. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Delete">
            <summary>
            Deleted.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Download">
            <summary>
            Downloaded. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Edit">
            <summary>
            Edited 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Lock">
            <summary>
            Edited. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Move">
            <summary>
            Moved.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Preview">
            <summary>
            Previewed. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Rename">
            <summary>
            A file or folder name or description is changed. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.StorageExpiration">
            <summary>
            Set file auto-delete.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Undelete">
            <summary>
            Undeleted. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Unlock">
            <summary>
            Unlocked. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Upload">
            <summary>
            Uploaded. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Share">
            <summary>
            Enabled shared links. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ItemSharedUpdate">
            <summary>
            Share links settings updated. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.UpdateShareExpiration">
            <summary>
            Extend shared link expiration. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ShareExpiration">
            <summary>
            Set shared link expiration. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.Unshare">
            <summary>
            Unshared links. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.CollaborationAccept">
            <summary>
            Accepted invites. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.CollaborationRoleChange">
            <summary>
            Changed user roles. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.UpdateCollaborationExpiration">
            <summary>
            Extend collaborator expiration. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.CollaborationRemove">
            <summary>
            Removed collaborators. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.CollaborationInvite">
            <summary>
            Invited. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.CollaborationExpiration">
            <summary>
            Set collaborator expiration. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ItemSync">
            <summary>
            Synced folder. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ItemUnsync">
            <summary>
            Un-synced folder. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.AddLoginActivityDevice">
            <summary>
            A user is logging in from a device we haven't see before. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.RemoveLoginActivityDevice">
            <summary>
            We invalidated a user session associated with an app. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ChangeAdminRole">
            <summary>
            When an admin role changes for a user. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ContentWorkflowUploadPolicyViolation">
            <summary>
            A collaborator violated an admin-set upload policy. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.MetadataInstanceCreate">
            <summary>
            Creation of metadata instance. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.MetadataInstanceUpdate">
            <summary>
            Update of metadata instance. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.MetadataInstanceDelete">
            <summary>
            Deletion of metadata instance. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.TaskAssignmentUpdate">
            <summary>
            Update of a task assignment. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.TaskAssignmentCreate">
            <summary>
            A task assignment is created.  
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.TaskAssignmentDelete">
            <summary>
            A task assignment is deleted. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.TaskCreate">
            <summary>
            A task is created. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.CommentCreate">
            <summary>
            A comment is created on a file. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.DateRetentionRemoveRetention">
            <summary>
            Retention is removed. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.DataRetentionCreateRetention">
            <summary>
            Retention is created. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.RetentionPolicyAssignmentAdd">
            <summary>
            A retention policy assignment is added. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.LegalHoldAssignmentCreate">
            <summary>
            A legal hold assignment is created. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.LegalHoldAssignmentDelete">
            <summary>
            A legal hold assignment is deleted. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.LegalHoldPolicyDelete">
            <summary>
            A legal hold policy is deleted. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ContentWorkflowSharingPolicyViolation">
            <summary>
            There is a sharing policy violation. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ApplicationPublicKeyAdded">
            <summary>
            An application public key is added. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ApplicationPublicKeyDeleted">
            <summary>
            An application public key is deleted. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ContentWorkflowPolicyAdd">
            <summary>
            A content policy is added. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ContentWorkflowAutomationAdd">
            <summary>
            An automation is added. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ContentWorkflowAutomationDelete">
            <summary>
            An automation is deleted. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.EmailAliasConfirm">
            <summary>
            A user email alias is confirmed. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.EmailAliasRemove">
            <summary>
            A user email alias is removed. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.WatermarkLabelCreate">
            <summary>
            A watermark is added to a file. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.WatermarkLabelDelete">
            <summary>
            A watermark is removed from a file. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.AccessGranted">
            <summary>
            A user has granted Box access to their account. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.AccessRevoked">
            <summary>
            A user has revoked Box access to their account. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.MetadataTemplateCreate">
            <summary>
            Creation of metadata template instance. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.MatadataTemplateUpdate">
            <summary>
            Update of metadata template instance. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.MetadataTemplateDelete">
            <summary>
            Deletion of metadata template instance. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ItemOpen">
            <summary>
            Item was opened. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ItemModify">
            <summary>
            Item was modified. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ContentWorkflowAbnormalDownloadActivity">
            <summary>
            When a policy set the Admin console is triggered. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.GroupRemoveItem">
            <summary>
            Folders were removed from a group in the admin console. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.GroupAddItem">
            <summary>
            Folders were added to a group in the Admin console. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.UserAuthenticateOAuth2AccessTokenCreate">
            <summary>
            An OAuth2 access token was generated for a user.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.ContentAccess">
            <summary>
            A content was accessed by a user.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.AdminEventTypes.FileVersionRestore">
            <summary>
            A file version was made current.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.WhitelistDirections.Inbound">
            <summary>
            Passing this value into direction will limit the collaboration whitelisting to collaborations inside an enterprise only. 
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.WhitelistDirections.Outbound">
            <summary>
            Passing this value into direction will limit the collaboration whitelisting to collaborations outside of an enterprise only.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.WhitelistDirections.Both">
            <summary>
            Passing this value into direction will limit the collaboration whitelisting to both collaborations inside and outside of an enterprise.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.ConflictResolution.None">
            <summary>
            This will preserve the existing value on the file.
            </summary>
        </member>
        <member name="F:Box.V2.Config.Constants.ConflictResolution.Overwrite">
            <summary>
            This will force-apply the cascade policy's value over any existing value.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.AcceptEncoding">
            <summary>
            Sends compressed responses from Box for faster response times
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.FilesUploadSessionEndpointUri">
            <summary>
            Upload session
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.SharedItemsUri">
            <summary>
            Gets the shared items endpoint URI.
            </summary>
            <value>
            The shared items endpoint URI.
            </value>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.TaskAssignmentsEndpointUri">
            <summary>
            Gets the task assignments endpoint URI.
            </summary>
            <value>
            The task assignments endpoint URI.
            </value>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.TasksEndpointUri">
            <summary>
            Gets the tasks endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.CollectionsEndpointUri">
            <summary>
            Gets the collections endpoint URI.
            </summary>
            <value>
            The collections endpoint URI.
            </value>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.WebLinksEndpointUri">
            <summary>
            Gets the web links endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.LegalHoldPoliciesEndpointUri">
            <summary>
            Gets the legal hold policies endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.LegalHoldPolicyAssignmentsEndpointUri">
            <summary>
            Gets the legal hold policy assignments endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.FileVersionLegalHoldsEndpointUri">
            <summary>
            Gets the file viersion legal holds endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.ZipDownloadsEndpointUri">
            <summary>
            Gets the zip downloads endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.FolderLocksEndpointUri">
            <summary>
            Gets the folder locks endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.SignRequestsEndpointUri">
            <summary>
            Gets the sign requests endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.SignRequestsEndpointWithPathUri">
            <summary>
            Gets the sign requests endpoint URI with path.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.SignTemplatesEndpointUri">
            <summary>
            Gets the sign templates endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.SignTemplatesEndpointWithPathUri">
            <summary>
            Gets the sign template endpoints URI with path.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.FileRequestsEndpointWithPathUri">
            <summary>
            Gets the file requests endpoint URI with path.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.AIEndpointWithPathUri">
            <summary>
            Gets the AI endpoint URI.
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.WebProxy">
            <summary>
            The web proxy for HttpRequestHandler
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.Timeout">
            <summary>
            Timeout for the connection
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.RetryStrategy">
            <summary>
            Retry strategy for failed requests
            </summary>
        </member>
        <member name="P:Box.V2.Config.IBoxConfig.JWTAudience">
            <summary>
            JWT token audience claim.
            https://api.box.com/oauth2/token is used by default.
            </summary>
        </member>
        <member name="M:Box.V2.Converter.JsonCreationConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Create an instance of objectType, based properties in the JSON object
            </summary>
            <param name="objectType">type of object expected</param>
            <param name="jObject">contents of JSON object that will be deserialized</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Converter.BoxJsonConverter.#ctor">
            <summary>
            Instantiates a new BoxJsonConverter that converts JSON
            </summary>
        </member>
        <member name="M:Box.V2.Converter.BoxJsonConverter.Parse``1(System.String)">
            <summary>
            Parses a JSON string into the provided type T
            </summary>
            <typeparam name="T">The type that the content should be parsed into</typeparam>
            <param name="content">The JSON string</param>
            <returns>The box representation of the JSON</returns>
        </member>
        <member name="M:Box.V2.Converter.BoxJsonConverter.Serialize``1(``0)">
            <summary>
            Serializes the Box type into JSON
            </summary>
            <typeparam name="T">The type of the entity to serialize</typeparam>
            <param name="entity">The entity to serialize</param>
            <returns>JSON string</returns>
        </member>
        <member name="M:Box.V2.Converter.IBoxConverter.Parse``1(System.String)">
            <summary>
            Parses the string content into the provided type T
            </summary>
            <typeparam name="T">The type of the content</typeparam>
            <param name="content">The string content</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Converter.IBoxConverter.Serialize``1(``0)">
            <summary>
            Serializes the type into a string
            </summary>
            <typeparam name="T">The type of the entity</typeparam>
            <param name="entity">The entity to be serialized</param>
            <returns></returns>
        </member>
        <member name="T:Box.V2.Exceptions.BoxSessionInvalidatedException">
            <summary>
            An exception to represent that the current access/refresh tokens are in an 
            unrecoverable state. This can either be due to the tokens being revoked or expired.
            A new session must be created by going through the OAuth workflow again
            </summary>
        </member>
        <member name="M:Box.V2.Exceptions.BoxSessionInvalidatedException.#ctor(System.String,Box.V2.BoxError,System.Net.HttpStatusCode,System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
            Instantiates a new BoxSessionInvalidatedException with the provided message and error object, status code and response headers
            </summary>
            <param name="message"></param>
            <param name="error"></param>
            <param name="statusCode"></param>
            <param name="responseHeaders"></param>
        </member>
        <member name="M:Box.V2.Exceptions.BoxException.#ctor">
            <summary>
            Instantiates a new BoxException
            This exception is used when the SDK throws an exception
            </summary>
        </member>
        <member name="M:Box.V2.Exceptions.BoxException.#ctor(System.String)">
            <summary>
            Instantiates a new BoxException with the provided message
            </summary>
            <param name="message">The message for the exception</param>
        </member>
        <member name="M:Box.V2.Exceptions.BoxException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a new BoxException with the provided message and provided inner Exception
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception to be wrapped</param>
        </member>
        <member name="M:Box.V2.Exceptions.BoxCodingException.#ctor(System.String)">
            <summary>
            Instantiates a new BoxCodingException with the provided message
            </summary>
            <param name="message">The message for the exception</param>
        </member>
        <member name="M:Box.V2.Exceptions.BoxAPIException.#ctor(System.String,Box.V2.BoxError,System.Net.HttpStatusCode,System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
            Instantiates a new BoxAPIException with the provided message and error object, status code and response headers
            </summary>
            <param name="message"></param>
            <param name="error"></param>
            <param name="statusCode"></param>
            <param name="responseHeaders"></param>
        </member>
        <member name="M:Box.V2.Exceptions.BoxAPIException.GetResponseException``1(System.String,Box.V2.IBoxResponse{``0})">
            <summary>
            Instantiate a Box specific exception from a given HTTP response
            </summary>
            <param name="message">The message from the SDK about what happened</param>
            <param name="response">The HTTP response that generated the exception</param>
        </member>
        <member name="P:Box.V2.Exceptions.BoxAPIException.StatusCode">
            <summary>
            Http Status code for the response
            </summary>
        </member>
        <member name="P:Box.V2.Exceptions.BoxAPIException.Error">
            <summary>
            Error parsed from the message returned by the API
            </summary>
        </member>
        <member name="P:Box.V2.Exceptions.BoxAPIException.ResponseHeaders">
            <summary>
            Response headers returned by the API
            </summary>
        </member>
        <member name="P:Box.V2.Exceptions.BoxAPIException.ErrorCode">
            <summary>
            Error code of the Error returned by the API. Can be empty
            </summary>
        </member>
        <member name="P:Box.V2.Exceptions.BoxAPIException.ErrorDescription">
            <summary>
            Error description of the Error returned by the API. Can be empty
            </summary>
        </member>
        <member name="M:Box.V2.Extensions.BoxExtensions.ThrowIfNull``1(``0,System.String)">
            <summary>
            Checks if the object is null 
            </summary>
            <typeparam name="T">Type of the object being checked</typeparam>
            <param name="param"></param>
            <param name="name"></param>
        </member>
        <member name="M:Box.V2.Extensions.BoxExtensions.ThrowIfNull``1(System.Nullable{``0},System.String)">
            <summary>
            Checks if the object is null 
            </summary>
            <typeparam name="T">Type of the object being checked</typeparam>
            <param name="param"></param>
            <param name="name"></param>
        </member>
        <member name="M:Box.V2.Extensions.BoxExtensions.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Checks if a string is null or whitespace
            </summary>
            <param name="value"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Extensions.BoxExtensions.ThrowIfDifferent``1(``0,System.String,``0)">
            <summary>
            Checks if a value is equal to the expectedValue
            </summary>
            <param name="value"></param>
            <param name="name"></param>
            <param name="expectedValue"></param>
            <returns></returns>
        </member>
        <member name="T:Box.V2.Extensions.BoxRequestExtensions">
            <summary>
            Extends the BoxRequest object with convenience methods
            </summary>
        </member>
        <member name="T:Box.V2.Extensions.BoxResponseExtensions">
            <summary>
            Extends the BoxResponse class with convenience methods
            </summary>
        </member>
        <member name="M:Box.V2.Extensions.BoxResponseExtensions.ParseResults``1(Box.V2.IBoxResponse{``0},Box.V2.Converter.IBoxConverter)">
            <summary>
            Parses the BoxResponse with the provided converter
            </summary>
            <typeparam name="T">The return type of the Box response</typeparam>
            <param name="response">The response to parse</param>
            <param name="converter">The converter to use for the conversion</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Extensions.BoxResponseExtensions.BuildPagesCount``1(Box.V2.IBoxResponse{``0})">
            <summary>
            Attempt to extract the number of pages in a preview from the HTTP response headers. The response contains a "Link" 
            element in the header that includes a link to the last page of the preview. This method uses that information
            to extract the total number of pages
            </summary>
            <param name="response">The http response that includes total page information in its header</param>
            <returns>Total number of pages in the preview</returns>
        </member>
        <member name="M:Box.V2.Extensions.UriExtensions.AppendQueryString(System.Uri,System.String,System.String)">
            <summary>
            Appends the given key value pair to query string of the Uri.
            </summary>
            <param name="uri">Uri to append the query string value.</param>
            <param name="name">Name of the query string.</param>
            <param name="value">Value of the query string.</param>
            <returns>Url with the query string appended/updated.</returns>
        </member>
        <member name="T:Box.V2.IBoxClient">
            <summary>
            The central entrypoint for all SDK interaction. The BoxClient houses all of the API endpoints and are represented 
            as resource managers for each distinct endpoint
            </summary>
        </member>
        <member name="M:Box.V2.IBoxClient.AddResourcePlugin``1">
            <summary>
            Adds additional resource managers/endpoints to the BoxClient.
            This is meant to allow for the inclusion of beta APIs or unofficial endpoints
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Box.V2.IBoxClient.Config">
            <summary>
            The configuration parameters used by the Box Service
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.FilesManager">
            <summary>
            The manager that represents the files endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.FoldersManager">
            <summary>
            The manager that represents the folders endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.CommentsManager">
            <summary>
            The manager that represents the comments endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.CollaborationsManager">
            <summary>
            The manager that represents the collaboration endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.SearchManager">
            <summary>
            The manager that represents the search endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.EventsManager">
            <summary>
            The manager that represents the events endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.UsersManager">
            <summary>
            The manager that represents the users endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.GroupsManager">
            <summary>
            The manager that represents the groups endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.RetentionPoliciesManager">
            <summary>
            The manager that represents the retention policies endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.MetadataManager">
            <summary>
            The manager that represents the file and folder metadata endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.WebhooksManager">
            <summary>
            The manager that represents the webhooks V2 endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.RecentItemsManager">
            <summary>
            The manager that represents the recent items endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.TasksManager">
            <summary>
            The manager that represents the tasks endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.LegalHoldPoliciesManager">
            <summary>
            The manager that represents the legal hold policies endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.Auth">
            <summary>
            The Auth repository that holds the auth session
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.ResourcePlugins">
            <summary>
            Allows resource managers to be registered and retrieved as plugins
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.SharedItemsManager">
            <summary>
            The manager that represents the shared items endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.CollectionsManager">
            <summary>
            The manager that represents the collections endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.DevicePinManager">
            <summary>
            The manager that represents the device pin endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.WebLinksManager">
            <summary>
            The manager that represents the weblinks endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.CollaborationWhitelistManager">
            <summary>
            The manager that represents the collaboration whitelist endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.TermsOfServiceManager">
            <summary>
            The manager that represents the terms of service endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.MetadataCascadePolicyManager">
            <summary>
            The manager that represents the metadata cascade policy endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.StoragePoliciesManager">
            <summary>
            The manager that represents the storage policies endpoint
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.SignRequestsManager">
            <summary>
            The manager that represents sign requests endpoints.
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.FileRequestsManager">
            <summary>
            The manager that represents all of the file requests endpoints.
            </summary>
        </member>
        <member name="P:Box.V2.IBoxClient.BoxAIManager">
            <summary>
            The manager that represents all of the AI endpoints.
            </summary>
        </member>
        <member name="T:Box.V2.JWTAuth.BoxJWTAuth">
            <summary>
             Box’s new authentication model allows applications to authenticate directly to Box using a JSON Web Token (JWT) signed with an RSA key. This authentication method is meant for server-to-server applications and replaces the first leg of the standard 3-legged OAuth 2.0 process in which users grant an application authorization to access their Box account.
            </summary>
            <remarks>
             https://developer.box.com/en/guides/applications/custom-apps/
            </remarks>
        </member>
        <member name="M:Box.V2.JWTAuth.BoxJWTAuth.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService)">
            <summary>
            Constructor for JWT authentication
            </summary>
            <param name="boxConfig">Config contains information about client id, client secret, enterprise id, private key, private key password, public key id </param>
            <param name="boxService">Box service is used to perform GetToken requests</param>
        </member>
        <member name="M:Box.V2.JWTAuth.BoxJWTAuth.#ctor(Box.V2.Config.IBoxConfig)">
            <summary>
            Constructor for JWT authentication with default boxService
            </summary>
            <param name="boxConfig">Config contains information about client id, client secret, enterprise id, private key, private key password, public key id </param>
        </member>
        <member name="M:Box.V2.JWTAuth.BoxJWTAuth.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService,Box.V2.Utility.IRetryStrategy)">
             <summary>
             Constructor for JWT authentication with custom retry strategy
             </summary>
             <param name="boxConfig">Config contains information about client id, client secret, enterprise id, private key, private key password, public key id </param>
             <param name="boxService">Box service is used to perform GetToken requests</param>
             <param name="retryStrategy">Retry strategy used when retrying http request</param>
            
        </member>
        <member name="M:Box.V2.JWTAuth.BoxJWTAuth.AdminClient(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Create admin BoxClient using an admin access token
            </summary>
            <param name="adminToken">Admin access token</param>
            <param name="asUser">The user ID to set as the 'As-User' header parameter; used to make calls in the context of a user using an admin token</param>
            <param name="suppressNotifications">Whether or not to suppress both email and webhook notifications. Typically used for administrative API calls. Your application must have “Manage an Enterprise” scope, and the user making the API calls is a co-admin with the correct "Edit settings for your company" permission.</param>
            <returns>BoxClient that uses JWT authentication</returns>
        </member>
        <member name="M:Box.V2.JWTAuth.BoxJWTAuth.UserClient(System.String,System.String)">
            <summary>
            Create user BoxClient using a user access token
            </summary>
            <param name="userToken">User access token</param>
            <param name="userId">Id of the user</param>
            <returns>BoxClient that uses JWT authentication</returns>
        </member>
        <member name="M:Box.V2.JWTAuth.BoxJWTAuth.AdminTokenAsync">
            <summary>
            Get admin token by posting data to auth url
            </summary>
            <returns>Admin token</returns>
        </member>
        <member name="M:Box.V2.JWTAuth.BoxJWTAuth.UserTokenAsync(System.String)">
            <summary>
            Once you have created an App User or Managed User, you can request a User Access Token via the App Auth feature, which will return the OAuth 2.0 access token for the specified User.
            </summary>
            <param name="userId">Id of the user</param>
            <returns>User token</returns>
        </member>
        <member name="M:Box.V2.JWTAuth.BoxJWTAuth.Session(System.String)">
            <summary>
            Create OAuth session from token
            </summary>
            <param name="token">Access token created by method UserToken, or AdminToken</param>
            <returns>OAuth session</returns>
        </member>
        <member name="T:Box.V2.JWTAuth.JWTAuthRepository">
            <summary>
            JWT auth repository used by an AdminClient or UserClient
            </summary>
        </member>
        <member name="P:Box.V2.JWTAuth.JWTAuthRepository.Session">
            <summary>
            OAuth session
            </summary>
        </member>
        <member name="P:Box.V2.JWTAuth.JWTAuthRepository.BoxJWTAuth">
            <summary>
            Box Authentication using a JSON Web Token (JWT)
            </summary>
        </member>
        <member name="P:Box.V2.JWTAuth.JWTAuthRepository.UserId">
            <summary>
            Id of the user
            </summary>
        </member>
        <member name="E:Box.V2.JWTAuth.JWTAuthRepository.SessionAuthenticated">
            <summary>
            Event fired after authetication
            </summary>
        </member>
        <member name="E:Box.V2.JWTAuth.JWTAuthRepository.SessionInvalidated">
            <summary>
            Event fired when session is invalidated 
            </summary>
        </member>
        <member name="M:Box.V2.JWTAuth.JWTAuthRepository.#ctor(Box.V2.Auth.OAuthSession,Box.V2.JWTAuth.BoxJWTAuth,System.String)">
            <summary>
            Constructor JWT auth. repository
            </summary>
            <param name="session">OAuth session</param>
            <param name="boxJWTAuth">JWT authentication</param>
            <param name="userId">Id of the user</param>
        </member>
        <member name="M:Box.V2.JWTAuth.JWTAuthRepository.AuthenticateAsync(System.String)">
            <summary>
            Not used for this type of authentication
            </summary>
            <param name="authCode"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.JWTAuth.JWTAuthRepository.LogoutAsync">
            <summary>
            Not used for this type of authentication
            </summary>
            <returns></returns>
        </member>
        <member name="M:Box.V2.JWTAuth.JWTAuthRepository.RefreshAccessTokenAsync(System.String)">
            <summary>
            Retrieves a new access token using BoxJWTAuth 
            </summary>
            <param name="accessToken">This input is not used. Could be set to null</param>
            <returns>OAuth session</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxAIManager">
            <summary>
            The manager that represents all of the AI endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxAIManager.SendAIQuestionAsync(Box.V2.Models.BoxAIAskRequest)">
            <summary>
            Sends an AI request to supported LLMs and returns an answer specifically focused on the user's question given the provided context.
            </summary>
            <param name="aiAskRequest">AI ask request</param>
            <returns>Response for AI question</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxAIManager.SendAITextGenRequestAsync(Box.V2.Models.BoxAITextGenRequest)">
            <summary>
            Sends an AI request to supported LLMs and returns an answer specifically focused on the creation of new text.
            </summary>
            <param name="aiTextGenRequest">AI text gen request</param>
            <returns>Response for AI text gen request</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationsManager.AddCollaborationAsync(Box.V2.Models.BoxCollaborationRequest,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            Used to add a collaboration for a single user or a single group to a folder or file. 
            Either an email address, a user ID, or a group id can be used to create the collaboration. 
            If the collaboration is being created with a group, access to this endpoint is granted based on the group's invitability_level.
            </summary>
            <param name="collaborationRequest">BoxCollaborationRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="notify">Determines if the user, (or all the users in the group) should receive email notification of the collaboration.</param>
            <returns>The new collaboration object is returned. Errors may occur if the IDs are invalid or if the user does not have permissions to create a collaboration.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationsManager.EditCollaborationAsync(Box.V2.Models.BoxCollaborationRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to edit an existing collaboration. Descriptions of the various roles can be found here
            </summary>
            <param name="collaborationRequest">BoxCollaborationRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The updated collaboration object is returned. If the role is changed to owner, the collaboration is deleted with a new one created for the previous owner and a 204 is returned.
            Errors may occur if the IDs are invalid or if the user does not have permissions to edit the collaboration.
            </returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationsManager.RemoveCollaborationAsync(System.String)">
            <summary>
            Used to delete a single collaboration.
            </summary>
            <param name="id">Id of the collaboration to delete.</param>
            <returns>True is returned if the ID is valid, and the user has permissions to remove the collaboration.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationsManager.GetCollaborationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to get information about a single collaboration.
            </summary>
            <param name="id">Id of the collaboration object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The collaboration object is returned. Errors may occur if id is invalid, the collaboration has been rejected by the user, or if the user does not have permissions to see the collaboration.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationsManager.GetPendingCollaborationAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to retrieve all pending collaboration invites for this user (with user being determined by access token or As-User header value).
            </summary>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A collection of pending collaboration objects are returned. If the user has no pending collaborations, the collection will be empty.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationWhitelistManager.AddCollaborationWhitelistEntryAsync(System.String,System.String)">
            <summary>
            Used to whitelist a domain for a Box collaborator. You can specify the domain and direction of the whitelist. When whitelisted successfully, only users from the whitelisted
            domain can be invited as a collaborator. 
            </summary>
            <param name="domainToWhitelist">This is the domain to whitelist collaboration.</param>
            <param name="directionForWhitelist">Can be set to inbound, outbound, or both for the direction of the whitelist.</param>
            <returns>The whitelist entry if successfully created.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationWhitelistManager.GetCollaborationWhitelistEntryAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to get information about a single collaboration whitelist for domain.
            </summary>
            <param name="id">Id of the domain whitelist object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The domain collaboration whitelist object is returned. Errors may occur if id is invalid.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationWhitelistManager.GetAllCollaborationWhitelistEntriesAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Used to get information about all domain collaboration whitelists.
            </summary>
            <param name="marker">Position to return results from.</param>
            <param name="limit">Maximum number of entries to return. Default is 100.</param>
            <returns>The collection of domain collaboration whitelist objects is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationWhitelistManager.DeleteCollaborationWhitelistEntryAsync(System.String)">
            <summary>
            Used to delete a domain collaboration whitelists.
            </summary>
            <param name="id">The id of the collaboration whitelist to delete.</param>
            <returns>A boolean value indicating whether or not the collaboration whitelist was successfully deleted.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationWhitelistManager.AddCollaborationWhitelistExemptUserAsync(System.String)">
            <summary>
            Used to add a user to the exempt user list. Once on the exempt user list this user is whitelisted as a collaborator.
            </summary>
            <param name="userId">This is the Box User to add to the exempt list.</param>
            <returns>The specific exempt user or user on the collaborator whitelist.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationWhitelistManager.GetCollaborationWhitelistExemptUserAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to get information about a single collaboration whitelist for a user.
            </summary>
            <param name="id">Id of the collaboration whitelist exempt target object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The collaboration whitelist object for a user is returned. Errors may occur if id is invalid.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationWhitelistManager.GetAllCollaborationWhitelistExemptUsersAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Used to get information about all collaboration whitelists for users.
            </summary>
            <param name="marker">Position to return results from.</param>
            <param name="limit">Maximum number of entries to return. Default is 100.</param>
            <returns>The collection of collaboration whitelist object is returned for users.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollaborationWhitelistManager.DeleteCollaborationWhitelistExemptUserAsync(System.String)">
            <summary>
            Used to delete a user from the exemption list or collaboration whitelist.
            </summary>
            <param name="id">The id of the collaboration whitelist to delete for user.</param>
            <returns>A boolean value indicating whether or not the user was successfully deleted from the collaboration whitelist.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxCollectionsManager">
            <summary>
            Managing collections  
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxCollectionsManager.CreateOrDeleteCollectionsForFolderAsync(System.String,Box.V2.Models.BoxCollectionsRequest)">
            <summary>
            To add or remove an item from a collection, you do a PUT on that item and change the list of collections it belongs to.
            </summary>
            <param name="folderId">Id of the folder.</param>
            <param name="collectionsRequest">The request which contains collections ids</param>
            <returns>A full folder object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollectionsManager.CreateOrDeleteCollectionsForFileAsync(System.String,Box.V2.Models.BoxCollectionsRequest)">
            <summary>
            To add or remove an item from a collection, you do a PUT on that item and change the list of collections it belongs to.
            </summary>
            <param name="fileId">Id of the file.</param>
            <param name="collectionsRequest">The request which contains collections ids</param>
            <returns>A full file object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollectionsManager.GetCollectionsAsync">
            <summary>
            Retrieves the collections for the given user. Currently, only the favorites collection is supported.
            </summary>
            <returns>An array of collection instances</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCollectionsManager.GetCollectionItemsAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Retrieves the files and/or folders contained within this collection. Collection item lists behave a lot like getting a folder’s items.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <param name="limit">The maximum number of items to return in a page.</param>
            <param name="offset">The offset at which to begin the response. An offset of value of 0 will start at the beginning of the folder-listing. Offset of 2 would start at the 2nd record, not the second page. Note: If there are hidden items in your previous response, your next offset should be = offset + limit, not the # of records you received back.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns></returns>
        </member>
        <member name="T:Box.V2.Managers.BoxCommentsManager">
            <summary>
            The manager that represents all of the comment endpoints
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxCommentsManager.AddCommentAsync(Box.V2.Models.BoxCommentRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to add a comment by the user to a specific file, discussion, or comment (i.e. as a reply comment).
            </summary>
            <param name="commentRequest">BoxCommentRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The new comment object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCommentsManager.GetInformationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to retrieve the message and metadata about a specific comment. Information about the user who created the comment is also included.
            </summary>
            <param name="id">Id of the comment.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A full comment object is returned is the ID is valid and if the user has access to the comment.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCommentsManager.UpdateAsync(System.String,Box.V2.Models.BoxCommentRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to update the message of the comment.
            </summary>
            <param name="id">Id of the comment.</param>
            <param name="commentsRequest">BoxCommentsRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The full updated comment object is returned if the ID is valid and if the user has access to the comment.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxCommentsManager.DeleteAsync(System.String)">
            <summary>
            Permanently deletes a comment.
            </summary>
            <param name="id">Id of the comment.</param>
            <returns>True is returned to confirm deletion of the comment.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxDevicePinManager.GetEnterpriseDevicePinsAsync(System.String,System.String,System.Int32,Box.V2.Models.BoxSortDirection,System.Boolean)">
            <summary>
            Gets all the device pins within a given enterprise. Must be an enterprise admin with the manage enterprise scope to make this call.
            </summary>
            <param name="enterpriseId">Box enterprise id.</param>
            <param name="marker">Needs not be passed or can be empty for first invocation of the API. Use the one returned in response for each subsequent call.</param>
            <param name="limit">Default value is 100. Max value is 10000.</param>
            <param name="direction">Default is "asc". Valid values are asc, desc. Case in-sensitive, ASC/DESC works just fine.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns all the device pins within a given enterprise up to limit amount.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxDevicePinManager.GetDevicePin(System.String)">
            <summary>
            Gets information about an individual device pin.
            </summary>
            <param name="id">Device pin id.</param>
            <returns>Information about the device pin.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxDevicePinManager.DeleteDevicePin(System.String)">
            <summary>
            Delete individual device pin.
            </summary>
            <param name="id">Device pin id.</param>
            <returns>True if successfully deleted.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxEventsManager">
            <summary>
            The manager that represents the events endpoint
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxEventsManager.EnterpriseEventsAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Retrieves up to a year's events for all users in the enterprise. High latency. You must be using a token that is scoped to admin level in order to use this endpoint.
            </summary>
            <param name="limit">Limits the number of events returned (defaults to 500).</param>
            <param name="streamPosition">The starting position for fetching the events. This is used in combination with the limit to determine which events to return to the caller. Use the results from the next_stream_position of your last call to get the next set of events.</param>
            <param name="eventTypes">Events to filter by.</param>
            <param name="createdAfter">A lower bound on the timestamp of the events returned.</param>
            <param name="createdBefore">An upper bound on the timestamp of the events returned.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxEventsManager.UserEventsAsync(System.Int32,Box.V2.Models.UserEventsStreamType,System.String,System.Boolean)">
            <summary>
            Use this to get events for a given user.
            </summary>
            <param name="limit">Limits the number of events returned (defaults to 500).</param>
            <param name="streamType">Restricts the types of events returned: all returns all events; changes returns events that may cause file tree changes such as file updates or collaborations; sync returns events that may cause file tree changes only for synced folders.</param>
            <param name="streamPosition">The location in the event stream from which you want to start receiving events. You can specify the special value 'now' to get 0 events and the latest stream_position value. Defaults to 'now'.</param>
            <param name="dedupeEvents">Whether or not to automatically de-duplicate events as they are received. Defaults to true.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxEventsManager.LongPollUserEvents(System.String,System.Action{Box.V2.Models.BoxEventCollection{Box.V2.Models.BoxEnterpriseEvent}},System.Threading.CancellationToken,Box.V2.Models.UserEventsStreamType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Used to get real-time notification of activity in a Box account.
            </summary>
            <param name="streamPosition">The location in the event stream from which you want to start receiving events.</param>
            <param name="newEventsCallback">Method to invoke when new events are received.</param>
            <param name="cancellationToken">Used to request that the long polling process terminate.</param>
            <param name="streamType">Restricts the types of events returned: all returns all events; changes returns events that may cause file tree changes such as file updates or collaborations; sync returns events that may cause file tree changes only for synced folders.</param>
            <param name="dedupeEvents">Whether or not to automatically de-duplicate events as they are received. Defaults to true.</param>
            <param name="retryTimeoutOverride">Used to override the retry timeout value returned from the long polling OPTIONS request.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxEventsManager.EnterpriseEventsStreamingAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves up to a two weeks's events for all users in the enterprise. Low latency. You must be using a token that is scoped to admin level in order to use this endpoint.
            </summary>
            <param name="limit">Limits the number of events returned (defaults to 500).</param>
            <param name="streamPosition">The starting position for fetching the events. This is used in combination with the limit to determine which events to return to the caller. Use the results from the next_stream_position of your last call to get the next set of events.</param>
            <param name="eventTypes">Events to filter by.</param>
            <returns></returns>
        </member>
        <member name="T:Box.V2.Managers.BoxFileRequestsManager">
            <summary>
            The manager that represents all of the file requests endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxFileRequestsManager.GetFileRequestByIdAsync(System.String)">
            <summary>
            Retrieves the information about a file request by ID.
            </summary>
            <param name="fileRequestId">Id of the file request.</param>
            <returns>A full FileRequest object is returned if the id is valid and if the user has access to the file request.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFileRequestsManager.CopyFileRequestAsync(System.String,Box.V2.Models.Request.BoxFileRequestCopyRequest)">
            <summary>
            Copies an existing file request that is already present on one folder, and applies it to another folder.
            </summary>
            <param name="fileRequestId">Id of the file request.</param>
            <returns>A full FileRequest object is returned if the id is valid and if the user has access to the file request.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFileRequestsManager.UpdateFileRequestAsync(System.String,Box.V2.Models.Request.BoxFileRequestUpdateRequest)">
            <summary>
            Updates a file request. This can be used to activate or deactivate a file request.
            </summary>
            <param name="fileRequestId">Id of the file request.</param>
            <returns>A full FileRequest object is returned if the id is valid and if the user has access to the file request.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFileRequestsManager.DeleteFileRequestAsync(System.String)">
            <summary>
            Deletes a file request permanently.
            </summary>
            <param name="fileRequestId">Id of the file request.</param>
            <returns>True if successfully deleted.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxFilesManager">
            <summary>
            File objects represent that metadata about individual files in Box, with attributes describing who created the file, 
            when it was last modified, and other information. 
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetInformationAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Retrieves information about a file.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="sharedLink">The shared link for this file</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>A full file object is returned if the ID is valid and if the user has access to the file.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.DownloadAsync(System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Returns the stream of the requested file.
            </summary>
            <param name="id">Id of the file to download.</param>
            <param name="versionId">The ID specific version of this file to download.</param>
            <param name="timeout">Optional timeout for response.</param>
            <param name="startOffsetInBytes">Starting byte of the chunk to download.</param>
            <param name="endOffsetInBytes">Ending byte of the chunk to download.</param>
            <param name="sharedLink">The shared link for this file</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>Stream of the requested file.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetDownloadUriAsync(System.String,System.String)">
            <summary>
            Retrieves the temporary direct Uri to a file (valid for 15 minutes). This is typically used to send as a redirect to a browser to make the browser download the file directly from Box.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="versionId">Version of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.PreflightCheck(Box.V2.Models.BoxPreflightCheckRequest)">
            <summary>
            Verify that a file will be accepted by Box before you send all the bytes over the wire.
            </summary>
            <remarks>
            Preflight checks verify all permissions as if the file was actually uploaded including:
            Folder upload permission
            File name collisions
            file size caps
            folder and file name restrictions*
            folder and account storage quota
            </remarks>
            <param name="preflightCheckRequest">BoxPreflightCheckRequest object.</param>
            <returns>Returns a BoxPreflightCheck object if successful, otherwise an error is thrown when any of the preflight conditions are not met.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.PreflightCheckNewVersion(System.String,Box.V2.Models.BoxPreflightCheckRequest)">
            <summary>
            Verify that a new version of a file will be accepted by Box before you send all the bytes over the wire.
            </summary>
            <param name="fileId"></param>
            <param name="preflightCheckRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.UploadAsync(Box.V2.Models.BoxFileRequest,System.IO.Stream,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan},System.Byte[],System.Boolean,System.Uri)">
            <summary>
            Uploads a provided file to the target parent folder.
            If the file already exists, an error will be thrown.
            A proper timeout should be provided for large uploads.
            </summary>
            <param name="fileRequest">BoxFileRequest object.</param>
            <param name="stream">Stream of uploading file.</param>
            <param name="fields">Fields which shall be returned in result.</param>
            <param name="timeout">Timeout for response.</param>
            <param name="contentMD5">The SHA1 hash of the file.</param>
            <param name="setStreamPositionToZero">Set position for input stream to 0.</param>
            <param name="uploadUri">Uri to use for upload. Default upload endpoint URI is used if not specified.</param>
            <returns>A full file object is returned inside of a collection if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.CreateUploadSessionAsync(Box.V2.Models.BoxFileUploadSessionRequest)">
            <summary>
            Create an upload session for uploading a new file.
            </summary>
            <param name="uploadSessionRequest">The upload session request.</param>
            <returns>The upload session.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.CreateNewVersionUploadSessionAsync(System.String,Box.V2.Models.BoxFileUploadSessionRequest)">
            <summary>
            Create an upload session for uploading a new file version.
            </summary>
            <param name="fileId">The file id.</param>
            <param name="uploadNewVersionSessionRequest">The upload session request for new file version.</param>
            <returns>The upload session for uploading new Box file version using session.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.UploadNewVersionAsync(System.String,System.String,System.IO.Stream,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan},System.Byte[],System.Boolean,System.Uri,System.Nullable{System.DateTimeOffset})">
            <summary>
            This method is used to upload a new version of an existing file in a user’s account. Similar to regular file uploads, 
            these are performed as multipart form uploads. An optional If-Match header can be included to ensure that client only 
            overwrites the file if it knows about the latest version. The filename on Box will remain the same as the previous version.
            To update the file’s name, you can specify a new name for the file using the fileName parameter.
            A proper timeout should be provided for large uploads.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileId">Id of the file to upload a new version to.</param>
            <param name="stream">Stream of the uploading file.</param>
            <param name="etag">This ‘etag’ field of the file, which will be set in the If-Match header.</param>
            <param name="fields">Fields which shall be returned in result.</param>
            <param name="timeout">Optional timeout for response.</param>
            <param name="contentMD5">The SHA1 hash of the file.</param>
            <param name="setStreamPositionToZero">Set position for input stream to 0.</param>
            <param name="uploadUri">Optional url for uploading file.</param>
            <returns>A full file object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.UploadPartAsync(System.Uri,System.String,System.Int64,System.Int64,System.IO.Stream,System.Nullable{System.TimeSpan})">
            <summary>
            Upload a part of the file to the session.
            </summary>
            <param name="uploadPartUri">Upload Uri from Create Session which include SessionId</param>
            <param name="sha">The message digest of the part body, formatted as specified by RFC 3230.</param>
            <param name="partStartOffsetInBytes">Part begin offset in bytes.</param>
            <param name="sizeOfOriginalFileInBytes">Size of original file in bytes.</param>
            <param name="stream">The file part stream.</param>
            <param name="timeout">Timeout of the request.</param>
            <returns>The complete BoxUploadPartResponse object if success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.CommitSessionAsync(System.Uri,System.String,Box.V2.Models.BoxSessionParts)">
            <summary>
            Commits a session after all individual file part uploads are complete.
            </summary>
            <param name="commitSessionUrl">Commit URL returned in the Create Session response.</param>
            <param name="sha">The message digest of the complete file, formatted as specified by RFC 3230.</param>
            <param name="sessionPartsInfo">Parts info for the uploaded parts.</param>
            <returns> The complete BoxFile object. </returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.CommitFileVersionSessionAsync(System.Uri,System.String,Box.V2.Models.BoxSessionParts)">
            <summary>
            Commits a session after all individual new file version part uploads are complete.
            </summary>
            <param name="commitSessionUrl">Commit URL returned in the Create Session response.</param>
            <param name="sha">The message digest of the complete file, formatted as specified by RFC 3230.</param>
            <param name="sessionPartsInfo">Parts info for the uploaded parts.</param>
            <returns> The complete BoxFile object. </returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetSessionUploadedPartsAsync(System.Uri,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Get a list of parts that were uploaded in a session.
            </summary>
            <param name="sessionPartsUri">The Url returned in the Create Session response.</param>
            <param name="offset">Zero-based index of first OffsetID of part to return.</param>
            <param name="limit">How many parts to return.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all; defaults to false.</param>
            <returns>Returns a list of file part information uploaded so far in the session.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetSessionUploadStatusAsync(System.Uri)">
            <summary>
            Gets the status of the upload session.
            </summary>
            <param name="sessionUploadStatusUri">The Url returned in the Create Session response.</param>
            <returns>Returns an object representing the status of the upload session.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.UploadNewVersionUsingSessionAsync(System.IO.Stream,System.String,System.String,System.Nullable{System.TimeSpan},System.IProgress{Box.V2.Utility.BoxProgress})">
            <summary>
            Upload a new large file version by splitting them up and uploads in a session.
            </summary>
            <param name="stream">The file stream.</param>
            <param name="fileId">Id of the remote file.</param>
            <param name="timeout">Timeout for subsequent UploadPart requests.</param>
            <param name="progress">Will report progress from 1 - 100.</param>
            <returns>The BoxFile object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.UploadUsingSessionAsync(System.IO.Stream,System.String,System.String,System.Nullable{System.TimeSpan},System.IProgress{Box.V2.Utility.BoxProgress})">
            <summary>
            Upload a large file by splitting them up and uploads in a session.
            </summary>
            <param name="stream">The file stream.</param>
            <param name="fileName">Name of the remote file name.</param>
            <param name="folderId">Parent folder id.</param>
            <param name="timeout">Timeout for subsequent UploadPart requests.</param>
            <param name="progress">Will report progress from 1 - 100.</param>
            <returns>The complete BoxFile object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.UploadSessionAsync(System.IO.Stream,Box.V2.Models.BoxFileUploadSession,System.Nullable{System.TimeSpan},System.IProgress{Box.V2.Utility.BoxProgress},System.String)">
            <summary>
            Using the upload session for new file upload and new file version upload, 
            upload by parts file/file version
            </summary>
            <param name="stream">The file stream.</param>
            <param name="uploadSession">BoxFileUpload session retrieved for uploading new file or uploading new file version</param>
            <param name="progress">Will report progress from 1 - 100.</param>
            <param name="callingMethod"> The calling function name used to determine which commit function to call.</param>
            <returns>The complete BoxFile object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.ViewVersionsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            If there are previous versions of this file, this method can be used to retrieve metadata about the older versions.
            <remarks>Versions are only tracked for Box users with premium accounts.</remarks>
            </summary>
            <param name="id">The file id.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="offset">Zero-based index of first OffsetID of part to return.</param>
            <param name="limit">How many parts to return.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all; defaults to false.</param>
            <returns>A collection of versions other than the main version of the file. If a file has no other versions, an empty collection will be returned.
            Note that if a file has a total of three versions, only the first two version will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.UpdateInformationAsync(Box.V2.Models.BoxFileRequest,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to update individual or multiple fields in the file object, including renaming the file, changing it’s description, 
            and creating a shared link for the file. To move a file, change the ID of its parent folder. An optional etag
            can be included to ensure that client only updates the file if it knows about the latest version.
            </summary>
            <param name="fileRequest">BoxFileRequest object.</param>
            <param name="etag">This ‘etag’ field of the file, which will be set in the If-Match header.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The complete BoxFile object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.DeleteAsync(System.String,System.String)">
            <summary>
            Discards a file to the trash. The etag of the file can be included as an ‘If-Match’ header to prevent race conditions.
            <remarks>Depending on the enterprise settings for this user, the item will either be immediately and permanently deleted from Box or moved to the trash.</remarks>
            </summary>
            <param name="id">Id of the file.</param>
            <param name="etag">This ‘etag’ field of the file, which will be set in the If-Match header.</param>
            <returns>True if file is deleted, false otherwise.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.DeleteUploadSessionAsync(System.Uri)">
            <summary>
            Abort the upload session and discard all data uploaded. This cannot be reversed.
            </summary>
            <param name="abortUri">The upload session abort url that aborts the session.</param>
            <returns>True if deletion success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.CopyAsync(Box.V2.Models.BoxFileRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a copy of a file in another folder. The original version of the file will not be altered.
            </summary>
            <param name="fileRequest">BoxFileRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>
            A full file object is returned if the ID is valid and if the update is successful. 
            Errors can be thrown if the destination folder is invalid or if a file-name collision occurs. 
            </returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.CreateSharedLinkAsync(System.String,Box.V2.Models.BoxSharedLinkRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a shared link for a file.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="sharedLinkRequest">BoxSharedLinkRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A full file object containing the updated shared link is returned
            if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.DeleteSharedLinkAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to delete the shared link for a file.
            </summary>
            <param name="id">The Id of the file to remove the shared link from.</param>
            <returns>A full file object with the shared link removed is returned
            if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetCollaborationsCollectionAsync(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Use this to get a list of all the collaborations on a file
            </summary>
            <param name="id">Id of the file</param>
            <param name="marker">Paging marker; use null to retrieve the first page of results</param>
            <param name="limit">Number of records to return per page</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="autoPaginate">Whether to automatically gather the entire result set</param>
            <returns>Collection of the collaborations on a file</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetCommentsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves the comments on a particular file, if any exist.
            </summary>
            <param name="id">The Id of the item that the comments should be retrieved for.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A Collection of comment objects are returned. If there are no comments on the file, an empty comments array is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetThumbnailAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String)">
            <summary>
            Retrieves a thumbnail, or smaller image representation, of this file. Sizes of 32x32,
            64x64, 128x128, and 256x256 can be returned in the .png format
            and sizes of 32x32, 94x94, 160x160, and 320x320 can be returned in the .jpg format.
            Thumbnails can be generated for the image and video file formats listed here.
            see <a href="http://community.box.com/t5/Managing-Your-Content/What-file-types-are-supported-by-Box-s-Content-Preview/ta-p/327"/>
            </summary>
            <param name="id">Id of the file.</param>
            <param name="minHeight">The minimum height of the thumbnail.</param>
            <param name="minWidth">The minimum width of the thumbnail.</param>
            <param name="maxHeight">The maximum height of the thumbnail.</param>
            <param name="maxWidth">The maximum width of the thumbnail.</param>
            <param name="handleRetry">Specifies whether the method handles retries. If true, then the method would retry the call if the HTTP response is 'Accepted'. The delay for the retry is determined 
            by the RetryAfter header, or if that header is not set, by the constant DefaultRetryDelay.</param>
            <param name="throttle">Whether the requests will be throttled. Recommended to be left true to prevent spamming the server.</param>
            <param name="extension">png or jpg with no "."</param>
            <returns>Contents of thumbnail as Stream.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetPreviewLinkAsync(System.String)">
            <summary>
            Gets a preview link (URI) for a file that is valid for 60 seconds.
            </summary>
            <param name="id">Id of the file.</param>
            <returns>Preview link (URI) for a file that is valid for 60 seconds.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetTimeDelay(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
            Return the time to wait until retrying the call. If no RetryAfter value is specified in the header, use default value;
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetTrashedAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves an item that has been moved to the trash.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The full item will be returned, including information about when the it was moved to the trash.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.RestoreTrashedAsync(Box.V2.Models.BoxFileRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in before 
            it was moved to the trash. If that parent folder no longer exists or if there is now an item with the same name in that 
            parent folder, the new parent folder and/or new name will need to be included in the request.
            </summary>
            <param name="fileRequest">BoxFileRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The full item will be returned with a 201 Created status. By default it is restored to the parent folder it was in before it was trashed.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.PurgeTrashedAsync(System.String)">
            <summary>
            Permanently deletes an item that is in the trash. The item will no longer exist in Box. This action cannot be undone.
            </summary>
            <param name="id">Id of the file.</param>
            <returns>Returns true upon successful deletion, false otherwise.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetLockAsync(System.String)">
            <summary>
            Gets a lock file object representation of the lock on the provided file Id (if a lock exists, otherwise returns null).
            </summary>
            <param name="id">Id of the file.</param>
            <returns>BoxFileLock object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.UpdateLockAsync(Box.V2.Models.BoxFileLockRequest,System.String)">
            <summary>
            Used to update the lock information on the file (for example, ExpiresAt or IsDownloadPrevented.
            </summary>
            <param name="lockFileRequest">BoxFileLockRequest object.</param>
            <param name="id">Id of the file.</param>
            <returns>BoxFileLock object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.LockAsync(Box.V2.Models.BoxFileLockRequest,System.String)">
            <summary>
            Used to create a lock on the file.
            </summary>
            <param name="lockFileRequest">Request contains Lock object for setting of lock properties such as ExpiresAt - the time the lock expires, IsDownloadPrevented - whether or not the file can be downloaded while locked. </param>
            <param name="id">Id of the file.</param>
            <returns>Returns information about locked file</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.UnLock(System.String)">
            <summary>
            Remove a lock
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetFileTasks(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves all of the tasks for given file.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A collection of task objects is returned. If there are no tasks, an empty collection will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.GetWatermarkAsync(System.String)">
            <summary>
            Used to retrieve the watermark for a corresponding Box file.
            </summary>
            <param name="id">Id of the file.</param>
            <returns>An object containing information about the watermark associated for this file. If the file does not have a watermark applied to it than return null</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.ApplyWatermarkAsync(System.String,Box.V2.Models.BoxApplyWatermarkRequest)">
            <summary>
            Used to apply or update the watermark for a corresponding Box file.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="applyWatermarkRequest">BoxApplyWatermarkRequest object. Can be null, for using default values - imprint="default" </param>
            <returns>An object containing information about the watermark associated for this file.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.RemoveWatermarkAsync(System.String)">
            <summary>
            Used to remove the watermark for a corresponding Box file.
            </summary>
            <param name="id">Id of the file.</param>
            <returns>True to confirm the watermark has been removed. If the file did not have a watermark applied to it, than False will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.DeleteOldVersionAsync(System.String,System.String,System.String)">
            <summary>
            Discards a specific file version to the trash.
            </summary>
            <param name="id">Id of the file (Required).</param>
            <param name="versionId">Id of the version (Required).</param>
            <param name="etag">The etag of the file. This is in the ‘etag’ field of the file object.</param>
            <returns>True, if version is deleted.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFilesManager.PromoteVersionAsync(System.String,System.String)">
            <summary>
            If there are previous versions of this file, this method can be used to promote one of the older versions to the top of the stack. 
            This actually mints a copy of the old version and puts it on the top of the versions stack. 
            The file will have the exact same contents, the same SHA1/etag, and the same name as the promoted version. 
            Other properties such as comments do not get updated to their former values.
            </summary>
            <param name="id">Id of the file (Required).</param>
            <param name="versionId">Id of the version (Required).</param>
            <returns>The newly promoted file_version object is returned</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.BoxFilesManager.GetRepresentationsAsync(Box.V2.Models.BoxRepresentationRequest)" -->
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.BoxFilesManager.DownloadZip(Box.V2.Models.Request.BoxZipRequest,System.IO.Stream)" -->
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.BoxFilesManager.GetRepresentationContentAsync(Box.V2.Models.BoxRepresentationRequest,System.String)" -->
        <member name="M:Box.V2.Managers.BoxFoldersManager.GetFolderItemsAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Nullable{Box.V2.Models.BoxSortDirection},System.String,System.String)">
            <summary>
            Retrieves the files and/or folders contained within this folder without any other metadata about the folder.
            Uses offset-based pagination.
            Any attribute in the full files or folders objects can be passed in with the fields parameter to get specific attributes, 
            and only those specific attributes back; otherwise, the mini format is returned for each item by default.
            Multiple attributes can be passed in using the fields parameter. Paginated results can be 
            retrieved using the limit and offset parameters.
            </summary>
            <param name="id"></param>
            <param name="limit">The maximum number of items to return in a page. The default is 100 and the max is 1000.</param>
            <param name="offset">The offset at which to begin the response. An offset of value of 0 will start at the beginning of the folder-listing. 
            Note: If there are hidden items in your previous response, your next offset should be = offset + limit, not the # of records you received back. 
            The default is 0.</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <param name="sort">The field to sort items on</param>
            <param name="direction">The direction to sort results in: ascending or descending</param>
            <param name="sharedLink">The shared link for this folder</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>A collection of items contained in the folder is returned. An error is thrown if the folder does not exist, 
            or if any of the parameters are invalid. The total_count returned may not match the number of entries when using enterprise scope, 
            because external folders are hidden the list of entries.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.GetFolderItemsMarkerBasedAsync(System.String,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Nullable{Box.V2.Models.BoxSortDirection},System.String,System.String)">
            <summary>
            Retrieves the files and/or folders contained within this folder without any other metadata about the folder.
            Uses marker-based pagination.
            Any attribute in the full files or folders objects can be passed in with the fields parameter to get specific attributes, 
            and only those specific attributes back; otherwise, the mini format is returned for each item by default.
            Multiple attributes can be passed in using the fields parameter. Paginated results can be 
            retrieved using the limit and marker parameters.
            </summary>
            <param name="id"></param>
            <param name="limit">The maximum number of items to return in a page. The default is 100 and the max is 1000.</param>
            <param name="marker">Position to return results from..</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <param name="sort">The field to sort items on</param>
            <param name="direction">The direction to sort results in: ascending or descending</param>
            <param name="sharedLink">The shared link for this folder</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>A collection of items contained in the folder is returned. An error is thrown if the folder does not exist, 
            or if any of the parameters are invalid. The total_count returned may not match the number of entries when using enterprise scope, 
            because external folders are hidden the list of entries.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.CreateAsync(Box.V2.Models.BoxFolderRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a new empty folder. The new folder will be created inside of the specified parent folder.
            </summary>
            <param name="folderRequest">BoxFolderRequest object</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>A full folder object is returned if the parent folder ID is valid and if no name collisions occur.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.GetInformationAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Retrieves the full metadata about a folder, including information about when it was last updated 
            as well as the files and folders contained in it. To retrieve information about the root folder of a Box account use the id “0″.
            </summary>
            <param name="id">The folder id</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="sharedLink">The shared link for this folder</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>A full folder object is returned, including the most current information available about it.
            An exception is thrown if the folder does not exist or if the user does not have access to it.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.CopyAsync(Box.V2.Models.BoxFolderRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a copy of a folder in another folder. The original version of the folder will not be altered.
            </summary>
            <param name="folderRequest">BoxFolderRequest object</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>A full folder object is returned if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.DeleteAsync(System.String,System.Boolean,System.String)">
            <summary>
            Used to delete a folder. A recursive parameter must be included in order to delete folders that have items 
            inside of them. An optional If-Match header can be included using the etag parameter to ensure that client only deletes the folder 
            if it knows about the latest version.
            </summary>
            <param name="id">Id of the folder</param>
            <param name="recursive">Whether to delete this folder if it has items inside of it.</param>
            <param name="etag">This ‘etag’ field of the folder object to set in the If-Match header</param>
            <returns>True will be returned upon successful deletion</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.UpdateInformationAsync(Box.V2.Models.BoxFolderRequest,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Used to update information about the folder. To move a folder, update the ID of its parent. To enable an 
            email address that can be used to upload files to this folder, update the folder_upload_email attribute. 
            An optional If-Match header can be included using the etag parameter to ensure that client only updates the folder 
            if it knows about the latest version.
            </summary>
            <param name="folderRequest">BoxFolderRequest object</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="etag">This ‘etag’ field of the folder object to set in the If-Match header</param>
            <param name="timeout">Optional timeout for response.</param>
            <returns>The updated folder is returned if the name is valid. Errors generally occur only if there is a name collision.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.CreateSharedLinkAsync(System.String,Box.V2.Models.BoxSharedLinkRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a shared link for this particular folder. In order to get default shared link status, set it to an empty access level.
            To delete a shared link use the DeleteSharedLinkAsync method of this class.
            </summary>
            <param name="id">Id of the folder to create shared link for</param>
            <param name="sharedLinkRequest">Shared link request object</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>A full folder object is returned if the ID is valid and if the shared link is created.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.DeleteSharedLinkAsync(System.String)">
            <summary>
            Used to delete the shared link for the given folder id. 
            </summary>
            <returns>A full folder object is returned if the ID is valid and if the shared link is deleted.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.GetCollaborationsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Use this to get a list of all the collaborations on a folder i.e. all of the users that have access to that folder.
            </summary>
            <param name="id">Id of the folder</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>List of all the collaborations on a folder</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.GetTrashItemsAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Nullable{Box.V2.Models.BoxSortDirection})">
            <summary>
            Retrieves the files and/or folders that have been moved to the trash. Any attribute in the full files 
            or folders objects can be passed in with the fields parameter to get specific attributes, and only those 
            specific attributes back; otherwise, the mini format is returned for each item by default. Multiple 
            attributes can be passed in using the fields parameter. Paginated results can be 
            retrieved using the limit and offset parameters.
            </summary>
            <param name="limit">The maximum number of items to return</param>
            <param name="offset">The item at which to begin the response</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <param name="sort">The field to sort items on</param>
            <param name="direction">The direction to sort results in: ascending or descending</param>
            <returns>A collection of items contained in the trash is returned. An error is thrown if any of the parameters are invalid.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.RestoreTrashedFolderAsync(Box.V2.Models.BoxFolderRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in 
            before it was moved to the trash. If that parent folder no longer exists or if there is now an item with the same 
            name in that parent folder, the new parent folder and/or new name will need to be included in the request.
            </summary>
            <param name="folderRequest">BoxFolderRequest object (specify Parent.Id if you wish to restore to a different parent)</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>The full item will be returned if success. By default it is restored to the parent folder it was in before it was trashed.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.PurgeTrashedFolderAsync(System.String)">
            <summary>
            Permanently deletes a folder that is in the trash. The folder will no longer exist in Box. This action cannot be undone.
            </summary>
            <param name="id">Id of the folder</param>
            <returns>True will be returned upon successful deletion</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.GetTrashedFolderAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves a folder that has been moved to the trash.
            </summary>
            <param name="id">Id of the folder</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>The full folder will be returned, including information about when it was moved to the trash</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.GetWatermarkAsync(System.String)">
            <summary>
            Used to retrieve the watermark for a corresponding Box folder.
            </summary>
            <param name="id">Id of the folder.</param>
            <returns>An object containing information about the watermark associated for this folder. If the folder does not have a watermark applied to it than return null</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.ApplyWatermarkAsync(System.String,Box.V2.Models.BoxApplyWatermarkRequest)">
            <summary>
            Used to apply or update the watermark for a corresponding Box folder.
            </summary>
            <param name="id">Id of the folder.</param>
            <param name="applyWatermarkRequest">BoxApplyWatermarkRequest object. Can be null, for using default values - imprint="default" </param>
            <returns>An object containing information about the watermark associated for this folder.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.RemoveWatermarkAsync(System.String)">
            <summary>
            Used to remove the watermark for a corresponding Box folder.
            </summary>
            <param name="id">Id of the folder.</param>
            <returns>True to confirm the watermark has been removed. If the folder did not have a watermark applied to it, than False will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.CreateLockAsync(System.String)">
            <summary>
            Creates a folder lock on a folder, preventing it from being moved and/or deleted.
            </summary>
            <param name="id">Id of the folder to create a lock on</param>
            <returns>An object representing the lock on the folder</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.GetLocksAsync(System.String,System.Boolean)">
            <summary>
            Lists all folder locks for a given folder.
            </summary>
            <param name="id">Id of the folder</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all locks. Currently only one lock can exist per folder.; defaults to false.</param>
            <returns>A collection of locks on the folder</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxFoldersManager.DeleteLockAsync(System.String)">
            <summary>
            Delete a folder lock on a folder
            </summary>
            <param name="id">Id of the folder lock</param>
            <returns>True will be returned upon successful deletionr</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxGroupsManager">
            <summary>
            The class managing the Box API's Groups endpoint.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService,Box.V2.Converter.IBoxConverter,Box.V2.Auth.IAuthRepository,System.String,System.Nullable{System.Boolean})">
            <summary>
            Create a new Boxgroupmanager object.
            </summary>
            <param name="config"></param>
            <param name="service"></param>
            <param name="converter"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.GetAllGroupsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
            <summary>
            Retrieves all of the groups for given enterprise. Must have permissions to see an enterprise's groups.
            </summary>
            <param name="limit">The number of results to return with this request. Refer to the Box API for defaults.</param>
            <param name="offset">The offset of the results. Refer to the Box API for more details.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all groups; defaults to false.</param>
            <param name="filterTerm">Limits the results to only groups whose name starts with the search term.</param>
            <returns>A collection of groups.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.GetGroupAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the group with the specified id.
            </summary>
            <param name="id">The id of the group to return.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Group with id='id'.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.CreateAsync(Box.V2.Models.Request.BoxGroupRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new group.
            </summary>
            <param name="groupRequest">BoxGroupRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The newly created group.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.DeleteAsync(System.String)">
            <summary>
            Delete an existing group.
            </summary>
            <param name="id">The id of the group to delete.</param>
            <returns>True if delete was successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.UpdateAsync(System.String,Box.V2.Models.Request.BoxGroupRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Update an existing group.
            </summary>
            <param name="id">Id of the group to update.</param>
            <param name="groupRequest">BoxGroupRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The updated group.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.AddMemberToGroupAsync(Box.V2.Models.Request.BoxGroupMembershipRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a user to a group.
            </summary>
            <param name="membershipRequest">BoxGroupMembershipRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The group membership created.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.DeleteGroupMembershipAsync(System.String)">
            <summary>
            Delete a group membership.
            </summary>
            <param name="id">The id of the groupmembership to delete.</param>
            <returns>True if delete was successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.GetCollaborationsForGroupAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Retrieves all of the group collaborations for a given group. Note this is only available to group admins.
            </summary>
            <param name="groupId">The id of the group to get the list of collaborations for.</param>
            <param name="limit">The number of results to return with this request. Refer to the Box API for defaults.</param>
            <param name="offset">The offset of the results. Refer to the Box API for more details.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all group collaborations; defaults to false.</param>
            <returns>A collection of collaborations for the specified group id.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.GetAllGroupMembershipsForGroupAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Get the list of group memberships for a given group.
            </summary>
            <param name="groupId">The id of the group to get the list of memberships for.</param>
            <param name="limit">The number of results to return with this request. Refer to the Box API for defaults.</param>
            <param name="offset">The offset of the results. Refer to the Box API for more details.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all group memberships; defaults to false.</param>
            <returns>A collection of group memberships for the specified group id.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.GetAllGroupMembershipsForUserAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Get the list of group memberships for a given user.
            </summary>
            <param name="userId">The id of the user to get the list of memberships for.</param>
            <param name="limit">The number of results to return with this request. Refer to the Box API for defaults.</param>
            <param name="offset">The offset of the results. Refer to the Box API for more details.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all group memberships; defaults to false.</param>
            <returns>A collection of group memberships for the specified user id.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.GetGroupMembershipAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the group membership with the specified id.
            </summary>
            <param name="id">The id of the group membership to return.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Group membership with id='id'.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxGroupsManager.UpdateGroupMembershipAsync(System.String,Box.V2.Models.Request.BoxGroupMembershipRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the specified group membership with the specified request.
            </summary>
            <param name="membershipId">It of the group membership to update.</param>
            <param name="memRequest">BoxGroupMembershipRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The updated group membership.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxLegalHoldPoliciesManager">
            <summary>
            Allow create, update, get, delete legal hold and legal hold assignment.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService,Box.V2.Converter.IBoxConverter,Box.V2.Auth.IAuthRepository,System.String,System.Nullable{System.Boolean})">
            <summary>
            Create a new BoxLegalHoldPoliciesManager object.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.GetLegalHoldPolicyAsync(System.String)">
            <summary>
            Get details of a single Legal Hold Policy.
            </summary>
            <param name="legalHoldId">Id of the legal hold policy.</param>
            <returns>If the Id is valid, information about the Legal Hold Policy is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.GetListLegalHoldPoliciesAsync(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Get a list of Legal Hold Policies that belong to your Enterprise.
            </summary>
            <param name="policyName">Case insensitive prefix-match filter on Policy name.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns the list of Legal Hold Policies in your Enterprise that match the filter parameters (if passed in). By default, will only return only 'type', 'id', and 'policy_name', but you can specify more by using the 'fields' parameter.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.CreateLegalHoldPolicyAsync(Box.V2.Models.BoxLegalHoldPolicyRequest)">
            <summary>
            Create a new Legal Hold Policy. Optional date filter may be passed. 
            If Policy has a date filter, any Custodian assignments will apply only to file versions created or uploaded inside of the date range. 
            (Other assignment types, such as folders and files, will ignore the date filter).
            </summary>
            <param name="createRequest">BoxLegalHoldPolicyRequest object.</param>
            <returns>For a successful request, returns information about the Legal Hold Policy created. 
            If the Policy Name is in use for your enterprise, will return null.
            </returns>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.UpdateLegalHoldPolicyAsync(System.String,Box.V2.Models.BoxLegalHoldPolicyRequest)">
            <summary>
            Update existing Legal Hold Policy. Only name and description can be modified.
            </summary>
            <param name="legalHoldPolicyId">Id of the legal hold policy.</param>
            <param name="updateRequest">BoxLegalHoldPolicyRequest object.</param>
            <returns>Returns information about the Legal Hold Policy updated.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.DeleteLegalHoldPolicyAsync(System.String)">
            <summary>
            Sends request to delete an existing Legal Hold Policy. Note that this is an asynchronous process - the Policy will not be fully deleted yet when the response comes back.
            </summary>
            <param name="legalHoldPolicyId">Id of the legal hold policy.</param>
            <returns>Returns True if the request to delete the Policy was accepted.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.GetAssignmentAsync(System.String)">
            <summary>
            Get details of a single assignment.
            </summary>
            <param name="assignmentId">Id of the assignment.</param>
            <returns>If the assignmentId is valid, information about the Assignment is returned </returns>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.GetAssignmentsAsync(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Get assignments for a single policy.
            </summary>
            <param name="legalHoldPolicyId">ID of Policy to get Assignments for.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="assignToType">Filter assignments of this type only. Can be file_version, file, folder, or user.</param>
            <param name="assignToId">Filter assignments to this ID only. Note that this will only show assignments applied directly to this entity.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns the list of Assignments for the passed in Policy, as well as any optional filter parameters passed in. By default, will only return only type, and id, but you can specify more by using the fields parameter.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.CreateAssignmentAsync(Box.V2.Models.BoxLegalHoldPolicyAssignmentRequest)">
            <summary>
            Create a new Assignment, which will apply the Legal Hold Policy to the target of the Assignment.
            </summary>
            <param name="createRequest">BoxLegalHoldPolicyAssignmentRequest object.</param>
            <returns>For a successful request, returns object with information about the Assignment created. 
            If the policy or assign-to target cannot be found, null will be returned.
            </returns>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.DeleteAssignmentAsync(System.String)">
            <summary>
            Sends request to delete an existing Assignment.
            Note that this is an asynchronous process - the Assignment will not be fully deleted yet when the response comes back.
            </summary>
            <param name="assignmentId">ID of the legal holds assignment.</param>
            <returns>A successful request returns 204 No Content. If the Assignment is still initializing, will return a 409.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.GetFileVersionLegalHoldAsync(System.String)">
            <summary>
            Get details of a single File Version Legal Hold.
            </summary>
            <param name="fileVersionLegalHoldId">ID of the file version legal hold.</param>
            <returns>If the ID is valid, information about the Hold is returned with a 200.
            If the ID is for a non-existent Hold, a 404 is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxLegalHoldPoliciesManager.GetFileVersionLegalHoldsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean)">
            <summary>
            Get list of non-deleted Holds for a single Policy.
            </summary>
            <param name="policyId">ID of Legal Hold Policy to get File Version Legal Holds for.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns the list of File Version Legal Holds for the passed in Policy. 
            By default, will only return only "type", and "id", but you can specify more by using the "fields" parameter.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxMetadataCascadePolicyManager">
            <summary>
            The class managing the Box API's Metadata Cascade Policies endpoint.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataCascadePolicyManager.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService,Box.V2.Converter.IBoxConverter,Box.V2.Auth.IAuthRepository,System.String,System.Nullable{System.Boolean})">
            <summary>
            Create a new BoxMetadataCascadePolicy object.
            </summary>
            <param name="config"></param>
            <param name="service"></param>
            <param name="converter"></param>
            <param name="auth"></param>
            <param name="asUser"></param>
            <param name="suppressNotifications"></param>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataCascadePolicyManager.CreateCascadePolicyAsync(System.String,System.String,System.String)">
            <summary>
            Creates a metadata cascade policy on a folder and the sub folder items. 
            </summary>
            <param name="folderId">The id of the folder to assign the cascade policy to.</param>
            <param name="scope">The scope of the metadata cascade policy.</param>
            <param name="templateKey">The template key of the metadata cascade policy.</param>
            <returns>The metadata cascade policy if successfully created.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataCascadePolicyManager.GetCascadePolicyAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves a metadata cascade policy by policy Id. 
            </summary>
            <param name="policyId">The metadata cascade policy Id to retrieve.</param>
            <param name="fields">Optional fields to retrieve on metadata cascade policy.</param>
            <returns>The metadata cascade policy retrieved by Id.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataCascadePolicyManager.ForceApplyCascadePolicyAsync(System.String,System.String)">
            <summary>
            If a policy already exists on the specified folder, this will apply that new policy to the folder and the sub-folder items. 
            </summary>
            <param name="policyId">The policy Id to force apply.</param>
            <param name="conflictResolution">The desired behavior if a conflict exists. Set to either "none" or "overwrite".</param>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataCascadePolicyManager.DeleteCascadePolicyAsync(System.String)">
            <summary>
            Deletes a metadata cascade policy. 
            </summary>
            <param name="policyId">The id of the metadata cascade policy to delete.</param>
            <returns>True if metadata cascade policy was deleted successfully.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxMetadataManager">
            <summary>
            Metadata allows users and applications to define and store custom data associated with their files/folders
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.GetFileMetadataAsync(System.String,System.String,System.String)">
            <summary>
            Used to retrieve the metadata template instance for a corresponding Box file.
            </summary>
            <param name="fileId">Id of file</param>
            <param name="scope">Scope name. Currently, the only scopes supported are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.GetFolderMetadataAsync(System.String,System.String,System.String)">
            <summary>
            Used to retrieve the metadata template instance for a corresponding Box folder.
            </summary>
            <param name="folderId">Id of folder</param>
            <param name="scope">Scope name. Currently, only the enterprise scope is supported</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.CreateFileMetadataAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Used to create the metadata template instance for a corresponding Box file. When creating metadata, only values that adhere to the metadata template schema will be accepted.
            </summary>
            <param name="fileId">Id of file</param>
            <param name="metadata">Metadata to create</param>
            <param name="scope">Scope name. Currently, the only scopes support are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.CreateFolderMetadataAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Used to create the metadata template instance for a corresponding Box folder. When creating metadata, only values that adhere to the metadata template schema will be accepted.
            </summary>
            <param name="folderId">Id of folder</param>
            <param name="metadata">Metadata to create</param>
            <param name="scope">Scope name. Currently, only the enterprise scope is supported</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.UpdateFileMetadataAsync(System.String,System.Collections.Generic.List{Box.V2.Models.BoxMetadataUpdate},System.String,System.String)">
            <summary>
            Used to update the template instance. The request body must follow the JSON-Patch specification, which is represented as a JSON array of operation objects (see examples for more details). Updates can be either add, replace, remove , test, move, or copy. The template instance can only be updated if the template instance already exists. When editing metadata, only values that adhere to the metadata template schema will be accepted.  The update is applied atomically. If any errors occur during the application of the update operations, the metadata instance remains unchanged.
            </summary>
            <param name="fileId">Id of file</param>
            <param name="updates">Metadata updates to apply</param>
            <param name="scope">Scope name. Currently, the only scopes support are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.UpdateFolderMetadataAsync(System.String,System.Collections.Generic.List{Box.V2.Models.BoxMetadataUpdate},System.String,System.String)">
            <summary>
            Used to update the template instance. Updates can be either add, replace, remove , or test. The template instance can only be updated if the template instance already exists. When editing metadata, only values that adhere to the metadata template schema will be accepted.
            </summary>
            <param name="folderId">Id of folder</param>
            <param name="updates">Metadata updates to apply</param>
            <param name="scope">Scope name. Currently, only the enterprise scope is supported</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.SetFileMetadataAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Sets the provided metadata, overwriting any existing metadata on the file.
            </summary>
            <param name="fileId">The ID of the file to write metadata on.</param>
            <param name="metadata">The metadata key/value pairs to write.</param>
            <param name="scope">The scope of the metadata template to write to.</param>
            <param name="template">The key of the metadata template to write to.</param>
            <returns>The full metadata on the file, after writes are applied.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.SetFolderMetadataAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Sets the provided metadata, overwriting any existing metadata on the folder.
            </summary>
            <param name="folderId">The ID of the folder to write metadata on.</param>
            <param name="metadata">The metadata key/value pairs to write.</param>
            <param name="scope">The scope of the metadata template to write to.</param>
            <param name="template">The key of the metadata template to write to.</param>
            <returns>The full metadata on the folder, after writes are applied.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.DeleteFileMetadataAsync(System.String,System.String,System.String)">
            <summary>
            Used to delete the template instance. To delete custom key:value pairs within a template instance, you should refer to the updating metadata section.
            </summary>
            <param name="fileId">Id of file</param>
            <param name="scope">Scope name. Currently, the only scopes support are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.DeleteFolderMetadataAsync(System.String,System.String,System.String)">
            <summary>
            Used to delete the template instance. To delete custom key:value pairs within a template instance, you should refer to the updating metadata section.
            </summary>
            <param name="folderId">Id of folder</param>
            <param name="scope">Scope name. Currently, only the enterprise scope is supported</param>
            <param name="template">Metadata template name</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.GetMetadataTemplate(System.String,System.String)">
            <summary>
            Used to retrieve the schema for a given metadata template.
            </summary>
            <param name="scope">Scope name. Currently, the only scopes supported are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns>Returns the schema for the specified metadata template.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.CreateMetadataTemplate(Box.V2.Models.BoxMetadataTemplate)">
            <summary>
            Used to create a new metadata template with the specified schema.
            </summary>
            <param name="template">BoxMetadataTemplate object</param>
            <returns>The schema representing the metadata template created.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.DeleteMetadataTemplate(System.String,System.String)">
            <summary>
            Used to delete an existing metadata template with the specified schema.
            </summary>
            <param name="scope">Scope name. Currently, the only scopes supported are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns></returns>Returns boolean true if metadata schema was deleted successfully. 
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.UpdateMetadataTemplate(System.Collections.Generic.IEnumerable{Box.V2.Models.BoxMetadataTemplateUpdate},System.String,System.String)">
            <summary>
            Used to update the schema of an existing template.
            </summary>
            <param name="metadataTemplateUpdate">BoxMetadataTemplateUpdate object</param>
            <param name="scope">Scope name. Currently, the only scopes supported are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.GetMetadataTemplateById(System.String)">
            <summary>
            Used to retrieve the schema for a given metadata template by metadata template id.
            </summary>
            <param name="templateId">Metadata template id.</param>
            <returns>Returns the schema for the specified metadata template.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.GetAllFileMetadataTemplatesAsync(System.String)">
            <summary>
            Used to retrieve all metadata associated with a given file
            </summary>
            <param name="fileId">Id of file</param>
            <returns>Collection of metadata instances associated with the file.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.GetAllFolderMetadataTemplatesAsync(System.String)">
            <summary>
            Used to retrieve all metadata associated with a given folder
            </summary>
            <param name="folderId">Id of folder</param>
            <returns>Collection of metadata instances associated with the file.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.GetEnterpriseMetadataAsync(System.String)">
            <summary>
            Used to retrieve all metadata templates within a user's enterprise. Currently only the enterprise scope is supported.
            </summary>
            <param name="scope">Scope name. Currently, the only scopes support are enterprise and global</param>
            <returns>Collection of enterprise metadata instances associated with the file.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxMetadataManager.ExecuteMetadataQueryAsync(Box.V2.Models.Request.BoxMetadataQueryRequest)">
            <summary>
            Allows you to query by metadata on Box items with fields passed in
            </summary>
            <param name="queryRequest">Request object.</param>
            <returns>A collection of items and their associated metadata</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxRecentItemsManager">
            <summary>
            Returns information about files that have been accessed by a user not long ago.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxRecentItemsManager.GetRecentItemsAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns information about files that have been accessed by a user not long ago.
            </summary>
            <param name="limit">The default is 100 and the maximum is 1,000. Less than limit number of items may be returned (even when a user has more) in cases of deleted items or lost permission.</param>
            <param name="marker">The position marker at which to begin the response.</param>
            <param name="fields">Comma-separated list of fields to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>BoxRecentItem in collection.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxResourceManager">
            <summary>
            The base class for all of the Box resource managers
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxResourceManager.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService,Box.V2.Converter.IBoxConverter,Box.V2.Auth.IAuthRepository,System.String,System.Nullable{System.Boolean})">
            <summary>
            Instantiates the base class for the Box resource managers
            </summary>
            <param name="config"></param>
            <param name="service"></param>
            <param name="converter"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Box.V2.Managers.BoxResourceManager.RetryExpiredTokenRequest``1(Box.V2.IBoxRequest)">
            <summary>
            Retry the request once if the first try was due to an expired token
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxResourceManager.AutoPaginateLimitOffset``1(Box.V2.BoxRequest,System.Int32)">
            <summary>
            Used to fetch all results using pagination based on limit and offset
            </summary>
            <typeparam name="T">The type of BoxCollection item to expect.</typeparam>
            <param name="request">The pre-configured BoxRequest object.</param>
            <param name="limit">The limit specific to the endpoint.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxResourceManager.AutoPaginateMarker``1(Box.V2.BoxRequest,System.Int32)">
            <summary>
            Used to fetch all results using pagination based on next_marker
            </summary>
            <typeparam name="T">The type of BoxCollectionMarkerBased item to expect.</typeparam>
            <param name="request">The pre-configured BoxRequest object.</param>
            <param name="limit">The limit specific to the endpoint.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxResourceManager.AutoPaginateMarkerV2``1(Box.V2.BoxRequest,System.Int32)">
            <summary>
            Used to fetch all results using pagination based on next_marker, V2 is for sort order is an object.
            </summary>
            <typeparam name="T">The type of BoxCollectionMarkerBased item to expect.</typeparam>
            <param name="request">The pre-configured BoxRequest object.</param>
            <param name="limit">The limit specific to the endpoint.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxResourceManager.AutoPaginateMarkerMetadataQuery``1(Box.V2.BoxRequest)">
            <summary>
            Used to fetch all results using pagination for metadata queries
            </summary>
            <typeparam name="T">The type of BoxCollectionMarkerBased item to expect.</typeparam>
            <param name="request">The pre-configured BoxRequest object.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxResourceManager.AutoPaginateMarkerMetadataQueryV2``1(Box.V2.BoxRequest)">
            <summary>
            Used to fetch all results using pagination for metadata queries. V2 of this method expects a fields parameter to be passed in and returns a collection of BoxItem objects.
            </summary>
            <typeparam name="T">The type of BoxCollectionMarkerBased item to expect.</typeparam>
            <param name="request">The pre-configured BoxRequest object.</param>
            <returns></returns>
        </member>
        <member name="T:Box.V2.Managers.BoxRetentionPoliciesManager">
            <summary>
            The class managing the Box API's Retention Policies endpoint.
            Retention Management is a feature of the Box Governance package, which can be added on to any Business Plus or Enterprise account.
            To use this feature, you must have the manage retention policies scope enabled for your API key via your application management console.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxRetentionPoliciesManager.CreateRetentionPolicyAsync(Box.V2.Models.Request.BoxRetentionPolicyRequest)">
            <summary>
            Used to create a new retention policy.
            </summary>
            <param name="retentionPolicyRequest">BoxRetentionPolicyRequest object.</param>
            <returns>A new retention policy object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxRetentionPoliciesManager.GetRetentionPolicyAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to retrieve information about a retention policy.
            </summary>
            <param name="id">ID of the retention policy.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The specified retention policy will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxRetentionPoliciesManager.UpdateRetentionPolicyAsync(System.String,Box.V2.Models.Request.BoxRetentionPolicyRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to update a retention policy.
            </summary>
            <param name="id">ID of the retention policy.</param>
            <param name="retentionPolicyRequest">BoxRetentionPolicyRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>An updated retention policy object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxRetentionPoliciesManager.GetRetentionPoliciesAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean)">
            <summary>
            Retrieves all of the retention policies for the given enterprise.
            </summary>
            <param name="policyName">A name to filter the retention policies by. A trailing partial match search is performed.</param>
            <param name="policyType">A policy type to filter the retention policies by.</param>
            <param name="createdByUserId">A user id to filter the retention policies by.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns the list of all retention policies for the enterprise.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxRetentionPoliciesManager.GetRetentionPolicyAssignmentsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a list of all retention policy assignments associated with a specified retention policy.
            </summary>
            <param name="retentionPolicyId">ID of the retention policy.</param>
            <param name="type">The type of the retention policy assignment to retrieve. Can either be folder or enterprise.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns a list of the retention policy assignments associated with the specified retention policy.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxRetentionPoliciesManager.CreateRetentionPolicyAssignmentAsync(Box.V2.Models.Request.BoxRetentionPolicyAssignmentRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a retention policy assignment that associates a retention policy with either a folder or an enterprise
            </summary>
            <param name="policyAssignmentRequest"></param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A new retention policy assignment will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxRetentionPoliciesManager.GetRetentionPolicyAssignmentAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to retrieve information about a retention policy assignment.
            </summary>
            <param name="retentionPolicyAssignmentId">ID of the retention policy assignment.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The specified retention policy assignment will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxRetentionPoliciesManager.DeleteRetentionPolicyAssignmentAsync(System.String)">
            <summary>
            Used to delete a retention policy assignment.
            </summary>
            <param name="retentionPolicyAssignmentId">ID of the retention policy assignment.</param>
            <returns>True if the retention policy assignment was successfully deleted.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxRetentionPoliciesManager.GetFileVersionRetentionsAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{Box.V2.Models.DispositionAction})">
            <summary>
            Retrieves all file version retentions for the given enterprise.
            </summary>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <param name="fileId">Filters results by files with this ID.</param>
            <param name="fileVersionId">Filters results by file versions with this ID.</param>
            <param name="policyId">Filters results by the retention policy with this ID.</param>
            <param name="dispositionBefore">Filters results by files that will have their disposition come into effect before this date.</param>
            <param name="dispositionAfter">Filters results by files that will have their disposition come into effect after this date.</param>
            <param name="dispositionAction">Filters results by the retention policy with this disposition action.</param>
            <returns>The specified file version retention will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxRetentionPoliciesManager.GetFileVersionRetentionAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to retrieve information about a file version retention.
            </summary>
            <param name="fileVersionRetentionId">ID of the file version retention policy.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Returns the list of all file version retentions for the enterprise.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.BoxRetentionPoliciesManager.GetFilesUnderRetentionForAssignmentAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.BoxRetentionPoliciesManager.GetFileVersionsUnderRetentionForAssignmentAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean)" -->
        <member name="T:Box.V2.Managers.BoxSearchManager">
            <summary>
            The manager that represents the search endpoint
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxSearchManager.QueryAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Collections.Generic.List{Box.V2.Models.Request.BoxMetadataFilterRequest},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{Box.V2.Models.BoxSortDirection})">
            <summary>
            Search for items that are accessible by a single user or an entire enterprise.
            </summary>
            <param name="query">The string to search for. Box matches the search string against object names, descriptions, text contents of files, and other data.</param>
            <param name="scope">The scope for which you want to limit your search to. Can be user_content for a search limited to only the current user or enterprise_content for the entire enterprise. To enable the enterprise_content scope for an administrator, please contact Box.</param>
            <param name="fileExtensions">Limit searches to specific file extension(s).</param>
            <param name="createdAfter">The from date for when the item was created</param>
            <param name="createdBefore">The to date for when the item was created</param>
            <param name="updatedAfter">The from date for when the item was last updated</param>
            <param name="updatedBefore">The to date for when the item was last updated</param>
            <param name="sizeLowerBound">The lower bound of the file size range in bytes</param>
            <param name="sizeUpperBound">The upper bound of the file size range in bytes</param>
            <param name="ownerUserIds">Search by item owners</param>
            <param name="ancestorFolderIds">Limit searches to specific parent folders</param>
            <param name="contentTypes">Limit searches to specific Box designated content types. Can be name, description, file_content, comments, or tags.</param>
            <param name="type">The type you want to return in your search. Can be file, folder, or web_link</param>
            <param name="trashContent">Allows you to search within the trash. Can be trashed_only or non_trashed_only. Searches without this parameter default to non_trashed_only</param>
            <param name="mdFilters">Filters for a specific metadata template for files with metadata object associations. NOTE: For searches with the mdfilters param, a query string is not required. Currenly only one BoxMetadataFilterRequest element is allowed.</param>
            <param name="limit">Number of search results to return. The default is 30 and the maximum is 200.</param>
            <param name="offset">The search result at which to start the response. The default is 0.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="sort">The field to sort the search results by, e.g. "modified_at".</param>
            <param name="direction">The direction to return the results. "ASC" for ascending and "DESC" for descending.</param>
            <returns>A collection of search results is returned. If there are no matching search results, the collection will be empty.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxSearchManager.QueryAsyncWithSharedLinks(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Collections.Generic.List{Box.V2.Models.Request.BoxMetadataFilterRequest},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{Box.V2.Models.BoxSortDirection})">
            <summary>
            Search for items that are accessible by a single user or an entire enterprise.
            </summary>
            <param name="query">The string to search for. Box matches the search string against object names, descriptions, text contents of files, and other data.</param>
            <param name="scope">The scope for which you want to limit your search to. Can be user_content for a search limited to only the current user or enterprise_content for the entire enterprise. To enable the enterprise_content scope for an administrator, please contact Box.</param>
            <param name="fileExtensions">Limit searches to specific file extension(s).</param>
            <param name="createdAfter">The from date for when the item was created</param>
            <param name="createdBefore">The to date for when the item was created</param>
            <param name="updatedAfter">The from date for when the item was last updated</param>
            <param name="updatedBefore">The to date for when the item was last updated</param>
            <param name="sizeLowerBound">The lower bound of the file size range in bytes</param>
            <param name="sizeUpperBound">The upper bound of the file size range in bytes</param>
            <param name="ownerUserIds">Search by item owners</param>
            <param name="ancestorFolderIds">Limit searches to specific parent folders</param>
            <param name="contentTypes">Limit searches to specific Box designated content types. Can be name, description, file_content, comments, or tags.</param>
            <param name="type">The type you want to return in your search. Can be file, folder, or web_link</param>
            <param name="trashContent">Allows you to search within the trash. Can be trashed_only or non_trashed_only. Searches without this parameter default to non_trashed_only</param>
            <param name="mdFilters">Filters for a specific metadata template for files with metadata object associations. NOTE: For searches with the mdfilters param, a query string is not required. Currenly only one BoxMetadataFilterRequest element is allowed.</param>
            <param name="limit">Number of search results to return. The default is 30 and the maximum is 200.</param>
            <param name="offset">The search result at which to start the response. The default is 0.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="sort">The field to sort the search results by, e.g. "modified_at".</param>
            <param name="direction">The direction to return the results. "ASC" for ascending and "DESC" for descending.</param>
            <returns>A collection of search results is returned. If there are no matching search results, the collection will be empty.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxSharedItemsManager">
            <summary>
            Shared items are any files or folders that are represented by a shared link. 
            </summary>
            <seealso cref="T:Box.V2.Managers.BoxResourceManager" />
        </member>
        <member name="M:Box.V2.Managers.BoxSharedItemsManager.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService,Box.V2.Converter.IBoxConverter,Box.V2.Auth.IAuthRepository,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Box.V2.Managers.BoxSharedItemsManager"/> class.
            </summary>
            <param name="config">The config object to use</param>
            <param name="service">The Box service object</param>
            <param name="converter">The box converter object to use</param>
            <param name="auth">The auth repository object to use</param>
            <param name="asUser">The user ID to set as the 'As-User' header parameter; used to make calls in the context of a user using an admin token</param>
            <param name="suppressNotifications">Whether or not to suppress both email and webhook notifications. Typically used for administrative API calls. Your application must have “Manage an Enterprise” scope, and the user making the API calls is a co-admin with the correct "Edit settings for your company" permission.</param>
        </member>
        <member name="M:Box.V2.Managers.BoxSharedItemsManager.SharedItemsAsync(System.String,System.String)">
            <summary>
            Shared items are any files or folders that are represented by a shared link. Shared items are different from other API resources in that a shared resource doesn’t necessarily have to be in the account of the user accessing it. The actual shared link itself is used along with a normal access token.
            </summary>
            <param name="sharedLink">The shared link for this item.</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>A full file or folder object is returned if the shared link is valid and the user has access to it. An error may be returned if the link is invalid, if a password is required, or if the user does not have access to the file.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxSignRequestsManager">
            <summary>
            The manager that represents all of the sign requests endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxSignRequestsManager.GetSignRequestByIdAsync(System.String)">
            <summary>
            Retrieves information about a sign requests by ID.
            </summary>
            <param name="signRequestId">Id of the sign request.</param>
            <returns>A full SignRequest object is returned if the id is valid and if the user has access to the sign request.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxSignRequestsManager.GetSignRequestsAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Retrieves information about all sign requests.
            </summary>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="nextMarker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>A a collection of sign requests is returned if the id if the user has access.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxSignRequestsManager.CreateSignRequestAsync(Box.V2.Models.Request.BoxSignRequestCreateRequest)">
            <summary>
            Create a sign request object.
            </summary>
            <param name="signRequestCreateRequest">Sign request create request object in order to create a sign request object.</param>
            <returns>The sign request object that was successfully created.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxSignRequestsManager.CancelSignRequestAsync(System.String)">
            <summary>
            Cancels a sign request.
            </summary>
            <param name="signRequestId">Id of the sign request.</param>
            <returns>The sign request object that was successfully cancelled.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxSignRequestsManager.ResendSignRequestAsync(System.String)">
            <summary>
            Resends a sign request email to all outstanding signers.
            </summary>
            <param name="signRequestId">Id of the sign request.</param>
        </member>
        <member name="T:Box.V2.Managers.BoxSignTemplatesManager">
            <summary>
            The manager that represents all of the sign templates endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxSignTemplatesManager.GetSignTemplateByIdAsync(System.String)">
            <summary>
            Retrieves information about a sign template by ID.
            </summary>
            <param name="signTemplateId">Id of the sign template.</param>
            <returns>A full SignTemplate object is returned if the id is valid and if the user has access to the sign template.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxSignTemplatesManager.GetSignTemplatesAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Retrieves information about all sign templates.
            </summary>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="nextMarker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>A a collection of sign templates is returned if the id if the user has access.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxStoragePoliciesManager.#ctor(Box.V2.Config.IBoxConfig,Box.V2.Services.IBoxService,Box.V2.Converter.IBoxConverter,Box.V2.Auth.IAuthRepository,System.String,System.Nullable{System.Boolean})">
            <summary>
            Create a new BoxStoragePolicies object.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxStoragePoliciesManager.GetStoragePolicyAsync(System.String)">
            <summary>
            Get details of a single Box Storage Policy.
            </summary>
            <param name="policyId">Id of the Box Storage Policy to retrieve.</param>
            <returns>If the Id is valid, information about the Box Storage Policy is returned. </returns>
        </member>
        <member name="M:Box.V2.Managers.BoxStoragePoliciesManager.GetListStoragePoliciesAsync(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Get a list of Storage Policies that belong to your Enterprise.
            </summary>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="limit">Limit result size to this number. Defults to 100, maximum is 1,000.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns the list of Storage Policies in your Enterprise that match the filer parameters (if passedin).</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxStoragePoliciesManager.GetAssignmentAsync(System.String)">
            <summary>
            Get details of a single assignment.
            </summary>
            <param name="assignmentId">Id of the assignment.</param>
            <returns>If the assignmentId is valid, information about the assignment is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxStoragePoliciesManager.GetAssignmentForTargetAsync(System.String,System.String)">
            <summary>
            Get details of a Storage Policy Assignment for target entity.
            </summary>
            <param name="userId">User Id of the assignment.</param>
            <param name="entityType">Entity type of the storage policy assignment.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxStoragePoliciesManager.UpdateStoragePolicyAssignment(System.String,System.String)">
            <summary>
            Update the storage policy information for storage policy assignment.
            </summary>
            <param name="assignmentId">Storage Policy assignment Id to update.</param>
            <param name="policyId">"The Id of the Storage Policy to update to."</param>
            <returns></returns> The updated Storage Policy object with new assignment.
        </member>
        <member name="M:Box.V2.Managers.BoxStoragePoliciesManager.CreateAssignmentAsync(System.String,System.String)">
            <summary>
            Create a storage policy assignment to a Box User.
            </summary>
            <param name="userId">The user Id to create assignment for.</param>
            <param name="policyId">The Id of the storage policy to assign the user to.</param>
            <returns>The assignment object for the storage policy assignment to user.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxStoragePoliciesManager.DeleteAssignmentAsync(System.String)">
            <summary>
            Sends request to delete an existing assignment.
            </summary>
            <param name="assignmentId">Id of the storage policy assignment.</param>
            <returns>A successful request returns 204 No Content.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxStoragePoliciesManager.AssignAsync(System.String,System.String)">
            <summary>
            Checks if a storage policy assignment exists. If it does not then create an assignment. 
            </summary>
            <param name="userId">The id of the user to assign storage policy to.</param>
            <param name="storagePolicyId">The storage policy id to assign to user.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTasksManager.CreateTaskAssignmentAsync(Box.V2.Models.BoxTaskAssignmentRequest)">
            <summary>
            Used to assign a task to a single user. There can be multiple assignments on a given task.
            </summary>
            <param name="taskAssignmentRequest">BoxTaskAssignmentRequest object.</param>
            <returns>A new task assignment object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTasksManager.UpdateTaskAssignmentAsync(Box.V2.Models.BoxTaskAssignmentUpdateRequest)">
            <summary>
            Used to update a task assignment.
            </summary>
            <param name="taskAssignmentUpdateRequest">BoxTaskAssignmentUpdateRequest object.</param>
            <returns>A new task assignment object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTasksManager.GetTaskAssignmentAsync(System.String)">
            <summary>
            Fetches a specific task assignment.
            </summary>
            <param name="taskAssignmentId">Id of the task assignment.</param>
            <returns>The specified task assignment object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTasksManager.DeleteTaskAssignmentAsync(System.String)">
            <summary>
            Deletes a specific task assignment.
            </summary>
            <param name="taskAssignmentId">Id of the task assignment.</param>
            <returns>True will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTasksManager.CreateTaskAsync(Box.V2.Models.BoxTaskCreateRequest)">
            <summary>
            Used to create a single task for single user on a single file.
            </summary>
            <param name="taskCreateRequest">BoxTaskCreateRequest object.</param>
            <returns>A new task object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTasksManager.UpdateTaskAsync(Box.V2.Models.BoxTaskUpdateRequest)">
            <summary>
            Updates a specific task.
            </summary>
            <param name="taskUpdateRequest">BoxTaskUpdateRequest object.</param>
            <returns>The updated task object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTasksManager.DeleteTaskAsync(System.String)">
            <summary>
            Permanently deletes a specific task.
            </summary>
            <param name="taskId">Id of the task.</param>
            <returns>True will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTasksManager.GetTaskAsync(System.String)">
            <summary>
            Fetches a specific task.
            </summary>
            <param name="taskId">Id of the task.</param>
            <returns>The specified task object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTasksManager.GetAssignmentsAsync(System.String)">
            <summary>
            Retrieves all of the assignments for a given task.
            </summary>
            <param name="taskId">Id of the task.</param>
            <returns>A collection of task assignment mini objects will be returned upon success.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxTermsOfServiceManager">
            <summary>
            The manager that represents all of the terms of service endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxTermsOfServiceManager.GetTermsOfServicesByIdAsync(System.String)">
            <summary>
            Retrieves information about a terms of service by ID.
            </summary>
            <param name="tosId">Id of the terms of service.</param>
            <returns>A full terms of service object is returned if the id is valid and if the user has access to the terms of service.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTermsOfServiceManager.GetTermsOfServicesAsync(System.String)">
            <summary>
            Retrieves information about all terms of service
            </summary>
            <param name="tosType">The type of terms of service to be retrieved - managed or external.</param>
            <returns>A a collection of terms of service objects is returned if the id if the user has access.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTermsOfServiceManager.CreateTermsOfServicesAsync(Box.V2.Models.BoxTermsOfServicesRequest)">
            <summary>
            Create a terms of service object.
            </summary>
            <param name="termsOfServicesRequest">Terms of services request object in order to create a terms of service object.</param>
            <returns>The terms of service object that was successfully created.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTermsOfServiceManager.UpdateTermsOfServicesAsync(System.String,Box.V2.Models.BoxTermsOfServicesRequest)">
            <summary>
            Updates current information on a terms of service object.
            </summary>
            <param name="tosId">The terms of service id.</param>
            <param name="termsOfServicesRequest">The update session request for new terms of service.</param>
            <returns>The updated session information for terms of service object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTermsOfServiceManager.GetTermsOfServiceUserStatusesAsync(System.String,System.String)">
            <summary>
            Retrieves information on the user status of the terms of service.
            </summary>
            <param name="tosId">The terms of service id.</param>
            <param name="userId">The user id, if null this will default to current user.</param>
            <returns>The user status for terms of service objects.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTermsOfServiceManager.CreateBoxTermsOfServiceUserStatusesAsync(Box.V2.Models.Request.BoxTermsOfServiceUserStatusCreateRequest)">
            <summary>
            Create a terms of service status for user.
            </summary>
            <param name="termsOfServiceUserStatusCreateRequest">The request object for terms of service user status.</param>
            <returns>The status of the terms of service for a user.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxTermsOfServiceManager.UpdateTermsofServiceUserStatusesAsync(System.String,System.Boolean)">
            <summary>
            Updates information on a terms of service for a user.
            </summary>
            <param name="tosId">The terms of service id.</param>
            <param name="isAccepted">The current state of the terms of service.</param>
            <returns>The updated session information for a terms of service user status.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxUsersManager">
            <summary>
            The manager that represents all of the user endpoints
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.GetCurrentUserInformationAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves information about the user who is currently logged in i.e. the user for whom this auth token was generated.
            </summary>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Returns a single complete user object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.CreateEnterpriseUserAsync(Box.V2.Models.BoxUserRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to provision a new user in an enterprise. This method only works for enterprise admins.
            </summary>
            <param name="userRequest">BoxUserRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Returns the user object for the newly created user.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.UpdateUserInformationAsync(Box.V2.Models.BoxUserRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to edit the settings and information about a user. This method only works for enterprise admins. To roll a user out 
            of the enterprise (and convert them to a standalone free user), update the special enterprise attribute to be null.
            </summary>
            <param name="userRequest">BoxUserRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Returns the user object for the updated user. Errors may be thrown when the fields are invalid or this API call is made from a non-admin account.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.GetEnterpriseUsersAsync(System.String,System.UInt32,System.UInt32,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean)">
            <summary>
            Get information about users in an enterprise. This method only works for enterprise admins.
            </summary>
            <param name="filterTerm">Filter the results to only users starting with this value in either the name or the login.</param>
            <param name="offset">The record at which to start. (default: 0)</param>
            <param name="limit">The number of records to return. (min: 1; default: 100; max: 1000)</param>
            <param name="fields">The fields to populate for each returned user.</param>
            <param name="userType">The type of user to search for. Valid values are all, external or managed. If nothing is provided, the default behavior will be managed only</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all users; defaults to false.</param>
            <param name="externalAppUserId">The external app user id.</param>
            <returns>A BoxCollection of BoxUsers matching the provided filter criteria.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when limit outside the range 0&lt;limit&lt;=1000</exception>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.GetEnterpriseUsersWithMarkerAsync(System.String,System.String,System.UInt32,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Get information about users in an enterprise. This method only works for enterprise admins.
            </summary>
            <param name="filterTerm">Filter the results to only users starting with this value in either the name or the login.</param>
            <param name="marker">Position to return results from.</param>
            <param name="limit">The number of records to return. (min: 1; default: 100; max: 1000)</param>
            <param name="fields">The fields to populate for each returned user.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all users; defaults to false.</param>
            <param name="externalAppUserId">The external app user id.</param>
            <returns>A BoxCollection of BoxUsers matching the provided filter criteria.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when limit outside the range 0&lt;limit&lt;=1000</exception>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.DeleteEnterpriseUserAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes a user in an enterprise account.
            </summary>
            <param name="userId">Id of the user.</param>
            <param name="notify">Determines if the destination user should receive email notification of the transfer.</param>
            <param name="force">Whether or not the user should be deleted even if this user still own files.</param>
            <returns>Null, if user is deleted.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.InviteUserToEnterpriseAsync(Box.V2.Models.BoxUserInviteRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Invites an existing user to join an Enterprise. The existing user cannot be part of another Enterprise and must already have a Box account.
            Once invited, the user will receive an email and prompt to accept the invitation within the Box web application. 
            This method requires the "Manage An Enterprise" scope for the enterprise, which can be enabled within your developer console.
            </summary>
            <param name="userInviteRequest">BoxUserInviteRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A new invite object will be returned if successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.GetUserInviteAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns information about an existing user invitation.
            </summary>
            <param name="inviteId">The ID associated with the user invitiation.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The complete user invite information.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.ChangeUsersLoginAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to convert one of the user’s confirmed email aliases into the user’s primary login.
            </summary>
            <param name="userId">Id of the user.</param>
            <param name="login">The email alias to become the primary email.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>If the user_id is valid and the email address is a confirmed email alias, the updated user object will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.DeleteEmailAliasAsync(System.String,System.String)">
            <summary>
            Removes an email alias from a user.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="emailAliasId">The email alias identifier.</param>
            <returns>True, if the user has permission to remove this email alias.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.GetUserInformationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves information about a user in the enterprise with the specified fields. Requires enterprise administration authorization.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Returns the default representation of the user object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.GetEmailAliasesAsync(System.String)">
            <summary>
            Retrieves all email aliases for this user. The collection of email aliases does not include the primary login for the user.
            </summary>
            <param name="userId">The user ID (required).</param>
            <returns>If the userId is valid a collection of email aliases will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.AddEmailAliasAsync(System.String,System.String)">
            <summary>
            Adds a new email alias to the given user’s account.
            </summary>
            <param name="userId">The user ID (required).</param>
            <param name="email">The email address to add to the account as an alias (required).</param>
            <returns>Returns the newly created email_alias object. Errors will be thrown if the user_id is not valid or the particular user’s email alias cannot be modified.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.MoveUserFolderAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Moves all of the owned content from within one user’s folder into a new folder in another user’s account. 
            You can move folders across users as long as the you have administrative permissions and the ‘source’ user owns the folders. 
            To move everything from the root folder, use “0” which always represents the root folder of a Box account.
            </summary>
            <param name="userId">Id of the user.</param>
            <param name="ownedByUserId">The ID of the user who the folder will be transferred to.</param>
            <param name="folderId">Currently only moving of the root folder (0) is supported.</param>
            <param name="notify">Determines if the destination user should receive email notification of the transfer.</param>
            <param name="timeout">Optional timeout for response.</param>
            <returns>Returns the information for the newly created destination folder. An error is thrown if you do not have the necessary permissions to move the folder.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.GetMembershipsForUserAsync(System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Retrieves all of the group memberships for a given user. 
            Note this is only available to group admins. 
            To retrieve group memberships for the user making the API request, use the users/me/memberships endpoint.
            </summary>
            <param name="userId">Id of the user.</param>
            <param name="offset">The item at which to begin the response.</param>
            <param name="limit">Default is 100. Max is 1000.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all group memberships; defaults to false.</param>
            <returns>A collection of group membership objects will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.GetUserAvatar(System.String)">
            <summary>
            Retrieves a user's avatar image.
            </summary>
            <param name="userId">The Id of the user.</param>
            <returns>A stream of the bytes for the user's avatar image.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.AddOrUpdateUserAvatarAsync(System.String,System.IO.FileStream)">
            <summary>
            Adds or updates a user avatar. Supported formats are JPG, JPEG and PNG. Maximum allowed file size is 1MB and 1024x1024 pixels resolution.
            </summary>
            <param name="userId">The Id of the user.</param>
            <param name="stream">FileStream with avatar image.</param>
            <returns>Response containing avatar Urls.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.AddOrUpdateUserAvatarAsync(System.String,System.IO.Stream,System.String)">
            <summary>
            Adds or updates a user avatar. Supported formats are JPG, JPEG and PNG. Maximum allowed file size is 1MB and 1024x1024 pixels resolution.
            </summary>
            <param name="userId">The Id of the user.</param>
            <param name="stream">Stream with avatar image.</param>
            <param name="fileName">Filename of the avatar image.</param>
            <returns>Response containing avatar Urls.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxUsersManager.DeleteUserAvatarAsync(System.String)">
            <summary>
            Deletes a user's avatar image.
            </summary>
            <param name="userId">Removes an existing user avatar. You cannot reverse this operation.</param>
            <returns>True if deletion success.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxWebhooksManager">
            <summary>
            The manager that represents the webhooks V2 endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxWebhooksManager.CreateWebhookAsync(Box.V2.Models.BoxWebhookRequest)">
            <summary>
            Create a new webhook.
            </summary>
            <param name="webhookRequest">BoxWebhookRequest object.</param>
            <returns>Returns a webhook object if creation succeeds.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebhooksManager.GetWebhookAsync(System.String)">
            <summary>
            Get a webhook.
            </summary>
            <param name="id">Webhook id.</param>
            <returns>Returns a webhook object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebhooksManager.UpdateWebhookAsync(Box.V2.Models.BoxWebhookRequest)">
            <summary>
            Update a webhook.
            </summary>
            <param name="webhookRequest">BoxWebhookRequest object.</param>
            <returns>Returns the updated webhook object.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebhooksManager.DeleteWebhookAsync(System.String)">
            <summary>
            Delete a webhook.
            </summary>
            <param name="id">Webhook id.</param>
            <returns>Returns true if deleted successfully.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebhooksManager.GetWebhooksAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Fetch all defined webhooks for the requesting application and user.
            </summary>
            <param name="limit">Optional. Defaults to 100, max of 200.</param>
            <param name="nextMarker">Optional. Used to indicate starting point for next batch of webhooks.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns all defined webhooks for the requesting application and user, up to the limit.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebhooksManager.VerifyWebhook(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Used to validate an incoming webhook by computing cryptographic digests of the notification's payload and comparing them
            to the digests computed by Box and placed in the BOX-SIGNATURE-PRIMARY and BOX-SIGNATURE-SECONDARY request headers.
            
            For more information about validating webhooks see <a href="https://developer.box.com/en/guides/webhooks/handle/setup-signatures/"/>
            </summary>
            <param name="deliveryTimestamp">Value in BOX-DELIVERY-TIMESTAMP header.</param>
            <param name="signaturePrimary">Value in BOX-SIGNATURE-PRIMARY header.</param>
            <param name="signatureSecondary">Value in BOX-SIGNATURE-SECONDARY header.</param>
            <param name="payload">Body of the incoming webhook request.</param>
            <param name="primaryWebhookKey">Primary webhook signature key.</param>
            <param name="secondaryWebhookKey">Secondary webhook signature key.</param>
            <returns>Returns true if at least one of the two webhook signatures match the computed signature.</returns>
        </member>
        <member name="T:Box.V2.Managers.BoxWebLinksManager">
            <summary>
            Allow create, update, get, delete weblink for folder.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.BoxWebLinksManager.CreateWebLinkAsync(Box.V2.Models.BoxWebLinkRequest)">
            <summary>
            Creates a web link object within a given folder.
            </summary>
            <param name="createWebLinkRequest">BoxWebLinkRequest object</param>
            <returns>The web link object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebLinksManager.DeleteWebLinkAsync(System.String)">
            <summary>
            Deletes a web link and moves it to the trash.
            </summary>
            <param name="webLinkId">Id of the weblink.</param>
            <returns>True, if successfully deleted and moved to trash</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebLinksManager.GetWebLinkAsync(System.String)">
            <summary>
            Use to get information about the web link.
            </summary>
            <param name="webLinkId">Id of the weblink.</param>
            <returns>The web link object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebLinksManager.UpdateWebLinkAsync(System.String,Box.V2.Models.BoxWebLinkRequest)">
            <summary>
            Updates information for a web link.
            </summary>
            <param name="webLinkId">Id of the weblink.</param>
            <param name="updateWebLinkRequest">BoxWebLinkRequest object</param>
            <returns>An updated web link object if the update was successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebLinksManager.CopyAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a copy of a web link in another folder. The original version of the web link will not be altered.
            </summary>
            <param name="webLinkId">The Id of the web link to copy.</param>
            <param name="destinationFolderId">The Id of the destination folder, where the new copy will be created.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>
            A full web link object is returned if the ID is valid and if the update is successful. 
            Errors can be thrown if the destination folder is invalid or if a name collision occurs. 
            </returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebLinksManager.CreateSharedLinkAsync(System.String,Box.V2.Models.BoxSharedLinkRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a shared link for a web link.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="sharedLinkRequest">BoxSharedLinkRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A full web link object containing the updated shared link is returned
            if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.BoxWebLinksManager.DeleteSharedLinkAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to delete the shared link for this particular file.
            </summary>
            <param name="id">The id of the web link to remove the shared link from.</param>
            <returns>A full web link object with the shared link removed is returned
            if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxAIManager">
            <summary>
            The manager that represents all of the AI endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxAIManager.SendAIQuestionAsync(Box.V2.Models.BoxAIAskRequest)">
            <summary>
            Sends an AI request to supported LLMs and returns an answer specifically focused on the user's question given the provided context.
            </summary>
            <param name="aiAskRequest">AI ask request</param>
            <returns>Response for AI question</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.IBoxAIManager.SendAITextGenRequestAsync(Box.V2.Models.BoxAITextGenRequest)" -->
        <member name="M:Box.V2.Managers.IBoxCollaborationsManager.AddCollaborationAsync(Box.V2.Models.BoxCollaborationRequest,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            Used to add a collaboration for a single user or a single group to a folder or file. 
            Either an email address, a user ID, or a group id can be used to create the collaboration. 
            If the collaboration is being created with a group, access to this endpoint is granted based on the group's invitability_level.
            </summary>
            <param name="collaborationRequest">BoxCollaborationRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="notify">Determines if the user, (or all the users in the group) should receive email notification of the collaboration.</param>
            <returns>The new collaboration object is returned. Errors may occur if the IDs are invalid or if the user does not have permissions to create a collaboration.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationsManager.EditCollaborationAsync(Box.V2.Models.BoxCollaborationRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to edit an existing collaboration. Descriptions of the various roles can be found here
            </summary>
            <param name="collaborationRequest">BoxCollaborationRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The updated collaboration object is returned. If the role is changed to owner, the collaboration is deleted with a new one created for the previous owner and a 204 is returned.
            Errors may occur if the IDs are invalid or if the user does not have permissions to edit the collaboration.
            </returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationsManager.RemoveCollaborationAsync(System.String)">
            <summary>
            Used to delete a single collaboration.
            </summary>
            <param name="id">Id of the collaboration to delete.</param>
            <returns>True is returned if the ID is valid, and the user has permissions to remove the collaboration.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationsManager.GetCollaborationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to get information about a single collaboration.
            </summary>
            <param name="id">Id of the collaboration object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The collaboration object is returned. Errors may occur if id is invalid, the collaboration has been rejected by the user, or if the user does not have permissions to see the collaboration.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationsManager.GetPendingCollaborationAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to retrieve all pending collaboration invites for this user (with user being determined by access token or As-User header value).
            </summary>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A collection of pending collaboration objects are returned. If the user has no pending collaborations, the collection will be empty.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationWhitelistManager.AddCollaborationWhitelistEntryAsync(System.String,System.String)">
            <summary>
            Used to whitelist a domain for a Box collaborator. You can specify the domain and direction of the whitelist. When whitelisted successfully, only users from the whitelisted
            domain can be invited as a collaborator. 
            </summary>
            <param name="domainToWhitelist">This is the domain to whitelist collaboration.</param>
            <param name="directionForWhitelist">Can be set to inbound, outbound, or both for the direction of the whitelist.</param>
            <returns>The whitelist entry if successfully created.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationWhitelistManager.GetCollaborationWhitelistEntryAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to get information about a single collaboration whitelist for domain.
            </summary>
            <param name="id">Id of the domain whitelist object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The domain collaboration whitelist object is returned. Errors may occur if id is invalid.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationWhitelistManager.GetAllCollaborationWhitelistEntriesAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Used to get information about all domain collaboration whitelists.
            </summary>
            <param name="marker">Position to return results from.</param>
            <param name="limit">Maximum number of entries to return. Default is 100.</param>
            <returns>The collection of domain collaboration whitelist objects is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationWhitelistManager.DeleteCollaborationWhitelistEntryAsync(System.String)">
            <summary>
            Used to delete a domain collaboration whitelists.
            </summary>
            <param name="id">The id of the collaboration whitelist to delete.</param>
            <returns>A boolean value indicating whether or not the collaboration whitelist was successfully deleted.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationWhitelistManager.AddCollaborationWhitelistExemptUserAsync(System.String)">
            <summary>
            Used to add a user to the exempt user list. Once on the exempt user list this user is whitelisted as a collaborator.
            </summary>
            <param name="userId">This is the Box User to add to the exempt list.</param>
            <returns>The specific exempt user or user on the collaborator whitelist.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationWhitelistManager.GetCollaborationWhitelistExemptUserAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to get information about a single collaboration whitelist for a user.
            </summary>
            <param name="id">Id of the collaboration whitelist exempt target object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The collaboration whitelist object for a user is returned. Errors may occur if id is invalid.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationWhitelistManager.GetAllCollaborationWhitelistExemptUsersAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Used to get information about all collaboration whitelists for users.
            </summary>
            <param name="marker">Position to return results from.</param>
            <param name="limit">Maximum number of entries to return. Default is 100.</param>
            <returns>The collection of collaboration whitelist object is returned for users.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollaborationWhitelistManager.DeleteCollaborationWhitelistExemptUserAsync(System.String)">
            <summary>
            Used to delete a user from the exemption list or collaboration whitelist.
            </summary>
            <param name="id">The id of the collaboration whitelist to delete for user.</param>
            <returns>A boolean value indicating whether or not the user was successfully deleted from the collaboration whitelist.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxCollectionsManager">
            <summary>
            Managing collections  
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollectionsManager.CreateOrDeleteCollectionsForFolderAsync(System.String,Box.V2.Models.BoxCollectionsRequest)">
            <summary>
            To add or remove an item from a collection, you do a PUT on that item and change the list of collections it belongs to.
            </summary>
            <param name="folderId">Id of the folder.</param>
            <param name="collectionsRequest">The request which contains collections ids</param>
            <returns>A full folder object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollectionsManager.CreateOrDeleteCollectionsForFileAsync(System.String,Box.V2.Models.BoxCollectionsRequest)">
            <summary>
            To add or remove an item from a collection, you do a PUT on that item and change the list of collections it belongs to.
            </summary>
            <param name="fileId">Id of the file.</param>
            <param name="collectionsRequest">The request which contains collections ids</param>
            <returns>A full file object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollectionsManager.GetCollectionsAsync">
            <summary>
            Retrieves the collections for the given user. Currently, only the favorites collection is supported.
            </summary>
            <returns>An array of collection instances</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCollectionsManager.GetCollectionItemsAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Retrieves the files and/or folders contained within this collection. Collection item lists behave a lot like getting a folder’s items.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <param name="limit">The maximum number of items to return in a page.</param>
            <param name="offset">The offset at which to begin the response. An offset of value of 0 will start at the beginning of the folder-listing. Offset of 2 would start at the 2nd record, not the second page. Note: If there are hidden items in your previous response, your next offset should be = offset + limit, not the # of records you received back.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns></returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxCommentsManager">
            <summary>
            The manager that represents all of the comment endpoints
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxCommentsManager.AddCommentAsync(Box.V2.Models.BoxCommentRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to add a comment by the user to a specific file, discussion, or comment (i.e. as a reply comment).
            </summary>
            <param name="commentRequest">BoxCommentRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The new comment object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCommentsManager.GetInformationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to retrieve the message and metadata about a specific comment. Information about the user who created the comment is also included.
            </summary>
            <param name="id">Id of the comment.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A full comment object is returned is the ID is valid and if the user has access to the comment.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCommentsManager.UpdateAsync(System.String,Box.V2.Models.BoxCommentRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to update the message of the comment.
            </summary>
            <param name="id">Id of the comment.</param>
            <param name="commentsRequest">BoxCommentsRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The full updated comment object is returned if the ID is valid and if the user has access to the comment.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxCommentsManager.DeleteAsync(System.String)">
            <summary>
            Permanently deletes a comment.
            </summary>
            <param name="id">Id of the comment.</param>
            <returns>True is returned to confirm deletion of the comment.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxDevicePinManager.GetEnterpriseDevicePinsAsync(System.String,System.String,System.Int32,Box.V2.Models.BoxSortDirection,System.Boolean)">
            <summary>
            Gets all the device pins within a given enterprise. Must be an enterprise admin with the manage enterprise scope to make this call.
            </summary>
            <param name="enterpriseId">Box enterprise id.</param>
            <param name="marker">Needs not be passed or can be empty for first invocation of the API. Use the one returned in response for each subsequent call.</param>
            <param name="limit">Default value is 100. Max value is 10000.</param>
            <param name="direction">Default is "asc". Valid values are asc, desc. Case in-sensitive, ASC/DESC works just fine.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns all the device pins within a given enterprise up to limit amount.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxDevicePinManager.GetDevicePin(System.String)">
            <summary>
            Gets information about an individual device pin.
            </summary>
            <param name="id">Device pin id.</param>
            <returns>Information about the device pin.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxDevicePinManager.DeleteDevicePin(System.String)">
            <summary>
            Delete individual device pin.
            </summary>
            <param name="id">Device pin id.</param>
            <returns>True if successfully deleted.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxEventsManager">
            <summary>
            The manager that represents the events endpoint
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxEventsManager.EnterpriseEventsAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Retrieves up to a year's events for all users in the enterprise. High latency. You must be using a token that is scoped to admin level in order to use this endpoint.
            </summary>
            <param name="limit">Limits the number of events returned (defaults to 500).</param>
            <param name="streamPosition">The starting position for fetching the events. This is used in combination with the limit to determine which events to return to the caller. Use the results from the next_stream_position of your last call to get the next set of events.</param>
            <param name="eventTypes">Events to filter by.</param>
            <param name="createdAfter">A lower bound on the timestamp of the events returned.</param>
            <param name="createdBefore">An upper bound on the timestamp of the events returned.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxEventsManager.UserEventsAsync(System.Int32,Box.V2.Models.UserEventsStreamType,System.String,System.Boolean)">
            <summary>
            Use this to get events for a given user.
            </summary>
            <param name="limit">Limits the number of events returned (defaults to 500).</param>
            <param name="streamType">Restricts the types of events returned: all returns all events; changes returns events that may cause file tree changes such as file updates or collaborations; sync returns events that may cause file tree changes only for synced folders.</param>
            <param name="streamPosition">The location in the event stream from which you want to start receiving events. You can specify the special value 'now' to get 0 events and the latest stream_position value. Defaults to 'now'.</param>
            <param name="dedupeEvents">Whether or not to automatically de-duplicate events as they are received. Defaults to true.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxEventsManager.LongPollUserEvents(System.String,System.Action{Box.V2.Models.BoxEventCollection{Box.V2.Models.BoxEnterpriseEvent}},System.Threading.CancellationToken,Box.V2.Models.UserEventsStreamType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Used to get real-time notification of activity in a Box account.
            </summary>
            <param name="streamPosition">The location in the event stream from which you want to start receiving events.</param>
            <param name="newEventsCallback">Method to invoke when new events are received.</param>
            <param name="cancellationToken">Used to request that the long polling process terminate.</param>
            <param name="streamType">Restricts the types of events returned: all returns all events; changes returns events that may cause file tree changes such as file updates or collaborations; sync returns events that may cause file tree changes only for synced folders.</param>
            <param name="dedupeEvents">Whether or not to automatically de-duplicate events as they are received. Defaults to true.</param>
            <param name="retryTimeoutOverride">Used to override the retry timeout value returned from the long polling OPTIONS request.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxEventsManager.EnterpriseEventsStreamingAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves up to a two weeks's events for all users in the enterprise. Low latency. You must be using a token that is scoped to admin level in order to use this endpoint.
            </summary>
            <param name="limit">Limits the number of events returned (defaults to 500).</param>
            <param name="streamPosition">The starting position for fetching the events. This is used in combination with the limit to determine which events to return to the caller. Use the results from the next_stream_position of your last call to get the next set of events.</param>
            <param name="eventTypes">Events to filter by.</param>
            <returns></returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxFileRequestsManager">
            <summary>
            The manager that represents all of the file requests endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxFileRequestsManager.GetFileRequestByIdAsync(System.String)">
            <summary>
            Retrieves the information about a file request by ID.
            </summary>
            <param name="fileRequestId">Id of the file request.</param>
            <returns>A full FileRequest object is returned if the id is valid and if the user has access to the file request.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFileRequestsManager.CopyFileRequestAsync(System.String,Box.V2.Models.Request.BoxFileRequestCopyRequest)">
            <summary>
            Copies an existing file request that is already present on one folder, and applies it to another folder.
            </summary>
            <param name="fileRequestId">Id of the file request.</param>
            <returns>A full FileRequest object is returned if the id is valid and if the user has access to the file request.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFileRequestsManager.UpdateFileRequestAsync(System.String,Box.V2.Models.Request.BoxFileRequestUpdateRequest)">
            <summary>
            Updates a file request. This can be used to activate or deactivate a file request.
            </summary>
            <param name="fileRequestId">Id of the file request.</param>
            <returns>A full FileRequest object is returned if the id is valid and if the user has access to the file request.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFileRequestsManager.DeleteFileRequestAsync(System.String)">
            <summary>
            Deletes a file request permanently.
            </summary>
            <param name="fileRequestId">Id of the file request.</param>
            <returns>True if successfully deleted.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxFilesManager">
            <summary>
            File objects represent that metadata about individual files in Box, with attributes describing who created the file, 
            when it was last modified, and other information. 
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetInformationAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Retrieves information about a file.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="sharedLink">The shared link for this file</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>A full file object is returned if the ID is valid and if the user has access to the file.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.DownloadAsync(System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Returns the stream of the requested file.
            </summary>
            <param name="id">Id of the file to download.</param>
            <param name="versionId">The ID specific version of this file to download.</param>
            <param name="timeout">Optional timeout for response.</param>
            <param name="startOffsetInBytes">Starting byte of the chunk to download.</param>
            <param name="endOffsetInBytes">Ending byte of the chunk to download.</param>
            <param name="sharedLink">The shared link for this file</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>Stream of the requested file.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetDownloadUriAsync(System.String,System.String)">
            <summary>
            Retrieves the temporary direct Uri to a file (valid for 15 minutes). This is typically used to send as a redirect to a browser to make the browser download the file directly from Box.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="versionId">Version of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.PreflightCheck(Box.V2.Models.BoxPreflightCheckRequest)">
            <summary>
            Verify that a file will be accepted by Box before you send all the bytes over the wire.
            </summary>
            <remarks>
            Preflight checks verify all permissions as if the file was actually uploaded including:
            Folder upload permission
            File name collisions
            file size caps
            folder and file name restrictions*
            folder and account storage quota
            </remarks>
            <param name="preflightCheckRequest">BoxPreflightCheckRequest object.</param>
            <returns>Returns a BoxPreflightCheck object if successful, otherwise an error is thrown when any of the preflight conditions are not met.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.PreflightCheckNewVersion(System.String,Box.V2.Models.BoxPreflightCheckRequest)">
            <summary>
            Verify that a new version of a file will be accepted by Box before you send all the bytes over the wire.
            </summary>
            <param name="fileId"></param>
            <param name="preflightCheckRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.UploadAsync(Box.V2.Models.BoxFileRequest,System.IO.Stream,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan},System.Byte[],System.Boolean,System.Uri)">
            <summary>
            Uploads a provided file to the target parent folder.
            If the file already exists, an error will be thrown.
            A proper timeout should be provided for large uploads.
            </summary>
            <param name="fileRequest">BoxFileRequest object.</param>
            <param name="stream">Stream of uploading file.</param>
            <param name="fields">Fields which shall be returned in result.</param>
            <param name="timeout">Timeout for response.</param>
            <param name="contentMD5">The SHA1 hash of the file.</param>
            <param name="setStreamPositionToZero">Set position for input stream to 0.</param>
            <param name="uploadUri">Uri to use for upload. Default upload endpoint URI is used if not specified.</param>
            <returns>A full file object is returned inside of a collection if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.CreateUploadSessionAsync(Box.V2.Models.BoxFileUploadSessionRequest)">
            <summary>
            Create an upload session for uploading a new file.
            </summary>
            <param name="uploadSessionRequest">The upload session request.</param>
            <returns>The upload session.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.CreateNewVersionUploadSessionAsync(System.String,Box.V2.Models.BoxFileUploadSessionRequest)">
            <summary>
            Create an upload session for uploading a new file version.
            </summary>
            <param name="fileId">The file id.</param>
            <param name="uploadNewVersionSessionRequest">The upload session request for new file version.</param>
            <returns>The upload session for uploading new Box file version using session.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.UploadNewVersionAsync(System.String,System.String,System.IO.Stream,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan},System.Byte[],System.Boolean,System.Uri,System.Nullable{System.DateTimeOffset})">
            <summary>
            This method is used to upload a new version of an existing file in a user’s account. Similar to regular file uploads, 
            these are performed as multipart form uploads. An optional If-Match header can be included to ensure that client only 
            overwrites the file if it knows about the latest version. The filename on Box will remain the same as the previous version.
            To update the file’s name, you can specify a new name for the file using the fileName parameter.
            A proper timeout should be provided for large uploads.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileId">Id of the file to upload a new version to.</param>
            <param name="stream">Stream of the uploading file.</param>
            <param name="etag">This ‘etag’ field of the file, which will be set in the If-Match header.</param>
            <param name="fields">Fields which shall be returned in result.</param>
            <param name="timeout">Optional timeout for response.</param>
            <param name="contentMD5">The SHA1 hash of the file.</param>
            <param name="setStreamPositionToZero">Set position for input stream to 0.</param>
            <param name="uploadUri">Optional url for uploading file.</param>
            <returns>A full file object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.UploadPartAsync(System.Uri,System.String,System.Int64,System.Int64,System.IO.Stream,System.Nullable{System.TimeSpan})">
            <summary>
            Upload a part of the file to the session.
            </summary>
            <param name="uploadPartUri">Upload Uri from Create Session which include SessionId</param>
            <param name="sha">The message digest of the part body, formatted as specified by RFC 3230.</param>
            <param name="partStartOffsetInBytes">Part begin offset in bytes.</param>
            <param name="sizeOfOriginalFileInBytes">Size of original file in bytes.</param>
            <param name="stream">The file part stream.</param>
            <param name="timeout">Timeout of the request.</param>
            <returns>The complete BoxUploadPartResponse object if success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.CommitSessionAsync(System.Uri,System.String,Box.V2.Models.BoxSessionParts)">
            <summary>
            Commits a session after all individual file part uploads are complete.
            </summary>
            <param name="commitSessionUrl">Commit URL returned in the Create Session response.</param>
            <param name="sha">The message digest of the complete file, formatted as specified by RFC 3230.</param>
            <param name="sessionPartsInfo">Parts info for the uploaded parts.</param>
            <returns> The complete BoxFile object. </returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.CommitFileVersionSessionAsync(System.Uri,System.String,Box.V2.Models.BoxSessionParts)">
            <summary>
            Commits a session after all individual new file version part uploads are complete.
            </summary>
            <param name="commitSessionUrl">Commit URL returned in the Create Session response.</param>
            <param name="sha">The message digest of the complete file, formatted as specified by RFC 3230.</param>
            <param name="sessionPartsInfo">Parts info for the uploaded parts.</param>
            <returns> The complete BoxFile object. </returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetSessionUploadedPartsAsync(System.Uri,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Get a list of parts that were uploaded in a session.
            </summary>
            <param name="sessionPartsUri">The Url returned in the Create Session response.</param>
            <param name="offset">Zero-based index of first OffsetID of part to return.</param>
            <param name="limit">How many parts to return.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all; defaults to false.</param>
            <returns>Returns a list of file part information uploaded so far in the session.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetSessionUploadStatusAsync(System.Uri)">
            <summary>
            Gets the status of the upload session.
            </summary>
            <param name="sessionUploadStatusUri">The Url returned in the Create Session response.</param>
            <returns>Returns an object representing the status of the upload session.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.UploadNewVersionUsingSessionAsync(System.IO.Stream,System.String,System.String,System.Nullable{System.TimeSpan},System.IProgress{Box.V2.Utility.BoxProgress})">
            <summary>
            Upload a new large file version by splitting them up and uploads in a session.
            </summary>
            <param name="stream">The file stream.</param>
            <param name="fileId">Id of the remote file.</param>
            <param name="timeout">Timeout for subsequent UploadPart requests.</param>
            <param name="progress">Will report progress from 1 - 100.</param>
            <returns>The BoxFile object.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.UploadUsingSessionAsync(System.IO.Stream,System.String,System.String,System.Nullable{System.TimeSpan},System.IProgress{Box.V2.Utility.BoxProgress})">
            <summary>
            Upload a large file by splitting them up and uploads in a session.
            </summary>
            <param name="stream">The file stream.</param>
            <param name="fileName">Name of the remote file name.</param>
            <param name="folderId">Parent folder id.</param>
            <param name="timeout">Timeout for subsequent UploadPart requests.</param>
            <param name="progress">Will report progress from 1 - 100.</param>
            <returns>The complete BoxFile object.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.ViewVersionsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            If there are previous versions of this file, this method can be used to retrieve metadata about the older versions.
            <remarks>Versions are only tracked for Box users with premium accounts.</remarks>
            </summary>
            <param name="id">The file id.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="offset">Zero-based index of first OffsetID of part to return.</param>
            <param name="limit">How many parts to return.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all; defaults to false.</param>
            <returns>A collection of versions other than the main version of the file. If a file has no other versions, an empty collection will be returned.
            Note that if a file has a total of three versions, only the first two version will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.UpdateInformationAsync(Box.V2.Models.BoxFileRequest,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to update individual or multiple fields in the file object, including renaming the file, changing it’s description, 
            and creating a shared link for the file. To move a file, change the ID of its parent folder. An optional etag
            can be included to ensure that client only updates the file if it knows about the latest version.
            </summary>
            <param name="fileRequest">BoxFileRequest object.</param>
            <param name="etag">This ‘etag’ field of the file, which will be set in the If-Match header.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The complete BoxFile object.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.DeleteAsync(System.String,System.String)">
            <summary>
            Discards a file to the trash. The etag of the file can be included as an ‘If-Match’ header to prevent race conditions.
            <remarks>Depending on the enterprise settings for this user, the item will either be immediately and permanently deleted from Box or moved to the trash.</remarks>
            </summary>
            <param name="id">Id of the file.</param>
            <param name="etag">This ‘etag’ field of the file, which will be set in the If-Match header.</param>
            <returns>True if file is deleted, false otherwise.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.DeleteUploadSessionAsync(System.Uri)">
            <summary>
            Abort the upload session and discard all data uploaded. This cannot be reversed.
            </summary>
            <param name="abortUri">The upload session abort url that aborts the session.</param>
            <returns>True if deletion success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.CopyAsync(Box.V2.Models.BoxFileRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a copy of a file in another folder. The original version of the file will not be altered.
            </summary>
            <param name="fileRequest">BoxFileRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>
            A full file object is returned if the ID is valid and if the update is successful. 
            Errors can be thrown if the destination folder is invalid or if a file-name collision occurs. 
            </returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.CreateSharedLinkAsync(System.String,Box.V2.Models.BoxSharedLinkRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a shared link for a file.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="sharedLinkRequest">BoxSharedLinkRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A full file object containing the updated shared link is returned
            if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.DeleteSharedLinkAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to delete the shared link for a file.
            </summary>
            <param name="id">The Id of the file to remove the shared link from.</param>
            <returns>A full file object with the shared link removed is returned
            if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetCollaborationsCollectionAsync(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Use this to get a list of all the collaborations on a file
            </summary>
            <param name="id">Id of the file</param>
            <param name="marker">Paging marker; use null to retrieve the first page of results</param>
            <param name="limit">Number of records to return per page</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="autoPaginate">Whether to automatically gather the entire result set</param>
            <returns>Collection of the collaborations on a file</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetCommentsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves the comments on a particular file, if any exist.
            </summary>
            <param name="id">The Id of the item that the comments should be retrieved for.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A Collection of comment objects are returned. If there are no comments on the file, an empty comments array is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetThumbnailAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String)">
            <summary>
            Retrieves a thumbnail, or smaller image representation, of this file. Sizes of 32x32,
            64x64, 128x128, and 256x256 can be returned in the .png format
            and sizes of 32x32, 94x94, 160x160, and 320x320 can be returned in the .jpg format.
            Thumbnails can be generated for the image and video file formats listed here.
            see <a href="http://community.box.com/t5/Managing-Your-Content/What-file-types-are-supported-by-Box-s-Content-Preview/ta-p/327"/>
            </summary>
            <param name="id">Id of the file.</param>
            <param name="minHeight">The minimum height of the thumbnail.</param>
            <param name="minWidth">The minimum width of the thumbnail.</param>
            <param name="maxHeight">The maximum height of the thumbnail.</param>
            <param name="maxWidth">The maximum width of the thumbnail.</param>
            <param name="handleRetry">Specifies whether the method handles retries. If true, then the method would retry the call if the HTTP response is 'Accepted'. The delay for the retry is determined 
            by the RetryAfter header, or if that header is not set, by the constant DefaultRetryDelay.</param>
            <param name="throttle">Whether the requests will be throttled. Recommended to be left true to prevent spamming the server.</param>
            <param name="extension">png or jpg with no "."</param>
            <returns>Contents of thumbnail as Stream.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetPreviewLinkAsync(System.String)">
            <summary>
            Gets a preview link (URI) for a file that is valid for 60 seconds.
            </summary>
            <param name="id">Id of the file.</param>
            <returns>Preview link (URI) for a file that is valid for 60 seconds.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetTrashedAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves an item that has been moved to the trash.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The full item will be returned, including information about when the it was moved to the trash.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.RestoreTrashedAsync(Box.V2.Models.BoxFileRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in before 
            it was moved to the trash. If that parent folder no longer exists or if there is now an item with the same name in that 
            parent folder, the new parent folder and/or new name will need to be included in the request.
            </summary>
            <param name="fileRequest">BoxFileRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The full item will be returned with a 201 Created status. By default it is restored to the parent folder it was in before it was trashed.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.PurgeTrashedAsync(System.String)">
            <summary>
            Permanently deletes an item that is in the trash. The item will no longer exist in Box. This action cannot be undone.
            </summary>
            <param name="id">Id of the file.</param>
            <returns>Returns true upon successful deletion, false otherwise.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetLockAsync(System.String)">
            <summary>
            Gets a lock file object representation of the lock on the provided file Id (if a lock exists, otherwise returns null).
            </summary>
            <param name="id">Id of the file.</param>
            <returns>BoxFileLock object.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.UpdateLockAsync(Box.V2.Models.BoxFileLockRequest,System.String)">
            <summary>
            Used to update the lock information on the file (for example, ExpiresAt or IsDownloadPrevented.
            </summary>
            <param name="lockFileRequest">BoxFileLockRequest object.</param>
            <param name="id">Id of the file.</param>
            <returns>BoxFileLock object.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.LockAsync(Box.V2.Models.BoxFileLockRequest,System.String)">
            <summary>
            Used to create a lock on the file.
            </summary>
            <param name="lockFileRequest">Request contains Lock object for setting of lock properties such as ExpiresAt - the time the lock expires, IsDownloadPrevented - whether or not the file can be downloaded while locked. </param>
            <param name="id">Id of the file.</param>
            <returns>Returns information about locked file</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.UnLock(System.String)">
            <summary>
            Remove a lock
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetFileTasks(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves all of the tasks for given file.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A collection of task objects is returned. If there are no tasks, an empty collection will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.GetWatermarkAsync(System.String)">
            <summary>
            Used to retrieve the watermark for a corresponding Box file.
            </summary>
            <param name="id">Id of the file.</param>
            <returns>An object containing information about the watermark associated for this file. If the file does not have a watermark applied to it than return null</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.ApplyWatermarkAsync(System.String,Box.V2.Models.BoxApplyWatermarkRequest)">
            <summary>
            Used to apply or update the watermark for a corresponding Box file.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="applyWatermarkRequest">BoxApplyWatermarkRequest object. Can be null, for using default values - imprint="default" </param>
            <returns>An object containing information about the watermark associated for this file.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.RemoveWatermarkAsync(System.String)">
            <summary>
            Used to remove the watermark for a corresponding Box file.
            </summary>
            <param name="id">Id of the file.</param>
            <returns>True to confirm the watermark has been removed. If the file did not have a watermark applied to it, than False will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.DeleteOldVersionAsync(System.String,System.String,System.String)">
            <summary>
            Discards a specific file version to the trash.
            </summary>
            <param name="id">Id of the file (Required).</param>
            <param name="versionId">Id of the version (Required).</param>
            <param name="etag">The etag of the file. This is in the ‘etag’ field of the file object.</param>
            <returns>True, if version is deleted.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFilesManager.PromoteVersionAsync(System.String,System.String)">
            <summary>
            If there are previous versions of this file, this method can be used to promote one of the older versions to the top of the stack. 
            This actually mints a copy of the old version and puts it on the top of the versions stack. 
            The file will have the exact same contents, the same SHA1/etag, and the same name as the promoted version. 
            Other properties such as comments do not get updated to their former values.
            </summary>
            <param name="id">Id of the file (Required).</param>
            <param name="versionId">Id of the version (Required).</param>
            <returns>The newly promoted file_version object is returned</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.IBoxFilesManager.GetRepresentationsAsync(Box.V2.Models.BoxRepresentationRequest)" -->
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.IBoxFilesManager.GetRepresentationContentAsync(Box.V2.Models.BoxRepresentationRequest,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.IBoxFilesManager.DownloadZip(Box.V2.Models.Request.BoxZipRequest,System.IO.Stream)" -->
        <member name="M:Box.V2.Managers.IBoxFoldersManager.GetFolderItemsAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Nullable{Box.V2.Models.BoxSortDirection},System.String,System.String)">
            <summary>
            Retrieves the files and/or folders contained within this folder without any other metadata about the folder. 
            Any attribute in the full files or folders objects can be passed in with the fields parameter to get specific attributes, 
            and only those specific attributes back; otherwise, the mini format is returned for each item by default.
            Multiple attributes can be passed in using the fields parameter. Paginated results can be 
            retrieved using the limit and offset parameters.
            </summary>
            <param name="id"></param>
            <param name="limit">The maximum number of items to return in a page. The default is 100 and the max is 1000.</param>
            <param name="offset">The offset at which to begin the response. An offset of value of 0 will start at the beginning of the folder-listing. 
            Note: If there are hidden items in your previous response, your next offset should be = offset + limit, not the # of records you received back. 
            The default is 0.</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <param name="sort">The field to sort items on</param>
            <param name="direction">The direction to sort results in: ascending or descending</param>
            <param name="sharedLink">The shared link for this folder</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>A collection of items contained in the folder is returned. An error is thrown if the folder does not exist, 
            or if any of the parameters are invalid. The total_count returned may not match the number of entries when using enterprise scope, 
            because external folders are hidden the list of entries.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.GetFolderItemsMarkerBasedAsync(System.String,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Nullable{Box.V2.Models.BoxSortDirection},System.String,System.String)">
            <summary>
            Retrieves the files and/or folders contained within this folder without any other metadata about the folder.
            Uses marker-based pagination.
            Any attribute in the full files or folders objects can be passed in with the fields parameter to get specific attributes, 
            and only those specific attributes back; otherwise, the mini format is returned for each item by default.
            Multiple attributes can be passed in using the fields parameter. Paginated results can be 
            retrieved using the limit and marker parameters.
            </summary>
            <param name="id"></param>
            <param name="limit">The maximum number of items to return in a page. The default is 100 and the max is 1000.</param>
            <param name="marker">Position to return results from..</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <param name="sort">The field to sort items on</param>
            <param name="direction">The direction to sort results in: ascending or descending</param>
            <param name="sharedLink">The shared link for this folder</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>A collection of items contained in the folder is returned. An error is thrown if the folder does not exist, 
            or if any of the parameters are invalid. The total_count returned may not match the number of entries when using enterprise scope, 
            because external folders are hidden the list of entries.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.CreateAsync(Box.V2.Models.BoxFolderRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a new empty folder. The new folder will be created inside of the specified parent folder.
            </summary>
            <param name="folderRequest">BoxFolderRequest object</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>A full folder object is returned if the parent folder ID is valid and if no name collisions occur.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.GetInformationAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Retrieves the full metadata about a folder, including information about when it was last updated 
            as well as the files and folders contained in it. To retrieve information about the root folder of a Box account use the id “0″.
            </summary>
            <param name="id">The folder id</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="sharedLink">The shared link for this folder</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>A full folder object is returned, including the most current information available about it.
            An exception is thrown if the folder does not exist or if the user does not have access to it.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.CopyAsync(Box.V2.Models.BoxFolderRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a copy of a folder in another folder. The original version of the folder will not be altered.
            </summary>
            <param name="folderRequest">BoxFolderRequest object</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>A full folder object is returned if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.DeleteAsync(System.String,System.Boolean,System.String)">
            <summary>
            Used to delete a folder. A recursive parameter must be included in order to delete folders that have items 
            inside of them. An optional If-Match header can be included using the etag parameter to ensure that client only deletes the folder 
            if it knows about the latest version.
            </summary>
            <param name="id">Id of the folder</param>
            <param name="recursive">Whether to delete this folder if it has items inside of it.</param>
            <param name="etag">This ‘etag’ field of the folder object to set in the If-Match header</param>
            <returns>True will be returned upon successful deletion</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.UpdateInformationAsync(Box.V2.Models.BoxFolderRequest,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Used to update information about the folder. To move a folder, update the ID of its parent. To enable an 
            email address that can be used to upload files to this folder, update the folder_upload_email attribute. 
            An optional If-Match header can be included using the etag parameter to ensure that client only updates the folder 
            if it knows about the latest version.
            </summary>
            <param name="folderRequest">BoxFolderRequest object</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="etag">This ‘etag’ field of the folder object to set in the If-Match header</param>
            <param name="timeout">Optional timeout for response.</param>
            <returns>The updated folder is returned if the name is valid. Errors generally occur only if there is a name collision.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.CreateSharedLinkAsync(System.String,Box.V2.Models.BoxSharedLinkRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a shared link for this particular folder. In order to get default shared link status, set it to an empty access level.
            To delete a shared link use the DeleteSharedLinkAsync method of this class.
            </summary>
            <param name="id">Id of the folder to create shared link for</param>
            <param name="sharedLinkRequest">Shared link request object</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>A full folder object is returned if the ID is valid and if the shared link is created.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.DeleteSharedLinkAsync(System.String)">
            <summary>
            Used to delete the shared link for the given folder id. 
            </summary>
            <returns>A full folder object is returned if the ID is valid and if the shared link is deleted.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.GetCollaborationsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Use this to get a list of all the collaborations on a folder i.e. all of the users that have access to that folder.
            </summary>
            <param name="id">Id of the folder</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>List of all the collaborations on a folder</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.GetTrashItemsAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Nullable{Box.V2.Models.BoxSortDirection})">
            <summary>
            Retrieves the files and/or folders that have been moved to the trash. Any attribute in the full files 
            or folders objects can be passed in with the fields parameter to get specific attributes, and only those 
            specific attributes back; otherwise, the mini format is returned for each item by default. Multiple 
            attributes can be passed in using the fields parameter. Paginated results can be 
            retrieved using the limit and offset parameters.
            </summary>
            <param name="limit">The maximum number of items to return</param>
            <param name="offset">The item at which to begin the response</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <param name="sort">The field to sort items on</param>
            <param name="direction">The direction to sort results in: ascending or descending</param>
            <returns>A collection of items contained in the trash is returned. An error is thrown if any of the parameters are invalid.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.RestoreTrashedFolderAsync(Box.V2.Models.BoxFolderRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in 
            before it was moved to the trash. If that parent folder no longer exists or if there is now an item with the same 
            name in that parent folder, the new parent folder and/or new name will need to be included in the request.
            </summary>
            <param name="folderRequest">BoxFolderRequest object (specify Parent.Id if you wish to restore to a different parent)</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>The full item will be returned if success. By default it is restored to the parent folder it was in before it was trashed.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.PurgeTrashedFolderAsync(System.String)">
            <summary>
            Permanently deletes a folder that is in the trash. The folder will no longer exist in Box. This action cannot be undone.
            </summary>
            <param name="id">Id of the folder</param>
            <returns>True will be returned upon successful deletion</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.GetTrashedFolderAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves a folder that has been moved to the trash.
            </summary>
            <param name="id">Id of the folder</param>
            <param name="fields">Attribute(s) to include in the response</param>
            <returns>The full folder will be returned, including information about when it was moved to the trash</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.GetWatermarkAsync(System.String)">
            <summary>
            Used to retrieve the watermark for a corresponding Box folder.
            </summary>
            <param name="id">Id of the folder.</param>
            <returns>An object containing information about the watermark associated for this folder. If the folder does not have a watermark applied to it than return null</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.ApplyWatermarkAsync(System.String,Box.V2.Models.BoxApplyWatermarkRequest)">
            <summary>
            Used to apply or update the watermark for a corresponding Box folder.
            </summary>
            <param name="id">Id of the folder.</param>
            <param name="applyWatermarkRequest">BoxApplyWatermarkRequest object. Can be null, for using default values - imprint="default" </param>
            <returns>An object containing information about the watermark associated for this folder.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.RemoveWatermarkAsync(System.String)">
            <summary>
            Used to remove the watermark for a corresponding Box folder.
            </summary>
            <param name="id">Id of the folder.</param>
            <returns>True to confirm the watermark has been removed. If the folder did not have a watermark applied to it, than False will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.CreateLockAsync(System.String)">
            <summary>
            Creates a folder lock on a folder, preventing it from being moved and/or deleted.
            </summary>
            <param name="id">Id of the folder to create a lock on</param>
            <returns>An object representing the lock on the folder</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.GetLocksAsync(System.String,System.Boolean)">
            <summary>
            Lists all folder locks for a given folder.
            </summary>
            <param name="id">Id of the folder</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all locks. Currently only one lock can exist per folder.; defaults to false.</param>
            <returns>A collection of locks on the folder</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxFoldersManager.DeleteLockAsync(System.String)">
            <summary>
            Delete a folder lock on a folder
            </summary>
            <param name="id">Id of the folder lock</param>
            <returns>True will be returned upon successful deletionr</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxGroupsManager">
            <summary>
            The class managing the Box API's Groups endpoint.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.GetAllGroupsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
            <summary>
            Retrieves all of the groups for given enterprise. Must have permissions to see an enterprise's groups.
            </summary>
            <param name="limit">The number of results to return with this request. Refer to the Box API for defaults.</param>
            <param name="offset">The offset of the results. Refer to the Box API for more details.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all groups; defaults to false.</param>
            <param name="filterTerm">Limits the results to only groups whose name starts with the search term.</param>
            <returns>A collection of groups.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.GetGroupAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the group with the specified id.
            </summary>
            <param name="id">The id of the group to return.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Group with id='id'.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.CreateAsync(Box.V2.Models.Request.BoxGroupRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new group.
            </summary>
            <param name="groupRequest">BoxGroupRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The newly created group.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.DeleteAsync(System.String)">
            <summary>
            Delete an existing group.
            </summary>
            <param name="id">The id of the group to delete.</param>
            <returns>True if delete was successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.UpdateAsync(System.String,Box.V2.Models.Request.BoxGroupRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Update an existing group.
            </summary>
            <param name="id">Id of the group to update.</param>
            <param name="groupRequest">BoxGroupRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The updated group.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.AddMemberToGroupAsync(Box.V2.Models.Request.BoxGroupMembershipRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a user to a group.
            </summary>
            <param name="membershipRequest">BoxGroupMembershipRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The group membership created.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.DeleteGroupMembershipAsync(System.String)">
            <summary>
            Delete a group membership.
            </summary>
            <param name="id">The id of the groupmembership to delete.</param>
            <returns>True if delete was successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.GetCollaborationsForGroupAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Retrieves all of the group collaborations for a given group. Note this is only available to group admins.
            </summary>
            <param name="groupId">The id of the group to get the list of collaborations for.</param>
            <param name="limit">The number of results to return with this request. Refer to the Box API for defaults.</param>
            <param name="offset">The offset of the results. Refer to the Box API for more details.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all group collaborations; defaults to false.</param>
            <returns>A collection of collaborations for the specified group id.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.GetAllGroupMembershipsForGroupAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Get the list of group memberships for a given group.
            </summary>
            <param name="groupId">The id of the group to get the list of memberships for.</param>
            <param name="limit">The number of results to return with this request. Refer to the Box API for defaults.</param>
            <param name="offset">The offset of the results. Refer to the Box API for more details.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all group memberships; defaults to false.</param>
            <returns>A collection of group memberships for the specified group id.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.GetAllGroupMembershipsForUserAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Get the list of group memberships for a given user.
            </summary>
            <param name="userId">The id of the user to get the list of memberships for.</param>
            <param name="limit">The number of results to return with this request. Refer to the Box API for defaults.</param>
            <param name="offset">The offset of the results. Refer to the Box API for more details.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all group memberships; defaults to false.</param>
            <returns>A collection of group memberships for the specified user id.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.GetGroupMembershipAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the group membership with the specified id.
            </summary>
            <param name="id">The id of the group membership to return.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Group membership with id='id'.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxGroupsManager.UpdateGroupMembershipAsync(System.String,Box.V2.Models.Request.BoxGroupMembershipRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the specified group membership with the specified request.
            </summary>
            <param name="membershipId">It of the group membership to update.</param>
            <param name="memRequest">BoxGroupMembershipRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The updated group membership.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxLegalHoldPoliciesManager">
            <summary>
            Allow create, update, get, delete legal hold and legal hold assignment.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.GetLegalHoldPolicyAsync(System.String)">
            <summary>
            Get details of a single Legal Hold Policy.
            </summary>
            <param name="legalHoldId">Id of the legal hold policy.</param>
            <returns>If the Id is valid, information about the Legal Hold Policy is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.GetListLegalHoldPoliciesAsync(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Get a list of Legal Hold Policies that belong to your Enterprise.
            </summary>
            <param name="policyName">Case insensitive prefix-match filter on Policy name.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns the list of Legal Hold Policies in your Enterprise that match the filter parameters (if passed in). By default, will only return only 'type', 'id', and 'policy_name', but you can specify more by using the 'fields' parameter.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.CreateLegalHoldPolicyAsync(Box.V2.Models.BoxLegalHoldPolicyRequest)">
            <summary>
            Create a new Legal Hold Policy. Optional date filter may be passed. 
            If Policy has a date filter, any Custodian assignments will apply only to file versions created or uploaded inside of the date range. 
            (Other assignment types, such as folders and files, will ignore the date filter).
            </summary>
            <param name="createRequest">BoxLegalHoldPolicyRequest object.</param>
            <returns>For a successful request, returns information about the Legal Hold Policy created. 
            If the Policy Name is in use for your enterprise, will return null.
            </returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.UpdateLegalHoldPolicyAsync(System.String,Box.V2.Models.BoxLegalHoldPolicyRequest)">
            <summary>
            Update existing Legal Hold Policy. Only name and description can be modified.
            </summary>
            <param name="legalHoldPolicyId">Id of the legal hold policy.</param>
            <param name="updateRequest">BoxLegalHoldPolicyRequest object.</param>
            <returns>Returns information about the Legal Hold Policy updated.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.DeleteLegalHoldPolicyAsync(System.String)">
            <summary>
            Sends request to delete an existing Legal Hold Policy. Note that this is an asynchronous process - the Policy will not be fully deleted yet when the response comes back.
            </summary>
            <param name="legalHoldPolicyId">Id of the legal hold policy.</param>
            <returns>Returns True if the request to delete the Policy was accepted.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.GetAssignmentAsync(System.String)">
            <summary>
            Get details of a single assignment.
            </summary>
            <param name="assignmentId">Id of the assignment.</param>
            <returns>If the assignmentId is valid, information about the Assignment is returned </returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.GetAssignmentsAsync(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Get assignments for a single policy.
            </summary>
            <param name="legalHoldPolicyId">ID of Policy to get Assignments for.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="assignToType">Filter assignments of this type only. Can be file_version, file, folder, or user.</param>
            <param name="assignToId">Filter assignments to this ID only. Note that this will only show assignments applied directly to this entity.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns the list of Assignments for the passed in Policy, as well as any optional filter parameters passed in. By default, will only return only type, and id, but you can specify more by using the fields parameter.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.CreateAssignmentAsync(Box.V2.Models.BoxLegalHoldPolicyAssignmentRequest)">
            <summary>
            Create a new Assignment, which will apply the Legal Hold Policy to the target of the Assignment.
            </summary>
            <param name="createRequest">BoxLegalHoldPolicyAssignmentRequest object.</param>
            <returns>For a successful request, returns object with information about the Assignment created. 
            If the policy or assign-to target cannot be found, null will be returned.
            </returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.DeleteAssignmentAsync(System.String)">
            <summary>
            Sends request to delete an existing Assignment.
            Note that this is an asynchronous process - the Assignment will not be fully deleted yet when the response comes back.
            </summary>
            <param name="assignmentId">ID of the legal holds assignment.</param>
            <returns>A successful request returns 204 No Content. If the Assignment is still initializing, will return a 409.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.GetFileVersionLegalHoldAsync(System.String)">
            <summary>
            Get details of a single File Version Legal Hold.
            </summary>
            <param name="fileVersionLegalHoldId">ID of the file version legal hold.</param>
            <returns>If the ID is valid, information about the Hold is returned with a 200.
            If the ID is for a non-existent Hold, a 404 is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxLegalHoldPoliciesManager.GetFileVersionLegalHoldsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean)">
            <summary>
            Get list of non-deleted Holds for a single Policy.
            </summary>
            <param name="policyId">ID of Legal Hold Policy to get File Version Legal Holds for.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns the list of File Version Legal Holds for the passed in Policy. 
            By default, will only return only "type", and "id", but you can specify more by using the "fields" parameter.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxMetadataCascadePolicyManager">
            <summary>
            The class managing the Box API's Metadata Cascade Policies endpoint.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataCascadePolicyManager.CreateCascadePolicyAsync(System.String,System.String,System.String)">
            <summary>
            Creates a metadata cascade policy on a folder and the sub folder items. 
            </summary>
            <param name="folderId">The id of the folder to assign the cascade policy to.</param>
            <param name="scope">The scope of the metadata cascade policy.</param>
            <param name="templateKey">The template key of the metadata cascade policy.</param>
            <returns>The metadata cascade policy if successfully created.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataCascadePolicyManager.GetCascadePolicyAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves a metadata cascade policy by policy Id. 
            </summary>
            <param name="policyId">The metadata cascade policy Id to retrieve.</param>
            <param name="fields">Optional fields to retrieve on metadata cascade policy.</param>
            <returns>The metadata cascade policy retrieved by Id.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataCascadePolicyManager.ForceApplyCascadePolicyAsync(System.String,System.String)">
            <summary>
            If a policy already exists on the specified folder, this will apply that new policy to the folder and the sub-folder items. 
            </summary>
            <param name="policyId">The policy Id to force apply.</param>
            <param name="conflictResolution">The desired behavior if a conflict exists. Set to either "none" or "overwrite".</param>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataCascadePolicyManager.DeleteCascadePolicyAsync(System.String)">
            <summary>
            Deletes a metadata cascade policy. 
            </summary>
            <param name="policyId">The id of the metadata cascade policy to delete.</param>
            <returns>True if metadata cascade policy was deleted successfully.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxMetadataManager">
            <summary>
            Metadata allows users and applications to define and store custom data associated with their files/folders
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.GetFileMetadataAsync(System.String,System.String,System.String)">
            <summary>
            Used to retrieve the metadata template instance for a corresponding Box file.
            </summary>
            <param name="fileId">Id of file</param>
            <param name="scope">Scope name. Currently, the only scopes supported are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.GetFolderMetadataAsync(System.String,System.String,System.String)">
            <summary>
            Used to retrieve the metadata template instance for a corresponding Box folder.
            </summary>
            <param name="folderId">Id of folder</param>
            <param name="scope">Scope name. Currently, only the enterprise scope is supported</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.CreateFileMetadataAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Used to create the metadata template instance for a corresponding Box file. When creating metadata, only values that adhere to the metadata template schema will be accepted.
            </summary>
            <param name="fileId">Id of file</param>
            <param name="metadata">Metadata to create</param>
            <param name="scope">Scope name. Currently, the only scopes support are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.CreateFolderMetadataAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Used to create the metadata template instance for a corresponding Box folder. When creating metadata, only values that adhere to the metadata template schema will be accepted.
            </summary>
            <param name="folderId">Id of folder</param>
            <param name="metadata">Metadata to create</param>
            <param name="scope">Scope name. Currently, only the enterprise scope is supported</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.UpdateFileMetadataAsync(System.String,System.Collections.Generic.List{Box.V2.Models.BoxMetadataUpdate},System.String,System.String)">
            <summary>
            Used to update the template instance. The request body must follow the JSON-Patch specification, which is represented as a JSON array of operation objects (see examples for more details). Updates can be either add, replace, remove , test, move, or copy. The template instance can only be updated if the template instance already exists. When editing metadata, only values that adhere to the metadata template schema will be accepted.  The update is applied atomically. If any errors occur during the application of the update operations, the metadata instance remains unchanged.
            </summary>
            <param name="fileId">Id of file</param>
            <param name="updates">Metadata updates to apply</param>
            <param name="scope">Scope name. Currently, the only scopes support are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.UpdateFolderMetadataAsync(System.String,System.Collections.Generic.List{Box.V2.Models.BoxMetadataUpdate},System.String,System.String)">
            <summary>
            Used to update the template instance. Updates can be either add, replace, remove , or test. The template instance can only be updated if the template instance already exists. When editing metadata, only values that adhere to the metadata template schema will be accepted.
            </summary>
            <param name="folderId">Id of folder</param>
            <param name="updates">Metadata updates to apply</param>
            <param name="scope">Scope name. Currently, only the enterprise scope is supported</param>
            <param name="template">Metadata template name</param>
            <returns>A Dictionary of key:value pairs representing the metadata.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.SetFileMetadataAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Sets the provided metadata, overwriting any existing metadata on the file.
            </summary>
            <param name="fileId">The ID of the file to write metadata on.</param>
            <param name="metadata">The metadata key/value pairs to write.</param>
            <param name="scope">The scope of the metadata template to write to.</param>
            <param name="template">The key of the metadata template to write to.</param>
            <returns>The full metadata on the file, after writes are applied.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.SetFolderMetadataAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Sets the provided metadata, overwriting any existing metadata on the folder.
            </summary>
            <param name="folderId">The ID of the folder to write metadata on.</param>
            <param name="metadata">The metadata key/value pairs to write.</param>
            <param name="scope">The scope of the metadata template to write to.</param>
            <param name="template">The key of the metadata template to write to.</param>
            <returns>The full metadata on the folder, after writes are applied.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.DeleteFileMetadataAsync(System.String,System.String,System.String)">
            <summary>
            Used to delete the template instance. To delete custom key:value pairs within a template instance, you should refer to the updating metadata section.
            </summary>
            <param name="fileId">Id of file</param>
            <param name="scope">Scope name. Currently, the only scopes support are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.DeleteFolderMetadataAsync(System.String,System.String,System.String)">
            <summary>
            Used to delete the template instance. To delete custom key:value pairs within a template instance, you should refer to the updating metadata section.
            </summary>
            <param name="folderId">Id of folder</param>
            <param name="scope">Scope name. Currently, only the enterprise scope is supported</param>
            <param name="template">Metadata template name</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.GetMetadataTemplate(System.String,System.String)">
            <summary>
            Used to retrieve the schema for a given metadata template.
            </summary>
            <param name="scope">Scope name. Currently, the only scopes supported are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns>Returns the schema for the specified metadata template.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.CreateMetadataTemplate(Box.V2.Models.BoxMetadataTemplate)">
            <summary>
            Used to create a new metadata template with the specified schema.
            </summary>
            <param name="template">BoxMetadataTemplate object</param>
            <returns>The schema representing the metadata template created.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.DeleteMetadataTemplate(System.String,System.String)">
            <summary>
            Used to delete an existing metadata template with the specified schema.
            </summary>
            <param name="scope">Scope name. Currently, the only scopes supported are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns></returns>Returns boolean true if metadata schema was deleted successfully. 
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.UpdateMetadataTemplate(System.Collections.Generic.IEnumerable{Box.V2.Models.BoxMetadataTemplateUpdate},System.String,System.String)">
            <summary>
            Used to update the schema of an existing template.
            </summary>
            <param name="metadataTemplateUpdate">BoxMetadataTemplateUpdate object</param>
            <param name="scope">Scope name. Currently, the only scopes supported are enterprise and global</param>
            <param name="template">Metadata template name</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.GetMetadataTemplateById(System.String)">
            <summary>
            Used to retrieve the schema for a given metadata template by metadata template id.
            </summary>
            <param name="templateId">Metadata template id.</param>
            <returns>Returns the schema for the specified metadata template.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.GetAllFileMetadataTemplatesAsync(System.String)">
            <summary>
            Used to retrieve all metadata associated with a given file
            </summary>
            <param name="fileId">Id of file</param>
            <returns>Collection of metadata instances associated with the file.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.GetAllFolderMetadataTemplatesAsync(System.String)">
            <summary>
            Used to retrieve all metadata associated with a given folder
            </summary>
            <param name="folderId">Id of folder</param>
            <returns>Collection of metadata instances associated with the file.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.GetEnterpriseMetadataAsync(System.String)">
            <summary>
            Used to retrieve all metadata templates within a user's enterprise. Currently only the enterprise scope is supported.
            </summary>
            <param name="scope">Scope name. Currently, the only scopes support are enterprise and global</param>
            <returns>Collection of enterprise metadata instances associated with the file.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxMetadataManager.ExecuteMetadataQueryAsync(Box.V2.Models.Request.BoxMetadataQueryRequest)">
            <summary>
            Allows you to query by metadata on Box items with fields passed in
            </summary>
            <param name="queryRequest">Request object.</param>
            <returns>A collection of items and their associated metadata</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxRecentItemsManager">
            <summary>
            Returns information about files that have been accessed by a user not long ago.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxRecentItemsManager.GetRecentItemsAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns information about files that have been accessed by a user not long ago.
            </summary>
            <param name="limit">The default is 100 and the maximum is 1,000. Less than limit number of items may be returned (even when a user has more) in cases of deleted items or lost permission.</param>
            <param name="marker">The position marker at which to begin the response.</param>
            <param name="fields">Comma-separated list of fields to include in the response.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>BoxRecentItem in collection.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxRetentionPoliciesManager">
            <summary>
            The class managing the Box API's Retention Policies endpoint.
            Retention Management is a feature of the Box Governance package, which can be added on to any Business Plus or Enterprise account.
            To use this feature, you must have the manage retention policies scope enabled for your API key via your application management console.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxRetentionPoliciesManager.CreateRetentionPolicyAsync(Box.V2.Models.Request.BoxRetentionPolicyRequest)">
            <summary>
            Used to create a new retention policy.
            </summary>
            <param name="retentionPolicyRequest">BoxRetentionPolicyRequest object.</param>
            <returns>A new retention policy object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxRetentionPoliciesManager.GetRetentionPolicyAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to retrieve information about a retention policy.
            </summary>
            <param name="id">ID of the retention policy.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The specified retention policy will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxRetentionPoliciesManager.UpdateRetentionPolicyAsync(System.String,Box.V2.Models.Request.BoxRetentionPolicyRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to update a retention policy.
            </summary>
            <param name="id">ID of the retention policy.</param>
            <param name="retentionPolicyRequest">BoxRetentionPolicyRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>An updated retention policy object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxRetentionPoliciesManager.GetRetentionPoliciesAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean)">
            <summary>
            Retrieves all of the retention policies for the given enterprise.
            </summary>
            <param name="policyName">A name to filter the retention policies by. A trailing partial match search is performed.</param>
            <param name="policyType">A policy type to filter the retention policies by.</param>
            <param name="createdByUserId">A user id to filter the retention policies by.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns the list of all retention policies for the enterprise.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxRetentionPoliciesManager.GetRetentionPolicyAssignmentsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a list of all retention policy assignments associated with a specified retention policy.
            </summary>
            <param name="retentionPolicyId">ID of the retention policy.</param>
            <param name="type">The type of the retention policy assignment to retrieve. Can either be folder or enterprise.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns a list of the retention policy assignments associated with the specified retention policy.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxRetentionPoliciesManager.CreateRetentionPolicyAssignmentAsync(Box.V2.Models.Request.BoxRetentionPolicyAssignmentRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a retention policy assignment that associates a retention policy with either a folder or an enterprise
            </summary>
            <param name="policyAssignmentRequest"></param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A new retention policy assignment will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxRetentionPoliciesManager.GetRetentionPolicyAssignmentAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to retrieve information about a retention policy assignment.
            </summary>
            <param name="retentionPolicyAssignmentId">ID of the retention policy assignment.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The specified retention policy assignment will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxRetentionPoliciesManager.DeleteRetentionPolicyAssignmentAsync(System.String)">
            <summary>
            Used to delete a retention policy assignment.
            </summary>
            <param name="retentionPolicyAssignmentId">ID of the retention policy assignment.</param>
            <returns>True if the retention policy assignment was successfully deleted.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxRetentionPoliciesManager.GetFileVersionRetentionsAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{Box.V2.Models.DispositionAction})">
            <summary>
            Retrieves all file version retentions for the given enterprise.
            </summary>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <param name="fileId">Filters results by files with this ID.</param>
            <param name="fileVersionId">Filters results by file versions with this ID.</param>
            <param name="policyId">Filters results by the retention policy with this ID.</param>
            <param name="dispositionBefore">Filters results by files that will have their disposition come into effect before this date.</param>
            <param name="dispositionAfter">Filters results by files that will have their disposition come into effect after this date.</param>
            <param name="dispositionAction">Filters results by the retention policy with this disposition action.</param>
            <returns>The specified file version retention will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxRetentionPoliciesManager.GetFileVersionRetentionAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to retrieve information about a file version retention.
            </summary>
            <param name="fileVersionRetentionId">ID of the file version retention policy.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Returns the list of all file version retentions for the enterprise.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.IBoxRetentionPoliciesManager.GetFilesUnderRetentionForAssignmentAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Box.V2.Managers.IBoxRetentionPoliciesManager.GetFileVersionsUnderRetentionForAssignmentAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String,System.Boolean)" -->
        <member name="T:Box.V2.Managers.IBoxSearchManager">
            <summary>
            The manager that represents the search endpoint
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxSearchManager.QueryAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Collections.Generic.List{Box.V2.Models.Request.BoxMetadataFilterRequest},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{Box.V2.Models.BoxSortDirection})">
            <summary>
            Search for items that are accessible by a single user or an entire enterprise.
            </summary>
            <param name="query">The string to search for. Box matches the search string against object names, descriptions, text contents of files, and other data.</param>
            <param name="scope">The scope for which you want to limit your search to. Can be user_content for a search limited to only the current user or enterprise_content for the entire enterprise. To enable the enterprise_content scope for an administrator, please contact Box.</param>
            <param name="fileExtensions">Limit searches to specific file extension(s).</param>
            <param name="createdAfter">The from date for when the item was created</param>
            <param name="createdBefore">The to date for when the item was created</param>
            <param name="updatedAfter">The from date for when the item was last updated</param>
            <param name="updatedBefore">The to date for when the item was last updated</param>
            <param name="sizeLowerBound">The lower bound of the file size range in bytes</param>
            <param name="sizeUpperBound">The upper bound of the file size range in bytes</param>
            <param name="ownerUserIds">Search by item owners</param>
            <param name="ancestorFolderIds">Limit searches to specific parent folders</param>
            <param name="contentTypes">Limit searches to specific Box designated content types. Can be name, description, file_content, comments, or tags.</param>
            <param name="type">The type you want to return in your search. Can be file, folder, or web_link</param>
            <param name="trashContent">Allows you to search within the trash. Can be trashed_only or non_trashed_only. Searches without this parameter default to non_trashed_only</param>
            <param name="mdFilters">Filters for a specific metadata template for files with metadata object associations. NOTE: For searches with the mdfilters param, a query string is not required. Currenly only one BoxMetadataFilterRequest element is allowed.</param>
            <param name="limit">Number of search results to return. The default is 30 and the maximum is 200.</param>
            <param name="offset">The search result at which to start the response. The default is 0.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="sort">The field to sort the search results by, e.g. "modified_at".</param>
            <param name="direction">The direction to return the results. "ASC" for ascending and "DESC" for descending.</param>
            <returns>A collection of search results is returned. If there are no matching search results, the collection will be empty.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxSharedItemsManager">
            <summary>
            Shared items are any files or folders that are represented by a shared link. 
            </summary>
            <seealso cref="T:Box.V2.Managers.BoxResourceManager" />
        </member>
        <member name="M:Box.V2.Managers.IBoxSharedItemsManager.SharedItemsAsync(System.String,System.String)">
            <summary>
            Shared items are any files or folders that are represented by a shared link. Shared items are different from other API resources in that a shared resource doesn’t necessarily have to be in the account of the user accessing it. The actual shared link itself is used along with a normal access token.
            </summary>
            <param name="sharedLink">The shared link for this item.</param>
            <param name="sharedLinkPassword">The password for the shared link (if required)</param>
            <returns>A full file or folder object is returned if the shared link is valid and the user has access to it. An error may be returned if the link is invalid, if a password is required, or if the user does not have access to the file.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxSignRequestsManager">
            <summary>
            The manager that represents all of the sign requests endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxSignRequestsManager.GetSignRequestByIdAsync(System.String)">
            <summary>
            Retrieves information about a sign requests by ID.
            </summary>
            <param name="signRequestId">Id of the sign request.</param>
            <returns>A full SignRequest object is returned if the id is valid and if the user has access to the sign request.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxSignRequestsManager.GetSignRequestsAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Retrieves information about all sign requests.
            </summary>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="nextMarker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>A a collection of sign requests is returned if the id if the user has access.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxSignRequestsManager.CreateSignRequestAsync(Box.V2.Models.Request.BoxSignRequestCreateRequest)">
            <summary>
            Create a sign request object.
            </summary>
            <param name="signRequestCreateRequest">Sign request create request object in order to create a sign request object.</param>
            <returns>The sign request object that was successfully created.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxSignRequestsManager.CancelSignRequestAsync(System.String)">
            <summary>
            Cancels a sign request.
            </summary>
            <param name="signRequestId">Id of the sign request.</param>
            <returns>The sign request object that was successfully cancelled.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxSignRequestsManager.ResendSignRequestAsync(System.String)">
            <summary>
            Resends a sign request email to all outstanding signers.
            </summary>
            <param name="signRequestId">Id of the sign request.</param>
        </member>
        <member name="M:Box.V2.Managers.IBoxSignTemplatesManager.GetSignTemplateByIdAsync(System.String)">
            <summary>
            Retrieves information about a sign template by ID.
            </summary>
            <param name="signTemplateId">Id of the sign template.</param>
            <returns>A full SignTemplate object is returned if the id is valid and if the user has access to the sign template.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxSignTemplatesManager.GetSignTemplatesAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Retrieves information about all sign templates.
            </summary>
            <param name="limit">Limit result size to this number. Defaults to 100, maximum is 1,000.</param>
            <param name="nextMarker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>A a collection of sign templates is returned if the id if the user has access.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxStoragePoliciesManager.GetStoragePolicyAsync(System.String)">
            <summary>
            Get details of a single Box Storage Policy.
            </summary>
            <param name="policyId">Id of the Box Storage Policy to retrieve.</param>
            <returns>If the Id is valid, information about the Box Storage Policy is returned. </returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxStoragePoliciesManager.GetListStoragePoliciesAsync(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Get a list of Storage Policies that belong to your Enterprise.
            </summary>
            <param name="fields">Attribute(s) to include in the response.</param>
            <param name="marker">Take from "next_marker" column of a prior call to get the next page.</param>
            <param name="limit">Limit result size to this number. Defults to 100, maximum is 1,000.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns the list of Storage Policies in your Enterprise that match the filer parameters (if passedin).</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxStoragePoliciesManager.GetAssignmentAsync(System.String)">
            <summary>
            Get details of a single assignment.
            </summary>
            <param name="assignmentId">Id of the assignment.</param>
            <returns>If the assignmentId is valid, information about the assignment is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxStoragePoliciesManager.GetAssignmentForTargetAsync(System.String,System.String)">
            <summary>
            Get details of a Storage Policy Assignment for target entity.
            </summary>
            <param name="userId">User Id of the assignment.</param>
            <param name="entityType">Entity type of the storage policy assignment.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxStoragePoliciesManager.UpdateStoragePolicyAssignment(System.String,System.String)">
            <summary>
            Update the storage policy information for storage policy assignment.
            </summary>
            <param name="assignmentId">Storage Policy assignment Id to update.</param>
            <param name="policyId">"The Id of the Storage Policy to update to."</param>
            <returns></returns> The updated Storage Policy object with new assignment.
        </member>
        <member name="M:Box.V2.Managers.IBoxStoragePoliciesManager.CreateAssignmentAsync(System.String,System.String)">
            <summary>
            Create a storage policy assignment to a Box User.
            </summary>
            <param name="userId">The user Id to create assignment for.</param>
            <param name="policyId">The Id of the storage policy to assign the user to.</param>
            <returns>The assignment object for the storage policy assignment to user.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxStoragePoliciesManager.DeleteAssignmentAsync(System.String)">
            <summary>
            Sends request to delete an existing assignment.
            </summary>
            <param name="assignmentId">Id of the storage policy assignment.</param>
            <returns>A successful request returns 204 No Content.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxStoragePoliciesManager.AssignAsync(System.String,System.String)">
            <summary>
            Checks if a storage policy assignment exists. If it does not then create an assignment. 
            </summary>
            <param name="userId">The id of the user to assign storage policy to.</param>
            <param name="storagePolicyId">The storage policy id to assign to user.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTasksManager.CreateTaskAssignmentAsync(Box.V2.Models.BoxTaskAssignmentRequest)">
            <summary>
            Used to assign a task to a single user. There can be multiple assignments on a given task.
            </summary>
            <param name="taskAssignmentRequest">BoxTaskAssignmentRequest object.</param>
            <returns>A new task assignment object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTasksManager.UpdateTaskAssignmentAsync(Box.V2.Models.BoxTaskAssignmentUpdateRequest)">
            <summary>
            Used to update a task assignment.
            </summary>
            <param name="taskAssignmentUpdateRequest">BoxTaskAssignmentUpdateRequest object.</param>
            <returns>A new task assignment object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTasksManager.GetTaskAssignmentAsync(System.String)">
            <summary>
            Fetches a specific task assignment.
            </summary>
            <param name="taskAssignmentId">Id of the task assignment.</param>
            <returns>The specified task assignment object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTasksManager.DeleteTaskAssignmentAsync(System.String)">
            <summary>
            Deletes a specific task assignment.
            </summary>
            <param name="taskAssignmentId">Id of the task assignment.</param>
            <returns>True will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTasksManager.CreateTaskAsync(Box.V2.Models.BoxTaskCreateRequest)">
            <summary>
            Used to create a single task for single user on a single file.
            </summary>
            <param name="taskCreateRequest">BoxTaskCreateRequest object.</param>
            <returns>A new task object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTasksManager.UpdateTaskAsync(Box.V2.Models.BoxTaskUpdateRequest)">
            <summary>
            Updates a specific task.
            </summary>
            <param name="taskUpdateRequest">BoxTaskUpdateRequest object.</param>
            <returns>The updated task object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTasksManager.DeleteTaskAsync(System.String)">
            <summary>
            Permanently deletes a specific task.
            </summary>
            <param name="taskId">Id of the task.</param>
            <returns>True will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTasksManager.GetTaskAsync(System.String)">
            <summary>
            Fetches a specific task.
            </summary>
            <param name="taskId">Id of the task.</param>
            <returns>The specified task object will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTasksManager.GetAssignmentsAsync(System.String)">
            <summary>
            Retrieves all of the assignments for a given task.
            </summary>
            <param name="taskId">Id of the task.</param>
            <returns>A collection of task assignment mini objects will be returned upon success.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxTermsOfServiceManager">
            <summary>
            The manager that represents all of the terms of service endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxTermsOfServiceManager.GetTermsOfServicesByIdAsync(System.String)">
            <summary>
            Retrieves information about a terms of service by ID.
            </summary>
            <param name="tosId">Id of the terms of service.</param>
            <returns>A full terms of service object is returned if the id is valid and if the user has access to the terms of service.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTermsOfServiceManager.GetTermsOfServicesAsync(System.String)">
            <summary>
            Retrieves information about all terms of service
            </summary>
            <param name="tosType">The type of terms of service to be retrieved - managed or external.</param>
            <returns>A a collection of terms of service objects is returned if the id if the user has access.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTermsOfServiceManager.CreateTermsOfServicesAsync(Box.V2.Models.BoxTermsOfServicesRequest)">
            <summary>
            Create a terms of service object.
            </summary>
            <param name="termsOfServicesRequest">Terms of services request object in order to create a terms of service object.</param>
            <returns>The terms of service object that was successfully created.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTermsOfServiceManager.UpdateTermsOfServicesAsync(System.String,Box.V2.Models.BoxTermsOfServicesRequest)">
            <summary>
            Updates current information on a terms of service object.
            </summary>
            <param name="tosId">The terms of service id.</param>
            <param name="termsOfServicesRequest">The update session request for new terms of service.</param>
            <returns>The updated session information for terms of service object.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTermsOfServiceManager.GetTermsOfServiceUserStatusesAsync(System.String,System.String)">
            <summary>
            Retrieves information on the user status of the terms of service.
            </summary>
            <param name="tosId">The terms of service id.</param>
            <param name="userId">The user id, if null this will default to current user.</param>
            <returns>The user status for terms of service objects.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTermsOfServiceManager.CreateBoxTermsOfServiceUserStatusesAsync(Box.V2.Models.Request.BoxTermsOfServiceUserStatusCreateRequest)">
            <summary>
            Create a terms of service status for user.
            </summary>
            <param name="termsOfServiceUserStatusCreateRequest">The request object for terms of service user status.</param>
            <returns>The status of the terms of service for a user.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxTermsOfServiceManager.UpdateTermsofServiceUserStatusesAsync(System.String,System.Boolean)">
            <summary>
            Updates information on a terms of service for a user.
            </summary>
            <param name="tosId">The terms of service id.</param>
            <param name="isAccepted">The current state of the terms of service.</param>
            <returns>The updated session information for a terms of service user status.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxUsersManager">
            <summary>
            The manager that represents all of the user endpoints
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.GetCurrentUserInformationAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves information about the user who is currently logged in i.e. the user for whom this auth token was generated.
            </summary>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Returns a single complete user object.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.CreateEnterpriseUserAsync(Box.V2.Models.BoxUserRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to provision a new user in an enterprise. This method only works for enterprise admins.
            </summary>
            <param name="userRequest">BoxUserRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Returns the user object for the newly created user.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.UpdateUserInformationAsync(Box.V2.Models.BoxUserRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to edit the settings and information about a user. This method only works for enterprise admins. To roll a user out 
            of the enterprise (and convert them to a standalone free user), update the special enterprise attribute to be null.
            </summary>
            <param name="userRequest">BoxUserRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Returns the user object for the updated user. Errors may be thrown when the fields are invalid or this API call is made from a non-admin account.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.GetEnterpriseUsersAsync(System.String,System.UInt32,System.UInt32,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean)">
            <summary>
            Get information about users in an enterprise. This method only works for enterprise admins.
            </summary>
            <param name="filterTerm">Filter the results to only users starting with this value in either the name or the login.</param>
            <param name="offset">The record at which to start. (default: 0)</param>
            <param name="limit">The number of records to return. (min: 1; default: 100; max: 1000)</param>
            <param name="fields">The fields to populate for each returned user.</param>
            <param name="userType">The type of user to search for. Valid values are all, external or managed. If nothing is provided, the default behavior will be managed only</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all users; defaults to false.</param>
            <param name="externalAppUserId">The external app user id.</param>
            <returns>A BoxCollection of BoxUsers matching the provided filter criteria.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when limit outside the range 0&lt;limit&lt;=1000</exception>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.GetEnterpriseUsersWithMarkerAsync(System.String,System.String,System.UInt32,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Get information about users in an enterprise. This method only works for enterprise admins.
            </summary>
            <param name="filterTerm">Filter the results to only users starting with this value in either the name or the login.</param>
            <param name="marker">Position to return results from.</param>
            <param name="limit">The number of records to return. (min: 1; default: 100; max: 1000)</param>
            <param name="fields">The fields to populate for each returned user.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all users; defaults to false.</param>
            <param name="externalAppUserId">The external app user id.</param>
            <returns>A BoxCollection of BoxUsers matching the provided filter criteria.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when limit outside the range 0&lt;limit&lt;=1000</exception>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.DeleteEnterpriseUserAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes a user in an enterprise account.
            </summary>
            <param name="userId">Id of the user.</param>
            <param name="notify">Determines if the destination user should receive email notification of the transfer.</param>
            <param name="force">Whether or not the user should be deleted even if this user still own files.</param>
            <returns>Null, if user is deleted.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.InviteUserToEnterpriseAsync(Box.V2.Models.BoxUserInviteRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Invites an existing user to join an Enterprise. The existing user cannot be part of another Enterprise and must already have a Box account.
            Once invited, the user will receive an email and prompt to accept the invitation within the Box web application. 
            This method requires the "Manage An Enterprise" scope for the enterprise, which can be enabled within your developer console.
            </summary>
            <param name="userInviteRequest">BoxUserInviteRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A new invite object will be returned if successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.GetUserInviteAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns information about an existing user invitation.
            </summary>
            <param name="inviteId">The ID associated with the user invitiation.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>The complete user invite information.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.ChangeUsersLoginAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to convert one of the user’s confirmed email aliases into the user’s primary login.
            </summary>
            <param name="userId">Id of the user.</param>
            <param name="login">The email alias to become the primary email.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>If the user_id is valid and the email address is a confirmed email alias, the updated user object will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.DeleteEmailAliasAsync(System.String,System.String)">
            <summary>
            Removes an email alias from a user.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="emailAliasId">The email alias identifier.</param>
            <returns>True, if the user has permission to remove this email alias.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.GetUserInformationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves information about a user in the enterprise. Requires enterprise administration authorization.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>Returns the complete user object.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.GetEmailAliasesAsync(System.String)">
            <summary>
            Retrieves all email aliases for this user. The collection of email aliases does not include the primary login for the user.
            </summary>
            <param name="userId">The user ID (required).</param>
            <returns>If the userId is valid a collection of email aliases will be returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.AddEmailAliasAsync(System.String,System.String)">
            <summary>
            Adds a new email alias to the given user’s account.
            </summary>
            <param name="userId">The user ID (required).</param>
            <param name="email">The email address to add to the account as an alias (required).</param>
            <returns>Returns the newly created email_alias object. Errors will be thrown if the user_id is not valid or the particular user’s email alias cannot be modified.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.MoveUserFolderAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Moves all of the owned content from within one user’s folder into a new folder in another user’s account. 
            You can move folders across users as long as the you have administrative permissions and the ‘source’ user owns the folders. 
            To move everything from the root folder, use “0” which always represents the root folder of a Box account.
            </summary>
            <param name="userId">Id of the user.</param>
            <param name="ownedByUserId">The ID of the user who the folder will be transferred to.</param>
            <param name="folderId">Currently only moving of the root folder (0) is supported.</param>
            <param name="notify">Determines if the destination user should receive email notification of the transfer.</param>
            <param name="timeout">Optional timeout for response.</param>
            <returns>Returns the information for the newly created destination folder. An error is thrown if you do not have the necessary permissions to move the folder.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.GetMembershipsForUserAsync(System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Retrieves all of the group memberships for a given user. 
            Note this is only available to group admins. 
            To retrieve group memberships for the user making the API request, use the users/me/memberships endpoint.
            </summary>
            <param name="userId">Id of the user.</param>
            <param name="offset">The item at which to begin the response.</param>
            <param name="limit">Default is 100. Max is 1000.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all group memberships; defaults to false.</param>
            <returns>A collection of group membership objects will be returned upon success.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.GetUserAvatar(System.String)">
            <summary>
            Retrieves a user's avatar image.
            </summary>
            <param name="userId">The Id of the user.</param>
            <returns>A stream of the bytes for the user's avatar image.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.AddOrUpdateUserAvatarAsync(System.String,System.IO.FileStream)">
            <summary>
            Adds or updates a user avatar. Supported formats are JPG, JPEG and PNG. Maximum allowed file size is 1MB and 1024x1024 pixels resolution.
            </summary>
            <param name="userId">The Id of the user.</param>
            <param name="stream">FileStream with avatar image.</param>
            <returns>Response containing avatar Urls.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.AddOrUpdateUserAvatarAsync(System.String,System.IO.Stream,System.String)">
            <summary>
            Adds or updates a user avatar. Supported formats are JPG, JPEG and PNG. Maximum allowed file size is 1MB and 1024x1024 pixels resolution.
            </summary>
            <param name="userId">The Id of the user.</param>
            <param name="stream">Stream with avatar image.</param>
            <param name="fileName">Filename of the avatar image.</param>
            <returns>Response containing avatar Urls.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxUsersManager.DeleteUserAvatarAsync(System.String)">
            <summary>
            Deletes a user's avatar image.
            </summary>
            <param name="userId">Removes an existing user avatar. You cannot reverse this operation.</param>
            <returns>True if deletion success.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxWebhooksManager">
            <summary>
            The manager that represents the webhooks V2 endpoints.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebhooksManager.CreateWebhookAsync(Box.V2.Models.BoxWebhookRequest)">
            <summary>
            Create a new webhook.
            </summary>
            <param name="webhookRequest">BoxWebhookRequest object.</param>
            <returns>Returns a webhook object if creation succeeds.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebhooksManager.GetWebhookAsync(System.String)">
            <summary>
            Get a webhook.
            </summary>
            <param name="id">Webhook id.</param>
            <returns>Returns a webhook object.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebhooksManager.UpdateWebhookAsync(Box.V2.Models.BoxWebhookRequest)">
            <summary>
            Update a webhook.
            </summary>
            <param name="webhookRequest">BoxWebhookRequest object.</param>
            <returns>Returns the updated webhook object.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebhooksManager.DeleteWebhookAsync(System.String)">
            <summary>
            Delete a webhook.
            </summary>
            <param name="id">Webhook id.</param>
            <returns>Returns true if deleted successfully.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebhooksManager.GetWebhooksAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Fetch all defined webhooks for the requesting application and user.
            </summary>
            <param name="limit">Optional. Defaults to 100, max of 200.</param>
            <param name="nextMarker">Optional. Used to indicate starting point for next batch of webhooks.</param>
            <param name="autoPaginate">Whether or not to auto-paginate to fetch all items; defaults to false.</param>
            <returns>Returns all defined webhooks for the requesting application and user, up to the limit.</returns>
        </member>
        <member name="T:Box.V2.Managers.IBoxWebLinksManager">
            <summary>
            Allow create, update, get, delete weblink for folder.
            </summary>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebLinksManager.CreateWebLinkAsync(Box.V2.Models.BoxWebLinkRequest)">
            <summary>
            Creates a web link object within a given folder.
            </summary>
            <param name="createWebLinkRequest">BoxWebLinkRequest object</param>
            <returns>The web link object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebLinksManager.DeleteWebLinkAsync(System.String)">
            <summary>
            Deletes a web link and moves it to the trash.
            </summary>
            <param name="webLinkId">Id of the weblink.</param>
            <returns>True, if successfully deleted and moved to trash</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebLinksManager.GetWebLinkAsync(System.String)">
            <summary>
            Use to get information about the web link.
            </summary>
            <param name="webLinkId">Id of the weblink.</param>
            <returns>The web link object is returned.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebLinksManager.UpdateWebLinkAsync(System.String,Box.V2.Models.BoxWebLinkRequest)">
            <summary>
            Updates information for a web link.
            </summary>
            <param name="webLinkId">Id of the weblink.</param>
            <param name="updateWebLinkRequest">BoxWebLinkRequest object</param>
            <returns>An updated web link object if the update was successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebLinksManager.CopyAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a copy of a web link in another folder. The original version of the web link will not be altered.
            </summary>
            <param name="webLinkId">The Id of the web link to copy.</param>
            <param name="destinationFolderId">The Id of the destination folder, where the new copy will be created.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>
            A full web link object is returned if the ID is valid and if the update is successful. 
            Errors can be thrown if the destination folder is invalid or if a name collision occurs. 
            </returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebLinksManager.CreateSharedLinkAsync(System.String,Box.V2.Models.BoxSharedLinkRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to create a shared link for a web link.
            </summary>
            <param name="id">Id of the file.</param>
            <param name="sharedLinkRequest">BoxSharedLinkRequest object.</param>
            <param name="fields">Attribute(s) to include in the response.</param>
            <returns>A full web link object containing the updated shared link is returned
            if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="M:Box.V2.Managers.IBoxWebLinksManager.DeleteSharedLinkAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to delete the shared link for this particular file.
            </summary>
            <param name="id">The id of the web link to remove the shared link from.</param>
            <returns>A full web link object with the shared link removed is returned
            if the ID is valid and if the update is successful.</returns>
        </member>
        <member name="T:Box.V2.Models.BoxAIResponse">
            <summary>
            AI response
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIResponse.Answer">
            <summary>
            The answer provided by the LLM.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIResponse.CompletionReason">
            <summary>
            The reason the response finishes.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIResponse.CreatedAt">
            <summary>
            The ISO date formatted timestamp of when the answer to the prompt was created.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxApplication">
            <summary>
            Box representation of an application.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxApplication.Name">
            <summary>
            The name of this application.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxApplication.ApiKey">
            <summary>
            The API key of this application.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAssignmentCounts.User">
            <summary>
            Gets the count of users.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAssignmentCounts.Folder">
            <summary>
            Gets the count of folders.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAssignmentCounts.File">
            <summary>
            Gets the count of files.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAssignmentCounts.Version">
            <summary>
            Gets the count of versions.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxClassification.Name">
            <summary>
            The name of the classification
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxClassification.Definition">
            <summary>
            The meaning of the classification
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxClassification.Color">
            <summary>
            The color that is used to display the classification label in a user-interface
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxCollaboration">
            <summary>
            Box representation of a collaboration
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.CreatedBy">
            <summary>
            The user who created this collaboration
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.CreatedAt">
            <summary>
            The time this collaboration was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.ModifiedAt">
            <summary>
            The time this collaboration was last modified
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.ExpiresAt">
            <summary>
            The time this collaboration will expire
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.Status">
            <summary>
            The status of this collab. Can be accepted, pending, or rejected
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.AccessibleBy">
            <summary>
            The user or group who the collaboration applies to
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.Role">
            <summary>
            The level of access this user or group has. Can be editor, viewer, previewer, uploader, previewer uploader, 
            viewer uploader, or co-owner
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.AcknowledgedAt">
            <summary>
            When the status of this collab was changed
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.Item">
            <summary>
            The item this collaboration is related to
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.CanViewPath">
            <summary>
            Whether view path collaboration feature is enabled or not. View path collaborations allow the invitee to see the entire ancestral path to the associated folder. 
            The user will not gain privileges in any ancestral folder (e.g. see content the user is not collaborated on).
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaboration.InviteEmail">
            <summary>
            The email address of the pending collaborator.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxCollaborationWhitelistEntry">
            <summary>
            Box whitelist of a domain.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationWhitelistEntry.Domain">
            <summary>
            The domain to be whitelisted for collaboration.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationWhitelistEntry.Direction">
            <summary>
            The direction of the whitelist for collaboration.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationWhitelistEntry.Enterprise">
            <summary>
            The enterprise the collaboration whitelist belongs to.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationWhitelistEntry.CreatedAt">
            <summary>
            The time this collaboration whitelist was created.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationWhitelistEntry.ModifiedAt">
            <summary>
            The time this collaboration whitelist was modified.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxCollaborationWhitelistTargetEntry">
            <summary>
            Box whitelist of a target.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationWhitelistTargetEntry.User">
            <summary>
            The user that is exempt from whitelist.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationWhitelistTargetEntry.Enterprise">
            <summary>
            The domain the whitelist is active in.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationWhitelistTargetEntry.CreatedAt">
            <summary>
            The time this whitelist was created at.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationWhitelistTargetEntry.ModifiedAt">
            <summary>
            The time this whitelist was modified at.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxCollection`1">
            <summary>
            Box representation of a collection that uses offset and limit fields for paging through results.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Box.V2.Models.BoxCollectionMarkerBased`1">
            <summary>
            Box representation of a collection that uses the next_marker and limit fields for paging through results.
            This class will only accept Order as BoxSortOrder array 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Box.V2.Models.BoxCollectionMarkerBased`1.Limit">
            <summary>
            Number of items to return per request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollectionMarkerBased`1.NextMarker">
            <summary>
            Should be empty for first invocation of the API. Use the one returned in response for each subsequent call.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollectionMarkerBased`1.Entries">
            <summary>
            List of items returned.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollectionMarkerBased`1.Order">
            <summary>
            Default is "asc". Valid values are asc, desc. Case in-sensitive, ASC/DESC works just fine.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxCollectionMarkerBasedV2`1">
            <summary>
            Box representation of a collection that uses the next_marker and limit fields for paging through results.
            This class will only accept Order as BoxSortOrder object 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Box.V2.Models.BoxCollectionMarkerBasedV2`1.Limit">
            <summary>
            Number of items to return per request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollectionMarkerBasedV2`1.NextMarker">
            <summary>
            Should be empty for first invocation of the API. Use the one returned in response for each subsequent call.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollectionMarkerBasedV2`1.Entries">
            <summary>
            List of items returned.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollectionMarkerBasedV2`1.Order">
            <summary>
            Default is "asc". Valid values are asc, desc. Case in-sensitive, ASC/DESC works just fine.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollectionItem.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxComment">
            <summary>
            Box representation of a comment
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxComment.IsReplyComment">
            <summary>
            Whether or not this comment is a reply to another comment
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxComment.Message">
            <summary>
            The comment text that the user typed
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxComment.TaggedMessage">
            <summary>
            The string representing the comment text with @mentions included. 
            @mention format is @[id:username]. Field is not included by default.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxComment.CreatedBy">
            <summary>
            A mini user object representing the author of the comment
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxComment.CreatedAt">
            <summary>
            The time this comment was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxComment.ModifiedAt">
            <summary>
            The time this comment was last modified
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxComment.Item">
            <summary>
            The object this comment was placed on
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxDevicePin.OwnedBy">
            <summary>
            The user that the pin belongs to
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxDevicePin.ProductName">
            <summary>
            The type of device being pinned
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxDevicePin.CreatedAt">
            <summary>
            The time the device pin was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxDevicePin.ModifiedAt">
            <summary>
            The time the device pin was last modified
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxEmail">
            <summary>
            Box representation of an email
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEmail.Acesss">
            <summary>
            The available access
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEmail.Address">
            <summary>
            The email address
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxEmailAlias">
            <summary>
            Box representation of email alias
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEmailAlias.IsConfirmed">
            <summary>
            The available access
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEmailAlias.Email">
            <summary>
            The email address
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxEnterprise">
            <summary>
            Box mini representation of a enterprise
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterprise.Name">
            <summary>
            The name of this enterprise
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterpriseEvent.Source">
            <summary>
            A mini user object representing the source of the event (file, folder, comment, etc.)
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterpriseEvent.CreatedBy">
            <summary>
            A mini user object representing the creator of the event
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterpriseEvent.CreatedAt">
            <summary>
            When the event was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterpriseEvent.EventId">
            <summary>
            The unique id of the event
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterpriseEvent.EventType">
            <summary>
            The type of the event
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterpriseEvent.IPAddress">
            <summary>
            The IP address associated with the creation of the event
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterpriseEvent.Type">
            <summary>
            The type of the event
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterpriseEvent.SessionId">
            <summary>
            The session Id of the event
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterpriseEvent.AdditionalDetails">
            <summary>
            The additional details of the event
            <para>
            NOTE: Box returns a variety of differing data for this field with no type indicator so this is being parsed to a Dictionary
            </para>
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEnterpriseEvent.ActionBy">
            <summary>
            The action by field on the event.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxEntity">
            <summary>
            Represents the base class for most Box model objects
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEntity.Id">
            <summary>
            The item’s ID
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxEntity.Type">
            <summary>
            The type of the item
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSharedLinkAccessType">
            <summary>
            The available types of access for a shared link
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSyncStateType">
            <summary>
            The available types for the sync states
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSortBy">
            <summary>
            The way an item collection is ordered by
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSortDirection">
            <summary>
            The sort direction of an item collection
            </summary>
        </member>
        <member name="T:Box.V2.Models.MetadataUpdateOp">
            <summary>
            The operation type for a metadata update
            </summary>
        </member>
        <member name="T:Box.V2.Models.ResolutionStateType">
            <summary>
            Resulution state of task assignment
            </summary>
        </member>
        <member name="T:Box.V2.Models.MetadataTemplateUpdateOp">
            <summary>
            The operation type for a metadata template update
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxCompletionRule">
            <summary>
            Defines which assignees need to complete the task before it is considered completed.
            </summary>
        </member>
        <member name="F:Box.V2.Models.BoxCompletionRule.all_assignees">
            <summary>
            all_assignees requires all assignees to review or approve the the task in order for it to be considered completed.
            </summary>
        </member>
        <member name="F:Box.V2.Models.BoxCompletionRule.any_assignee">
            <summary>
            any_assignee accepts any one assignee to review or approve the the task in order for it to be considered completed.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFile">
            <summary>
            Box representation of a file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.Sha1">
            <summary>
            The sha1 hash of this file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.FileVersion">
            <summary>
            The file version information for this file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.PurgedAt">
            <summary>
            When this file will be permanently deleted
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.ContentCreatedAt">
            <summary>
            When the content of this file was created
            For more information about content times <see>http://developers.box.com/content-times/</see>
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.ContentModifiedAt">
            <summary>
            When the content of this file was last modified
            For more information about content times <see>http://developers.box.com/content-times/</see>
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.VersionNumber">
            <summary>
            The version of the file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.Extension">
            <summary>
            Indicates the suffix, when available, on the file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.CommentCount">
            <summary>
            The number of comments on a file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.Permissions">
            <summary>
            The available permissions on this file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.Lock">
            <summary>
            The available lock on this file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.ExpiringEmbedLink">
            <summary>
            An expiring URL for an embedded preview session in an iframe.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.WatermarkInfo">
            <summary>
            Information about the watermark status of this file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.Metadata">
            <summary>
            Metadata on this file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.Representations">
            <summary>
            Representation generated for this file. 
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.ExpiresAt">
            <summary>
            The date when the file will be automatically deleted due to item expiration settings.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.AllowedInviteeRoles">
            <summary>
            The set of allowed roles for collaborators invited to this file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.HasCollaborations">
            <summary>
            Whether the item has collaborations or not.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.IsExternallyOwned">
            <summary>
            Whether the item is owned by an entity external to the user's enterprise.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.UploaderDisplayName">
            <summary>
            The user's name at the time of upload
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.Classification">
            <summary>
            Represents the classification information for a File on Box.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFile.DispositionAt">
            <summary>
            The retention expiration timestamp for the given file.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFileEventSource">
            <summary>
            There is an inconsistency in the events API where file sources have slightly different field names
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileEventSource.Type">
            <summary>
            The type of the event source
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileEventSource.Id">
            <summary>
            The unique id of the file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileEventSource.Name">
            <summary>
            The name of the file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileEventSource.Parent">
            <summary>
            The folder that contains this file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileEventSource.OwnedBy">
            <summary>
            The user who owns this item
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFileLock">
            <summary>
            Box representation of a file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileLock.CreatedAt">
            <summary>
            The time the lock was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileLock.CreatedBy">
            <summary>
            The user who created this lock
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileLock.ExpiresAt">
            <summary>
            The expiration date of this lock
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileLock.IsDownloadPrevented">
            <summary>
            Is download prevented for this lock?
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileLock.File">
            <summary>
            The file the lock applies to; only set when the lock appears as the
            source of an event.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFilePreview">
            <summary>
            Represents a file preview response.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFilePreview.PreviewStream">
            <summary>
            The stream of the preview.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFilePreview.ReturnedStatusCode">
            <summary>
            Returned HTTP status code from the preview request. Refer to API page for possible return values.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFilePreview.TotalPages">
            <summary>
            Total pages in the file to preview
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFilePreview.CurrentPage">
            <summary>
            The page number of this preview out of the total availabe pages in the file
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFileRequestObject">
            <summary>
            A standard representation of a file request, as returned from any file request API endpoints by default.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.CreatedAt">
            <summary>
            The date and time when the file request was created.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.CreatedBy">
            <summary>
            The user who created this file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.Description">
            <summary>
            The optional description of this file request. This is shown in the Box UI to users uploading files. This defaults to description of the file request that was copied to create this file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.Etag">
            <summary>
            The HTTP etag of this file. This can be used in combination with the If-Match header when updating a file request.
            By providing that header, a change will only be performed on the file request if the etag on the file request still matches the etag provided in the If-Match header.
            /// </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.ExpiresAt">
            <summary>
            The date after which a file request will no longer accept new submissions.
            After this date, the status will automatically be set to inactive.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.Folder">
            <summary>
            The folder that this file request is associated with. Files submitted through the file request form will be uploaded to this folder.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.IsDescriptionRequired">
            <summary>
            Whether a file request submitter is required to provide a description of the files they are submitting.
            When this setting is set to true, the Box UI will show a description field on the file request form.
            This defaults to setting of file request that was copied to create this file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.IsEmailRequired">
            <summary>
            Whether a file request submitter is required to provide their email address.
            When this setting is set to true, the Box UI will show an email field on the file request form.
            This defaults to setting of file request that was copied to create this file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.Status">
            <summary>
            Describes the status of the sign request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.Title">
            <summary>
            The title of file request.This is shown in the Box UI to users uploading files.
            This defaults to title of the file request that was copied to create this file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.UpdatedAt">
            <summary>
            The date and time when the file request was last updated.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.UpdatedBy">
            <summary>
            The user who last modified this file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequestObject.Url">
            <summary>
            The generated URL for this file request. This URL can be shared with users to let them upload files to the associated folder.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFileUploadSession">
            <summary>
            Represents box upload session
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileUploadSession.SessionExpiresAt">
            <summary>
            Session expiration time in RFC 3339.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileUploadSession.PartSize">
            <summary>
            The part sizein bytesthat must be used for all parts of this session. Only the last part is allowed to be of a smaller size.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileUploadSession.SessionEndpoints">
            <summary>
            URLs for all other possible calls to this session.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileUploadSession.TotalParts">
            <summary>
            Total number of parts.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileUploadSession.NumPartsProcessed">
            <summary>
            Number of parts processed.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFileVersion">
            <summary>
            Represents a version of a file on Box
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.Sha1">
            <summary>
            The sha1 hash of this file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.Size">
            <summary>
            The folder size in bytes
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.UploaderDisplayName">
            <summary>
            The user's name at the time of upload
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.CreatedAt">
            <summary>
            The time the item was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.ModifiedAt">
            <summary>
            The time the item or its contents were last modified
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.ModifiedBy">
            <summary>
            The user who last modified this item
            mini user object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.TrashedAt">
            <summary>
            The time the item or its contents were trashed at
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.TrashedBy">
            <summary>
            The user who trashed the contents of this item
            mini user object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.PurgedAt">
            <summary>
            The time the item or its contents were purged at
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.RestoredAt">
            <summary>
            The time the item or its contents were restored at
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.RestoredBy">
            <summary>
            The user who restored the contents of this item
            mini user object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersion.VersionNumber">
            <summary>
            The version number of the file version
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFileVersionLegalHold">
            <summary>
            Box representation of a file version legal hold
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersionLegalHold.FileVersion">
            <summary>
            The File-Version that is held.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersionLegalHold.File">
            <summary>
            The parent file of the File-Version that is held. Note that there is no guarantee that the current version of this File is held.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersionLegalHold.DeletedAt">
            <summary>
            Time that this File-Version-Legal-Hold was deleted. If this is deleted, the file-version is not under Legal Hold.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersionLegalHold.LegalHoldPolicyAssignments">
            <summary>
            List of assignments contributing to this Hold.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFileVersionRetention">
            <summary>
            Box representation of a file version retention
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersionRetention.FileVersion">
            <summary>
            The file version this file version retention was applied to.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersionRetention.File">
            <summary>
            The file this file version retention was applied to.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersionRetention.AppliedAt">
            <summary>
            The time that this file version retention was created.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersionRetention.DispositionAt">
            <summary>
            The time that the retention period expires on this file version retention.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileVersionRetention.WinningRetentionPolicy">
            <summary>
            The winning retention policy applied to this file_version_retention. A file version can have multiple retention policies applied.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFolder">
            <summary>
            Box representation of a folder
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.FolderUploadEmail">
            <summary>
            The upload email address for this folder
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.ItemCollection">
            <summary>
            A collection of mini file and folder objects contained in this folder
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.SyncState">
            <summary>
            Indicates whether this folder will be synced by the Box sync clients or not. Can be synced, not_synced, or partially_synced
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.HasCollaborations">
            <summary>
            Indicates whether this folder is a collaboration folder or not
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.Permissions">
            <summary>
            The available permissions on this folder
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.AllowedInviteeRoles">
            <summary>
            The available roles that can be used to invite people to the folder
            WARNING: This property is still in development and may change!
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.WatermarkInfo">
            <summary>
            Information about the watermark status of this folder.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.Metadata">
            <summary>
            Metadata on this file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.PurgedAt">
            <summary>
            Purged at timestamp for folder
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.ContentCreatedAt">
            <summary>
            Content created at timestamp for folder
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.ContentModifiedAt">
            <summary>
            Content modified at timestamp for folder
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.CanNonOwnersInvite">
            <summary>
            Can owners invite field for folder
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.AllowedSharedLinkAccessLevels">
            <summary>
            Allowed shared link access levels for folder
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.IsExternallyOwned">
            <summary>
            Is folder externally owned
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.ExpiresAt">
            <summary>
            The date when the folder will be automatically deleted due to item expiration settings.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.IsCollaborationRestrictedToEnterprise">
            <summary>
            The date when the folder will be automatically deleted due to item expiration settings.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolder.Classification">
            <summary>
            Represents the classification information for a File on Box.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFolderEventSource">
            <summary>
            Copy of BoxFileEventSource
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderEventSource.Type">
            <summary>
            The type of the event source
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderEventSource.Id">
            <summary>
            The unique id of the file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderEventSource.Name">
            <summary>
            The name of the file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderEventSource.Parent">
            <summary>
            The folder that contains this file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderEventSource.OwnedBy">
            <summary>
            The user who owns this item
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFolderLock">
            <summary>
            Box representation of a folder lock in box
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderLock.CreatedAt">
            <summary>
            The time the lock was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderLock.CreatedBy">
            <summary>
            The user who created this lock
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderLock.Folder">
            <summary>
            The folder that the lock applies to
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderLock.LockType">
            <summary>
            The lock type
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderLock.LockedOperations">
            <summary>
            The operations locked by a folder lock
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFolderLockOperations">
            <summary>
            Box representation of a operations that have been locked on a folder lock in box
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderLockOperations.Delete">
            <summary>
            Whether deleting the folder is restricted
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderLockOperations.Move">
            <summary>
            Whether deleting the folder is restricted
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxGroup">
            <summary>
            Box representation of a group
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroup.Name">
            <summary>
            The name of the group
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroup.CreatedAt">
            <summary>
            When this group was created on Box's servers
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroup.ModifiedAt">
            <summary>
            When this group was last updated on Box's servers
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroup.Description">
            <summary>
            A description of the group.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroup.Provenance">
            <summary>
            Used to track the external source where the group is coming from.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroup.ExternalSyncIdentifier">
            <summary>
            Used as a group identifier for groups coming from an external source.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroup.InvitabilityLevel">
            <summary>
            Specifies who can invite this group to folders. Retrieved through the fields parameter.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroup.MemberViewabilityLevel">
            <summary>
            Specifies who can view the members of this group. Retrieved through the fields parameter.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxGroupEventSource">
            <summary>
            There is an inconsistency in the events API where group sources have slightly different field names.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupEventSource.Id">
            <summary>
            The unique id of the group resource.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupEventSource.Type">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupEventSource.Name">
            <summary>
            The name of the group resource. 
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFileCollaborationEventSource.Id">
            <summary>
            The unique ID of the file being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFileCollaborationEventSource.Type">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFileCollaborationEventSource.Name">
            <summary>
            The name of the file being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFileCollaborationEventSource.GroupId">
            <summary>
            The unique ID of the group collaborating on the file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFileCollaborationEventSource.GroupName">
            <summary>
            The name of the group collaborating on the file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFileCollaborationEventSource.Parent">
            <summary>
            The parent folder of the file being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFileCollaborationEventSource.OwnedBy">
            <summary>
            The user who owns this item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFolderCollaborationEventSource.Id">
            <summary>
            The unique ID of the folder being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFolderCollaborationEventSource.Type">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFolderCollaborationEventSource.Name">
            <summary>
            The name of the folder being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFolderCollaborationEventSource.GroupId">
            <summary>
            The unique ID of the group collaborating on the folder.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFolderCollaborationEventSource.GroupName">
            <summary>
            The name of the group collaborating on the folder.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFolderCollaborationEventSource.Parent">
            <summary>
            The parent folder of the folder being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupFolderCollaborationEventSource.OwnedBy">
            <summary>
            The user who owns this item
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxGroupMembership">
            <summary>
            Box representation of a group membership
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupMembership.Role">
            <summary>
            The role of the user in this group
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupMembership.CreatedAt">
            <summary>
            Date and time this membership was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupMembership.ModifiedAt">
            <summary>
            Date and time this membership was modified
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupMembership.User">
            <summary>
            The user in this membership
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxGroupMembership.Group">
            <summary>
            The group in this membership
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxItem">
            <summary>
            Box representation of an item in box
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.SequenceId">
            <summary>
            A unique ID for use with the /events endpoint
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.ETag">
            <summary>
            A unique string identifying the version of this item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.Description">
            <summary>
            The description of the item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.Size">
            <summary>
            The folder size in bytes
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.PathCollection">
            <summary>
            The path of folders to this item, starting at the root
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.CreatedAt">
            <summary>
            The time the item was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.ModifiedAt">
            <summary>
            The time the item or its contents were last modified
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.TrashedAt">
            <summary>
            The time at which this item was put in the trash.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.CreatedBy">
            <summary>
            The user who created this item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.ModifiedBy">
            <summary>
            The user who last modified this item
            mini user object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.OwnedBy">
            <summary>
            The user who owns this item
            mini user object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.Parent">
            <summary>
            The folder that contains this one
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.ItemStatus">
            <summary>
            Whether this item is deleted or not
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.SharedLink">
            <summary>
            The shared link for this item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItem.Tags">
            <summary>
            The tag for this item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.PolicyName">
            <summary>
            Name of Legal Hold Policy. Max characters 254.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.Description">
            <summary>
            Description of Legal Hold Policy. Max characters 500.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.CreatedAt">
            <summary>
            A user object representing the author of the legal hold policy.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.CreatedBy">
            <summary>
            The time this legal hold policy was created.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.ModifiedAt">
            <summary>
            The time this legal hold policy was last modified.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.DeletedAt">
            <summary>
            The time this legal hold policy was deleted.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.FilterStartedAt">
            <summary>
            Date filter applies to Custodian assignments only.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.FilterEndedAt">
            <summary>
            Date filter applies to Custodian assignments only.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.AssignmentCounts">
            <summary>
            Gets the assignment counts.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicy.IsOngoing">
            <summary>
            Whether this assignment will continue applying to File Versions even after initialization.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyAssignment.LegalHoldPolicy">
            <summary>
            Gets the legal hold policy.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyAssignment.AssignedTo">
            <summary>
            Gets the user assigned to.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyAssignment.AssignedBy">
            <summary>
            Gets the user assigned by.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyAssignment.AssignedAt">
            <summary>
            The time this legal hold policy was assigned
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyAssignment.DeletedAt">
            <summary>
            The time this legal hold policy assignment was deleted
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataCascadePolicy.OwnerEnterprise">
            <summary>
            Gets the owner enterprise of the cascade policy.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataCascadePolicy.Parent">
            <summary>
            Gets the parent of the cascade policy.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataCascadePolicy.Scope">
            <summary>
            Gets the scope of the cascade policy.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataCascadePolicy.TemplateKey">
            <summary>
            Gets the template key of the cascade policy.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxMetadataFieldFilter">
            <summary>
            Box representation of a filter on a metadata field.  Used for assigning a retention policy to a metadata template.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataFieldFilter.Field">
            <summary>
            The field key
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataFieldFilter.Value">
            <summary>
            The value to filter against
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxMetadataQueryItem">
            <summary>
            Box item for a metadata query
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataQueryItem.Item">
            <summary>
            The Box item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataQueryItem.Metadata">
            <summary>
            The metadata
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxMetadataTemplate">
            <summary>
            Box representation of a metadata template
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplate.TemplateKey">
            <summary>
            A unique identifier for the template. The identifier must be unique across the scope of the enterprise to which the metadata template is being applied to. Defaults to a string derived from the displayName if no value is provided.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplate.Scope">
            <summary>
            The scope of the object. Only the enterprise scope is currently supported.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplate.DisplayName">
            <summary>
            The display name of the template.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplate.Fields">
            <summary>
            The ordered set of key:value pairs for the template.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplate.Hidden">
            <summary>
            Whether this template is hidden in the UI. Defaults to false.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplate.CopyInstanceOnItemCopy">
            <summary>
            Whether the metadata template instance will be copied when the Box item is copied.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxMetadataTemplateField">
            <summary>
            Box representation of a metadata template field
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplateField.Id">
            <summary>
            The unique ID of the metadata template field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplateField.Type">
            <summary>
            The data type of the field's value. Currently, there are four attributes supported by templates: string, enum, float, and date (RFC 3339).
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplateField.Key">
            <summary>
            A unique identifier for the field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplateField.DisplayName">
            <summary>
            The display name of the field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplateField.Hidden">
            <summary>
            Whether this field is hidden in the UI. Defaults to false.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplateField.Options">
            <summary>
            For fields of type enum this contains the option values
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxMetadataTemplateFieldOption">
            <summary>
            Box representation of a metadata template field option
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataTemplateFieldOption.Key">
            <summary>
            A unique possible value for the options type
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxMetadataTemplateUpdate">
            <summary>
            Box representation of a metadata template update
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxMetadataUpdate">
            <summary>
            Box representation of a metadata update
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataUpdate.Op">
            <summary>
            The operation type. Must be add, replace, remove , test, move, or copy.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataUpdate.Path">
            <summary>
            The path that designates the key, in the format of a JSON-Pointer. Since all keys are located at the root of the metadata instance, the key must be prefixed with a /. Special characters ~ and / in the key must be escaped according to JSON-Pointer specification. The value at the path must exist for the operation to be successful.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataUpdate.Value">
            <summary>
            The value to be set or tested. Required for add, replace, and test operations. For add, if value already exists, then previous value will be overwritten by the new value. For replace, the metadata value must exist before replacing.For test, the value of the existing metadata instance must match the specified value.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataUpdate.From">
            <summary>
            Required for move or copy. The path that designates the source key, in the format of a JSON-Pointer, formatted in the same way as path. Used in conjunction with path: from specifies the source, path specifies the destination.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxNotificationEmail">
            <summary>
            Box representation of a notification email object.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxNotificationEmailField">
            <summary>
            This is a request representation for Notification Email
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxPermission">
            <summary>
            Box representation of a permission
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPermission.CanDownload">
            <summary>
            Whether the item can be downloaded or not
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPermission.CanPreview">
            <summary>
            Whether the item can be previewed or not
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPermission.CanEdit">
            <summary>
            Whether the item can be edited or not
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxPreflightCheck">
            <summary>
            Box representation of a preflight check response
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPreflightCheck.UploadUrl">
            <summary>
            The upload URL to optionally use when uploading the file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPreflightCheck.UploadUri">
            <summary>
            Convenience method to create Uri instance from UploadUrl string value
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPreflightCheck.UploadToken">
            <summary>
            An optional access token to use to upload the file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPreflightCheck.Success">
            <summary>
            True if the upload would be successful;
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxRecentItem">
            <summary>
            Information about files that have been accessed by a user not long ago.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRecentItem.InteractionType">
            <summary>
            The most recent type of access the user performed on the item. Possible values: 
            item_preview item_upload item_comment
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRecentItem.InteractedAt">
            <summary>
            The time of the most recent interaction.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRecentItem.InteractionSharedLink">
            <summary>
            If the item was accessed through a shared link it will appear here, otherwise this will be null.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRecentItem.Item">
            <summary>
            The item that was recently accessed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentation.Content">
            <summary>
            Contains the url template of the representation requested
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentation.Info">
            <summary>
            The url info regarding the representation
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentation.Properties">
            <summary>
            The properties of the generated representation
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentation.Representation">
            <summary>
            The representation type requested 
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentation.Status">
            <summary>
            The status state of the representation requested
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationContent.UrlTemplate">
            <summary>
            The available representations url template
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationInfo.Url">
            <summary>
            The available representations information
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationProperties.Dimensions">
            <summary>
            The available dimension generated for representation
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationProperties.Paged">
            <summary>
            Boolean to indicate whether the representation has been paged
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationProperties.Thumb">
            <summary>
            Boolean to indicate whether representation is thumbnail or not
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationStatus.State">
            <summary>
            The status on generating the representation
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRestrictedTo.Scope">
            <summary>
            Gets or sets the scope.
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="P:Box.V2.Models.BoxRestrictedTo.RestrictedEntity">
            <summary>
            Gets or sets restricted entity.
            </summary>
            <value>
            The restricted entity.
            </value>
        </member>
        <member name="T:Box.V2.Models.BoxRetentionPolicy">
            <summary>
            Box representation of a retention policy
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.PolicyName">
            <summary>
            The name given to the retention policy
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.PolicyType">
            <summary>
            The type of the retention policy. A retention policy type can either be finite, where a specific amount of time to retain the content is known upfront, or indefinite, where the amount of time to retain the content is still unknown.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.RetentionLength">
            <summary>
            The length of the retention policy. This length specifies the duration in days that the retention policy will be active for after being assigned to content.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.DispositionAction">
            <summary>
            The disposition action of the retention policy. This action can be permanently_delete, which will cause the content retained by the policy to be permanently deleted, or remove_retention, which will lift the retention policy from the content, allowing it to be deleted by users, once the retention policy time period has passed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.Status">
            <summary>
            The status of a retention policy. The status of a policy will be active, unless explicitly retired by an administrator, in which case the status will be retired. Once a policy has been retired, it cannot become active again.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.CreatedBy">
            <summary>
            A mini user object representing the user that created the retention policy.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.CreatedAt">
            <summary>
            The time that the retention policy was created.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.ModifiedAt">
            <summary>
            The time that the retention policy was last modified.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.CanOwnerExtendRetention">
            <summary>
            Whether owners of items under the policy can extend the retention period.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.AreOwnersNotified">
            <summary>
            Whether owners and co-owners of items under the policy are notified when the retention period is about to end.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.CustomNotificationRecipients">
            <summary>
            List of additional users who will be notified when the retention period is about to end.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.RetentionType">
            <summary>
            The type of retention policy. Value is one of modifiable or non-modifiable.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicy.Description">
            <summary>
            The additional text description of the retention policy.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxRetentionPolicyAssignment">
            <summary>
            Box representation of a retention assignment
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicyAssignment.RetentionPolicy">
            <summary>
            A mini retention policy object representing the retention policy that has been assigned to this content.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicyAssignment.AssignedTo">
            <summary>
            The type and id of the content that is under retention. The type can either be folder or enterprise.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicyAssignment.AssignedBy">
            <summary>
            A mini user object representing the user that created the retention policy assignment.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicyAssignment.AssignedAt">
            <summary>
            The time that the retention policy assignment was created.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicyAssignment.FilterFields">
            <summary>
            Optional field filters for an assignment to a metadata template
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRetentionPolicyAssignment.StartDateField">
            <summary>
            Id of Metadata field which will be used to specify the start date for the retention policy.
            Alternatively, pass "upload_date" as value to use the date when the file was uploaded to Box.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSearchResult.Type">
            <summary>
            The type of the item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSearchResult.AccessibleViaSharedLink">
            <summary>
            The optional shared link through which the user has access to this item.
            This value is only returned for items for which the user has recently accessed the file through a shared link. For all other items this value will return null.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSearchResult.Item">
            <summary>
            The Box item
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSessionEndpoint">
            <summary>
            Represents box upload session
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionEndpoint.ListParts">
            <summary>
            Endpoint to list parts.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionEndpoint.Commit">
            <summary>
            Endpoint to commit.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionEndpoint.LogEvent">
            <summary>
            Endpoint to log event.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionEndpoint.UploadPart">
            <summary>
            Endpoint to upload part.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionEndpoint.Abort">
            <summary>
            Endpoint to abort.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionEndpoint.Status">
            <summary>
            Endpoint to get status.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSessionParts">
            <summary>
            Represents the Parts uploaded in a Session.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionParts.Parts">
            <summary>
            List of session parts uploaded.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxUploadPartResponse">
            <summary>
            Response of upload part.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUploadPartResponse.Part">
            <summary>
            List of session parts uploaded.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSessionPartInfo">
            <summary>
            Represents a single part of a session.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionPartInfo.PartId">
            <summary>
            String representing the Unique 8 digit part ID.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionPartInfo.Offset">
            <summary>
            Offset in bytes for the file part that was uploaded.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionPartInfo.Size">
            <summary>
            Size in bytes for the file part that was uploaded.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionPartInfo.Sha1">
            <summary>
            String with hexadecimal representation of part’s SHA-1.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSessionUploadStatus">
            <summary>
            Represents box upload session.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionUploadStatus.SessionExpiryDate">
            <summary>
            Expiry in DateTimeOffset format for the upload session.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionUploadStatus.PartSize">
            <summary>
            Size in bytes for the file parts that was returned in Create Session.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionUploadStatus.TotalParts">
            <summary>
            Total number of parts that are uploaded in the session.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSessionUploadStatus.NumberOfPartsProcessed">
            <summary>
            Total number of parts that have been processed in the backend.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSharedLink">
            <summary>
            Box representation of a shared link
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.Url">
            <summary>
            The Url of the shared link
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.DownloadUrl">
            <summary>
            The Url of the download
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.VanityUrl">
            <summary>
            An easily readible url
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.IsPasswordEnabled">
            <summary>
            Whether or not a password is enabled
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.UnsharedAt">
            <summary>
            When the item's share link will expire
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.DownloadCount">
            <summary>
            Number of downloads
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.PreviewCount">
            <summary>
            Number of previews 
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.Access">
            <summary>
            Type of access
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.Permissions">
            <summary>
            Type of permissions
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.VanityName">
            <summary>
            Defines a custom vanity name to use in the shared link URL, for example https://app.box.com/v/my-shared-link.
            Custom URLs should not be used when sharing sensitive content as vanity URLs are a lot easier to guess than regular shared links.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLink.EffectiveAccess">
            <summary>
            The effective access of shared link
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequest">
            <summary>
            A standard representation of a sign request, as returned from any Box Sign API endpoints by default.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.AreRemindersEnabled">
            <summary>
            Reminds signers to sign a document on day 3, 8, 13 and 18. Reminders are only sent to outstanding signers.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.AreTextSignaturesEnabled">
            <summary>
            Disables the usage of signatures generated by typing (text).
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.AutoExpireAt">
            <summary>
            Uses days_valid to calculate the date and time, in GMT, the sign request will expire if unsigned.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.DaysValid">
            <summary>
            Number of days after which this request will automatically expire if not completed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.EmailMessage">
            <summary>
            Message to include in sign request email. The field is cleaned through sanitization of specific characters.
            However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email.
            The message may contain the following html tags including a, abbr, acronym, b, blockquote, code, em, i, ul, li, ol, and strong.
            Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed.
            If this field is not passed, a default message will be used.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.EmailSubject">
            <summary>
            Subject of sign request email.This is cleaned by sign request.If this field is not passed, a default subject will be used.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.ExternalId">
            <summary>
            This can be used to reference an ID in an external system that the sign request is related to.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.IsDocumentPreparationNeeded">
            <summary>
            Indicates if the sender should receive a prepare_url in the response to complete document preparation via UI.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.ParentFolder">
            <summary>
            The destination folder to place final, signed document and signing log. Only ID and type fields are required. The root folder, folder ID 0, cannot be used.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.PrefillTags">
            <summary>
            When a document contains sign related tags in the content, you can prefill them using this prefill_tags by referencing the 'id' of the tag as the external_id field of the prefill tag.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.PrepareUrl">
            <summary>
            This URL is returned if is_document_preparation_needed is set to true in the request. It is used to prepare the sign request via UI. The sign request is not sent until preparation is complete.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.SignFiles">
            <summary>
            List of files that will be signed, which are copies of the original source files. A new version of these files are created as signers sign and can be downloaded at any point in the signing process.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.Signers">
            <summary>
            Array of signers for the sign request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.SigningLog">
            <summary>
            Reference to a file that holds a log of all signer activity for the request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.SourceFiles">
            <summary>
            List of files to create a signing document from. This is currently limited to ten files. Only the ID and type fields are required for each file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.Status">
            <summary>
            Describes the status of the sign request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.DeclinedRedirectUrl">
            <summary>
            URL to redirect the signer to if they decline to sign the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.RedirectUrl">
            <summary>
            URL to redirect the signer to after they sign the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequest.TemplateId">
            <summary>
            The ID of the template that was used to create this sign request.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequestStatus">
            <summary>
            Describes the status of the sign request.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequestPrefillTag">
            <summary>
            When a document contains sign related tags in the content, you can prefill them using this prefill_tags by referencing the 'id' of the tag as the external_id field of the prefill tag.
            </summary>
        </member>
        <member name="M:Box.V2.Models.BoxSignRequestPrefillTag.#ctor(System.String,System.Boolean)">
            <summary>
            Creates prefill tag with checkbox value.
            </summary>
            <param name="documentTagId">References the ID of a specific tag contained in a file of the sign request.</param>
            <param name="checkboxValue">Checkbox prefill value.</param>
            <returns>A prefill tag</returns>
        </member>
        <member name="M:Box.V2.Models.BoxSignRequestPrefillTag.#ctor(System.String,System.DateTimeOffset)">
            <summary>
            Creates prefill tag with date value.
            </summary>
            <param name="documentTagId">References the ID of a specific tag contained in a file of the sign request.</param>
            <param name="dateValue">Date prefill value.</param>
            <returns>A prefill tag</returns>
        </member>
        <member name="M:Box.V2.Models.BoxSignRequestPrefillTag.#ctor(System.String,System.String)">
            <summary>
            Creates prefill tag with text value.
            </summary>
            <param name="documentTagId">References the ID of a specific tag contained in a file of the sign request.</param>
            <param name="textValue">Text prefill value.</param>
            <returns>A prefill tag</returns>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestPrefillTag.CheckboxValue">
            <summary>
            Checkbox prefill value.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestPrefillTag.DateValue">
            <summary>
            Date prefill value.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestPrefillTag.DocumentTagId">
            <summary>
            This references the ID of a specific tag contained in a file of the sign request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestPrefillTag.TextValue">
            <summary>
            Text prefill value.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequestSigner">
            <summary>
            Signers for the sign request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.Email">
            <summary>
            Email address of the signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.EmbedUrl">
            <summary>
            URL to direct a signer to for signing.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.EmbedUrlExternalUserId">
            <summary>
            User ID for the signer in an external application responsible for authentication when accessing the embed URL.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.HasViewedDocument">
            <summary>
            Set to true if the signer views the document
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.Inputs">
            <summary>
            Represents a type of inputs.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.IsInPerson">
            <summary>
            Used in combination with an embed URL for a sender. After the sender signs, they will be redirected to the next in_person signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.Order">
            <summary>
            Order of the signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.Role">
            <summary>
            Defines the role of the signer in the sign request. A signer must sign the document and an approver must approve the document.
            A final_copy_reader only receives the final signed document and signing log.
            Value is one of signer,approver,final_copy_reader
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.SignerDecision">
            <summary>
            Final decision made by the signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.DeclinedRedirectUrl">
            <summary>
            URL to redirect the signer to if they decline to sign the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.RedirectUrl">
            <summary>
            URL to redirect the signer to after they sign the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.IframeableEmbedUrl">
            <summary>
            This URL is specifically designed for signing documents within an HTML iframe tag.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.LoginRequired">
            <summary>
            If set to true, signer will need to login to a Box account before signing the request.
            If the signer does not have an existing account, they will have an option to create a free Box account.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.Password">
            <summary>
            If set, the signer is required to enter the password before they are able to sign a document. This field is write only.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.SignerGroupId">
            <summary>
            If set, signers who have the same group ID will be assigned to the same input.
            A signer group is expected to have more than one signer.
            When a group contains fewer than two signers, it will be converted to a single signer and the group will be removed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSigner.VerificationPhoneNumber">
            <summary>
            If set, this phone number is be used to verify the signer via two factor authentication before they are able to sign the document.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequestSignerRole">
            <summary>
            Defines the role of the signer in the sign request. A signer must sign the document and an approver must approve the document.
            A final_copy_reader only receives the final signed document and signing log.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequestSignerInput">
            <summary>
            Represents a type of input.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignerInput.Type">
            <summary>
            Type of input.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignerInput.CheckboxValue">
            <summary>
            Checkbox prefill value.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignerInput.ContentType">
            <summary>
            Content type of input.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignerInput.DateValue">
            <summary>
            Date prefill value.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignerInput.DocumentTagId">
            <summary>
            This references the ID of a specific tag contained in a file of the sign request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignerInput.PageIndex">
            <summary>
            Index of page that the input is on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignerInput.TextValue">
            <summary>
            Text prefill value.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequestSingerInputType">
            <summary>
            Type of input.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequestSingerInputContentType">
            <summary>
            Content type of input.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequestSignerDecision">
            <summary>
            Final decision made by the signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignerDecision.Type">
            <summary>
            Type of decision made by the signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignerDecision.FinalizedAt">
            <summary>
            Date and Time that the decision was made.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequestSingerDecisionType">
            <summary>
            Type of decision made by the signer.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignRequestSignFiles">
            <summary>
            Files that will be signed, which are copies of the original source files.
            A new version of these files are created as signers sign and can be downloaded at any point in the signing process.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignFiles.Files">
            <summary>
            Files that will be signed, which are copies of the original source files.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignRequestSignFiles.IsReadyForDownload">
            <summary>
            Indicates whether the sign_files documents are processing and the PDFs may be out of date. A change to any document requires processing on all sign_files.
            We recommended waiting until processing is finished (and this value is true) before downloading the PDFs.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignTemplate">
            <summary>
            A standard representation of a sign template, as returned from any Box Sign Templates API endpoints by default.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.AdditionalInfo">
            <summary>
            Additional information on which fields are required and which fields are not editable.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.AreEmailSettingsLocked">
            <summary>
            Indicates if the template email settings are editable or not.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.AreFieldsLocked">
            <summary>
            Indicates if the template input fields are editable or not.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.AreFilesLocked">
            <summary>
            Indicates if the template files are editable or not. This includes deleting or renaming template files.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.AreOptionsLocked">
            <summary>
            Indicates if the template document options are editable or not, for example renaming the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.AreRecipientsLocked">
            <summary>
            Indicates if the template signers are editable or not.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.CustomBranding">
            <summary>
            Custom branding applied to notifications and signature requests.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.DaysValid">
            <summary>
            Set the number of days after which the created signature request will automatically expire if not completed.
            By default, we do not apply any expiration date on signature requests, and the signature request does not expire.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.EmailMessage">
            <summary>
            Message to include in signature request email. The field is cleaned through sanitization of specific characters.
            However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email.
            The message may contain the following html tags including a, abbr, acronym, b, blockquote, code, em, i, ul, li, ol, and strong.
            Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed.
            If this field is not passed, a default message will be used.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.EmailSubject">
            <summary>
            Subject of signature request email. This is cleaned by signature request. If this field is not passed, a default subject will be used.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.Name">
            <summary>
            Name of the template.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.ParentFolder">
            <summary>
            The destination folder to place final, signed document and signing log.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.ReadySignLink">
            <summary>
            Box's ready-sign link feature enables you to create a link to a signature request that you've created from a template.
            Use this link when you want to post a signature request on a public form — such as an email, social media post,
            or web page — without knowing who the signers will be.
            Note: The ready-sign link feature is limited to Enterprise Plus customers and not available to Box Verified Enterprises.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.Signers">
            <summary>
            List of signers for the template.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplate.SourceFiles">
            <summary>
            List of files to be used in the template.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignTemplateAdditionalInfo">
            <summary>
            Additional information on which fields are required and which fields are not editable.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateAdditionalInfo.NonEditable">
            <summary>
            List of fields that are not editable.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateAdditionalInfo.Required">
            <summary>
            Required fields.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateAdditionalInfoRequired.Signers">
            <summary>
            Required signer fields.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignTemplateCustomBranding">
            <summary>
            Custom branding applied to notifications and signature requests.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateCustomBranding.BrandingColor">
            <summary>
            Custom branding color in hex.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateCustomBranding.CompanyName">
            <summary>
            Name of the company.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateCustomBranding.EmailFooterText">
            <summary>
            Custom email footer text.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateCustomBranding.LogoUri">
            <summary>
            Custom branding logo URI in the form of a base64 image.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateReadySignLink.FolderId">
            <summary>
            The destination folder to place final, signed document and signing log.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateReadySignLink.Instructions">
            <summary>
            Extra instructions for all signers.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateReadySignLink.IsActive">
            <summary>
            Whether the ready sign link is enabled or not.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateReadySignLink.IsNotificationDisabled">
            <summary>
            Whether to disable notifications when a signer has signed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateReadySignLink.Name">
            <summary>
            The name of the ready sign link.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateReadySignLink.Url">
            <summary>
            The URL that can be sent to signers.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignTemplateSigner">
            <summary>
            A representation of a signer on a sign template.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSigner.Email">
            <summary>
            The email address of the signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSigner.Inputs">
            <summary>
            The input fields for the signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSigner.IsInPerson">
            <summary>
            Used in combination with an embed URL for a sender.
            After the sender signs, they will be redirected to the next in_person signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSigner.Order">
            <summary>
            The order of the signer in the list of signers.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSigner.Role">
            <summary>
            The role of the signer.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignTemplateSignerRole">
            <summary>
            The role of the signer.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignTemplateSignerInput">
            <summary>
            A representation of an input field for a signer on a sign template.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.Type">
            <summary>
            The type of input field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.CheckboxValue">
            <summary>
            The value of the checkbox.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.ContentType">
            <summary>
            The content type of the input field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.Coordinates">
            <summary>
            The coordinates of the input field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.DateValue">
            <summary>
            The value of the date.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.Dimensions">
            <summary>
            The dimensions of the input field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.DocumentId">
            <summary>
            The ID of the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.DocumentTagId">
            <summary>
            The ID of the document tag.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.DropdownChoices">
            <summary>
            The choices for the dropdown.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.GroupId">
            <summary>
            The ID of the group.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.IsRequired">
            <summary>
            Indicates if the input field is required.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.PageIndex">
            <summary>
            The index of the page.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.TextValue">
            <summary>
            The value of the text.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInput.Label">
            <summary>
            The label field is used especially for text, attachment, radio, and checkbox type inputs.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignTemplateSignerInputType">
            <summary>
            The type of input field.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignTemplateSignerInputContentType">
            <summary>
            The content type of the input field.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignTemplateSignerInputCoordinates">
            <summary>
            The coordinates of the input field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInputCoordinates.X">
            <summary>
            The x coordinate of the input field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInputCoordinates.Y">
            <summary>
            The y coordinate of the input field.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSignTemplateSignerInputDimensions">
            <summary>
            The dimensions of the input field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInputDimensions.Height">
            <summary>
            The height of the input field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSignTemplateSignerInputDimensions.Width">
            <summary>
            The width of the input field.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxStoragePolicy.Name">
            <summary>
            The name of the Box Storage Policy.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxStoragePolicyAssignment.BoxStoragePolicy">
            <summary>
            The storage policy to assign to user.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxStoragePolicyAssignment.AssignedTo">
            <summary>
            The Box User to assign the storage policy to.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTask.DueAt">
            <summary>
            Date of task completion
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTask.Item">
            <summary>
            Mini file object. The file associated with this task
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTask.Action">
            <summary>
            Gets the action.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTask.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTask.IsCompleted">
            <summary>
            Gets a value indicating whether this task is completed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTask.CreatedBy">
            <summary>
            The user who created this item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTask.TaskAssignments">
            <summary>
            Gets the task assignments.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTask.CompletionRule">
            <summary>
            Gets value indicating which assignees need to complete this task before the task is considered completed.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxTaskAssignment">
            <summary>
             Assignment for a given task
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignment.Item">
            <summary>
            Gets assigned item 
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignment.AssignedTo">
            <summary>
            Gets user assigned to.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignment.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignment.CompletedAt">
            <summary>
            Completed at.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignment.AssignedAt">
            <summary>
            Assigned at.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignment.RemindedAt">
            <summary>
            Reminded at.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignment.ResolutionState">
            <summary>
            Gets the state of the resolution as an Enum.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignment.Status">
            <summary>
            Gets the resolution status of the task assignment.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignment.LocalizedStatus">
            <summary>
            Gets the localized/human-readable resolution status of the task assignment in a string format.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignment.AssignedBy">
             <summary>
            Gets user assigned by.
             </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfService.Status">
            <summary>
            The status of the terms of service object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfService.Enterprise">
            <summary>
            The enterprise the terms of service object is associated with
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfService.TosType">
            <summary>
            The type of the terms of service object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfService.Text">
            <summary>
            The text description of the terms of service object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfService.CreatedAt">
            <summary>
            The time this terms of service was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfService.ModifiedAt">
            <summary>
            The time this terms of service was modified
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServiceUserStatuses.TermsOfService">
            <summary>
            The Terms of Service object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServiceUserStatuses.User">
            <summary>
            The Box user this Terms of Service is associated with
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServiceUserStatuses.IsAccepted">
            <summary>
            The acceptance status of the Terms of Service object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServiceUserStatuses.CreatedAt">
            <summary>
            The time this terms of service was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServiceUserStatuses.ModifiedAt">
            <summary>
            The time this terms of service was modified
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxTrackingCode">
            <summary>
            Box representation of a tracking code
            </summary>
        </member>
        <member name="M:Box.V2.Models.BoxTrackingCode.#ctor(System.String,System.String)">
            <summary>
            Constructor for creating new BoxTrackingCodes with a given name and value, such that they can be created and passed in BoxUserRequests
            </summary>
            <param name="name">Name of a tracking code registered by the enterprise administrator.</param>
            <param name="value">Value of the tracking code.</param>
        </member>
        <member name="P:Box.V2.Models.BoxTrackingCode.Type">
            <summary>
            The type of the tracking code, should be tracking_code
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTrackingCode.Name">
            <summary>
            The name of the tracking code
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTrackingCode.Value">
            <summary>
            The value of the tracking code
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxUploadAvatarResponse">
            <summary>
            Box representation of a upload avatar response
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUploadAvatarResponse.PicUrls">
            <summary>
            Property holding avatar Urls
            </summary>
        </member>
        <member name="T:Box.V2.Models.PicUrls">
            <summary>
            Box representation of a pic urls part of upload avatar response
            </summary>
        </member>
        <member name="P:Box.V2.Models.PicUrls.Preview">
            <summary>
            URL with the preview of Avatar
            </summary>
        </member>
        <member name="P:Box.V2.Models.PicUrls.Small">
            <summary>
            URL with the small representation of Avatar
            </summary>
        </member>
        <member name="P:Box.V2.Models.PicUrls.Large">
            <summary>
            URL with the large representation of Avatar
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxUser">
            <summary>
            Box representation of a user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Name">
            <summary>
            The name of this user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Login">
            <summary>
            The email address this user uses to login
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.CreatedAt">
            <summary>
            The time this user was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.ModifiedAt">
            <summary>
            The time this user was last modified
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Role">
            <summary>
            This user’s enterprise role. Can be admin, coadmin, or user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Language">
            <summary>
            The language of this user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.SpaceAmount">
            <summary>
            The user’s total available space amount in bytes
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.SpaceUsed">
            <summary>
            The amount of space in use by the user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.MaxUploadSize">
            <summary>
            The maximum individual file size in bytes this user can have
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.TrackingCodes">
            <summary>
            An array of key/value pairs set by the user’s admin
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.CanSeeManagedUsers">
            <summary>
            Whether this user can see other enterprise users in its contact list
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.IsSyncEnabled">
            <summary>
            Whether or not this user can use Box Sync
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Status">
            <summary>
            Can be active or inactive
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.JobTitle">
            <summary>
            The user’s job title
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Phone">
            <summary>
            The user’s phone number
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Address">
            <summary>
            The user’s address
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.AvatarUrl">
            <summary>
            URL of this user’s avatar image
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.IsExemptFromDeviceLimits">
            <summary>
            Whether to exempt this user from Enterprise device limits
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.IsExemptFromLoginVerification">
            <summary>
            Whether or not this user must use two-factor authentication
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Enterprise">
            <summary>
            Mini representation of this user’s enterprise, including the ID of its enterprise
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.IsPlatformAccessOnly">
            <summary>
            Whether or not the user is an App User (platform)
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Timezone">
            <summary>
            The user's timezone
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.IsExternalCollabRestricted">
            <summary>
            Whether the user has been restricted from collaborating with parties outside their enterprise
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Tags">
            <summary>
            Tags for all files and folders owned by the user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.Hostname">
            <summary>
            The root (protocol, subdomain, domain) of any Box URLs that need to be generated for the user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.ExternalAppUserId">
            <summary>
            The external app user id that has been set for the app user.  An arbitrary identifier that can be used by external user sync tools to link this Box User to an external user.
            Example values of this field could be an Active Directory Object ID or primary key from a user-tracking database. We recommend use of this field in order to avoid issues when email addresses and names are updated in either Box or external systems.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUser.NotificationEmail">
            <summary>
            An alternate notification email address to which email notifications are sent. When it's confirmed, this will be the email address to which notifications are sent instead
            of to the primary email address.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFileCollaborationEventSource.Id">
            <summary>
            The unique ID of the file being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFileCollaborationEventSource.Type">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFileCollaborationEventSource.Name">
            <summary>
            The name of the file being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFileCollaborationEventSource.UserId">
            <summary>
            The unique ID of the user collaborating on the file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFileCollaborationEventSource.UserName">
            <summary>
            The name of the user collaborating on the file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFileCollaborationEventSource.UserEmail">
            <summary>
            The email of the user collaborating on the file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFileCollaborationEventSource.Parent">
            <summary>
            The parent folder of the file being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFileCollaborationEventSource.OwnedBy">
            <summary>
            The user who owns this item
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxUserFolderCollaborationEventSource">
            <summary>
            There is an inconsistency in the events API where file sources have slightly different field names.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFolderCollaborationEventSource.Id">
            <summary>
            The unique ID of the folder being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFolderCollaborationEventSource.Type">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFolderCollaborationEventSource.Name">
            <summary>
            The name of the folder  being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFolderCollaborationEventSource.UserId">
            <summary>
            The Id of the user collaborating on the folder.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFolderCollaborationEventSource.UserName">
            <summary>
            The name of the user collaborating on the folder.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFolderCollaborationEventSource.UserEmail">
            <summary>
            The email of the user collaborating on the folder.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFolderCollaborationEventSource.Parent">
            <summary>
            The parent folder of the folder being collaborated on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserFolderCollaborationEventSource.OwnedBy">
            <summary>
            The user who owns this item
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxUserInvite">
            <summary>
            Box representation of a user invite
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserInvite.ActionableBy">
            <summary>
            Box representation of who can act on this user invitation
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserInvite.InvitedTo">
            <summary>
            Box representation of the enterprise information of a user invitation
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserInvite.InvitedBy">
            <summary>
            Box representation of the owner of a user invitation
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserInvite.Status">
            <summary>
            The status of this invite. Can be accepted, pending, or rejected
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserInvite.CreatedAt">
            <summary>
            When this invite was created on Box's servers
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserInvite.ModifiedAt">
            <summary>
            When this invite was last updated on Box's servers
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWatermark.CreatedAt">
            <summary>
            The time this watermark was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWatermark.ModifiedAt">
            <summary>
            The time this watermark was modified
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWatermarkInfo.IsWatermarked">
            <summary>
             Whether it is watermarked or not.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWatermarkResponse.Watermark">
            <summary>
            Watermark wrapper
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebhook.Target">
            <summary>
            The target item for this webhook
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebhook.CreatedBy">
            <summary>
            The user who created this webhook
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebhook.CreatedAt">
            <summary>
            The time the webhook was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebhook.Address">
            <summary>
            The time the webhook was created
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebhook.Triggers">
            <summary>
            The available roles that can be used to invite people to the folder
            WARNING: This property is still in development and may change!
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxWebLinkEventSource">
            <summary>
            There is an inconsistency in the events API where file sources have slightly different field names
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebLinkEventSource.Type">
            <summary>
            The type of the event source
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebLinkEventSource.Id">
            <summary>
            The unique id of the file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebLinkEventSource.Name">
            <summary>
            The name of the file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebLinkEventSource.Parent">
            <summary>
            The folder that contains this file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebLinkEventSource.OwnedBy">
            <summary>
            The user who owns this item
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxZip">
            <summary>
            Box representation of a created zip
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxZip.DownloadUrl">
            <summary>
            A URL to download the zip from
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxZip.StatusUrl">
            <summary>
            A URL to get the download status of a zip
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxZip.ExpiresAt">
            <summary>
            The date after which the zip can no longer be downloaded
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxZip.NameConflicts">
            <summary>
            A list of naming conflicts among the files and folders in the zip
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxZipConflict">
            <summary>
            Represents a conflict that occurs between items that have the same name.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxZipConflict.items">
            <summary>
            The items that have a conflict
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxZipConflictItem">
            <summary>
            Box representation of a naming conflict creating a zip file for an item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxZipConflictItem.Id">
            <summary>
            The Id of the item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxZipConflictItem.Type">
            <summary>
            The type of the item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxZipConflictItem.OriginalName">
            <summary>
            The original name of the item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxZipConflictItem.DownloadName">
            <summary>
            the new name of the item when it downloads that resolves the conflict
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxZipDownloadStatus">
            <summary>
            Box representation of the status of a download for a zip file
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxZipDownloadStatus.TotalFileCount">
            <summary>
            The total number of files in the zip file
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxZipDownloadStatus.DownloadedlFileCount">
            <summary>
            The number of files in the zip that were downloaded
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxZipDownloadStatus.SkippedFileCount">
            <summary>
            The number of files in the zip that were skipped when downloading
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxZipDownloadStatus.SkippedFolderCount">
            <summary>
            The number of folders in the zip that were skipped when downloading
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxZipDownloadStatus.State">
            <summary>
            The state of the download of the zip file
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxZipDownloadStatus.NameConflicts">
            <summary>
            A list of naming conflicts among the files and folders in the zip. This is manually appended in the BoxFilesManager.DownloadZip() method.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxZipDownloadState">
            <summary>
            The possible download states of a zip
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxAssignmentRequest.Id">
            <summary>
            The ID of the user this assignment is for.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxAssignmentRequest.Login">
            <summary>
            The login email address for the user this assignment is for.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxFileRequestCopyRequest">
            <summary>
            Used to copy FileRequest.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestCopyRequest.Description">
            <summary>
            The optional description of this file request. This is shown in the Box UI to users uploading files.
            This defaults to description of the file request that was copied to create this file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestCopyRequest.ExpiresAt">
            <summary>
            The date after which a file request will no longer accept new submissions.
            After this date, the status will automatically be set to inactive.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestCopyRequest.Folder">
            <summary>
            The folder to associate the new file request to.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestCopyRequest.IsDescriptionRequired">
            <summary>
            Whether a file request submitter is required to provide a description of the files they are submitting.
            When this setting is set to true, the Box UI will show a description field on the file request form.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestCopyRequest.IsEmailRequired">
            <summary>
            Whether a file request submitter is required to provide their email address.
            When this setting is set to true, the Box UI will show an email field on the file request form.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestCopyRequest.Status">
            <summary>
            An optional new status of the file request.
            When the status is set to inactive, the file request will no longer accept new submissions, and any visitor to the file request URL will receive a HTTP 404 status code.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestCopyRequest.Title">
            <summary>
            An optional new title for the file request.This can be used to change the title of the file request.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxFileRequestUpdateRequest">
            <summary>
            Used to create a BoxFileReuqest CopyRequest.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestUpdateRequest.Description">
            <summary>
            An optional new description for the file request.This can be used to change the description of the file request.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestUpdateRequest.ExpiresAt">
            <summary>
            The date after which a file request will no longer accept new submissions.
            After this date, the status will automatically be set to inactive.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestUpdateRequest.IsDescriptionRequired">
            <summary>
            Whether a file request submitter is required to provide a description of the files they are submitting.
            When this setting is set to true, the Box UI will show a description field on the file request form.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestUpdateRequest.IsEmailRequired">
            <summary>
            Whether a file request submitter is required to provide their email address.
            When this setting is set to true, the Box UI will show an email field on the file request form.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestUpdateRequest.Status">
            <summary>
            An optional new status of the file request.
            When the status is set to inactive, the file request will no longer accept new submissions, and any visitor to the file request URL will receive a HTTP 404 status code.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileRequestUpdateRequest.Title">
            <summary>
            An optional new title for the file request.This can be used to change the title of the file request.
            This will default to the value on the existing file request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileVersionRetentionRequest.FileId">
            <summary>
            A file id to filter the file version retentions by.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileVersionRetentionRequest.FileVersionId">
            <summary>
            A file version id to filter the file version retentions by.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileVersionRetentionRequest.PolicyId">
            <summary>
            A policy id to filter the file version retentions by.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileVersionRetentionRequest.DispositionAction">
            <summary>
            The disposition action of the retention policy. This action can be permanently_delete, which will cause the content retained by the policy to be permanently deleted, or remove_retention, which will lift the retention policy from the content, allowing it to be deleted by users, once the retention policy time period has passed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileVersionRetentionRequest.Limit">
            <summary>
            The maximum number of items to return in a page
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxFileVersionRetentionRequest.Marker">
            <summary>
            Base 64 encoded string that represents where the paging should being. It should be left blank to begin paging.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxGroupMembershipRequest">
            <summary>
            The request for adding a user to a group
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxGroupMembershipRequest.User">
            <summary>
            The User to add to the group. Only the Id should be set for the user
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxGroupMembershipRequest.Group">
            <summary>
            The group to add the user to. Only group Id should be set for the specified group.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxGroupMembershipRequest.Role">
            <summary>
            The role of the user in this group. Default is member.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxGroupRequest">
            <summary>
            The request class for making group requests.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxGroupRequest.Id">
            <summary>
            The id of the group.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxGroupRequest.Name">
            <summary>
            The name of the group.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxGroupRequest.Description">
            <summary>
            A description of the group.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxGroupRequest.Provenance">
            <summary>
            Used to track the external source where the group is coming from.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxGroupRequest.ExternalSyncIdentifier">
            <summary>
            Used as a group identifier for groups coming from an external source.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxGroupRequest.InvitabilityLevel">
            <summary>
            Specifies who can invite this group to folders. Retrieved through the fields parameter.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxGroupRequest.MemberViewabilityLevel">
            <summary>
            Specifies who can view the members of this group. Retrieved through the fields parameter.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxMetadataFilterRequest">
            <summary>
            Filter for a specific metadata template for files with metadata object associations.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataFilterRequest.TemplateKey">
            <summary>
            The key name of the template you want to search for. Currently, only searching for one template at a time is supported
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataFilterRequest.Scope">
            <summary>
            The scope of the template. Currently, only enterprise and global are supported
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataFilterRequest.Filters">
            <summary>
            Child of mdfilters. Keys and values of the template you want to search within. For numbers and dates, you can include an (inclusive) upper bound parameter lt or (inclusive) lower bound parameter gt or both bounds. An example filter for a “contractExpiration” on or before 08-01-16 would be listed as {"contractExpiration":{"lt":"2016-08-01T00:00-00:00"}}
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxMetadataQueryRequest">
            <summary>
            An object representing the request to execute Metadata query.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataQueryRequest.From">
            <summary>
            The template used in the query. Must be in the form scope.templateKey
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataQueryRequest.AncestorFolderId">
            <summary>
            The folder_id to which to restrain the query
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataQueryRequest.Query">
            <summary>
            The logical expression of the query
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataQueryRequest.Fields">
            <summary>
            Attribute(s) to include in the response
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataQueryRequest.QueryParameters">
            <summary>
            Required if query present. The arguments for the query
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataQueryRequest.OrderBy">
            <summary>
            A list of BoxMetadataQueryOrderBy objects that contain field_key(s) to order on and the corresponding direction(s)
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataQueryRequest.Limit">
            <summary>
            The maximum number of items to return in a page. The default is 100 and the max is 1000.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataQueryRequest.Marker">
            <summary>
            The marker to use for requesting the next page
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxMetadataQueryRequest.AutoPaginate">
            <summary>
            Whether or not to auto-paginate to fetch all items; defaults to false.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyAssignmentRequest.PolicyId">
            <summary>
            The id of the retention policy to assign this content to.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyAssignmentRequest.AssignTo">
            <summary>
            The type and id of the content to assign the retention policy to. If assigning to an enterprise, no id should be provided.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyAssignmentRequest.FilterFields">
            <summary>
            An optional list of metadata field filters to use when applying the retention policy to a metadata template, e.g. {"field": "foo", "value": "bar"}
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyAssignmentRequest.StartDateField">
            <summary>
            Id of Metadata field which will be used to specify the start date for the retention policy.
            Alternatively, pass "upload_date" as value to use the date when the file was uploaded to Box.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxRetentionPolicyRequest">
            <summary>
            A request class for making retention policy requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyRequest.PolicyName">
            <summary>
            Name of retention policy to be created
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyRequest.PolicyType">
            <summary>
            finite or indefinite
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyRequest.RetentionLength">
            <summary>
            The retention_length is the amount of time, in days, to apply the retention policy to the selected content in days. Do not specify for indefinite policies. Required for finite policies.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyRequest.DispositionAction">
            <summary>
            If creating a finite policy, the disposition action can be permanently_delete or remove_retention. For indefinite policies, disposition action must be remove_retention.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyRequest.Status">
            <summary>
            Used to retire a retention policy if status is set to retired. If not retiring a policy, do not include or set to null.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyRequest.CanOwnerExtendRetention">
            <summary>
            Used to determine if the owner of items under the policy can extend the retention when the original period is ending.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyRequest.AreOwnersNotified">
            <summary>
            Used to determine if owners and co-owners of items under the policy are notified when the retention period is ending.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyRequest.CustomNotificationRecipients">
            <summary>
            List of additional users to notify when the retention period is ending.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyRequest.RetentionType">
            <summary>
            Used to determine the type of retention policy, value can be modifiable or non-modifiable
            When updating a retention policy, you can use non-modifiable type only. You can convert a modifiable policy to non-modifiable, but not the other way around.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxRetentionPolicyRequest.Description">
            <summary>
            The additional text description of the retention policy.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxSignRequestCreateRequest">
            <summary>
            Used to create a sign request. This involves preparing a document for signing and sending the sign request to signers.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.AreRemindersEnabled">
            <summary>
            Reminds signers to sign a document on day 3, 8, 13 and 18. Reminders are only sent to outstanding signers.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.AreTextSignaturesEnabled">
            <summary>
            Disables the usage of signatures generated by typing (text).
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.DaysValid">
            <summary>
            Number of days after which this request will automatically expire if not completed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.EmailMessage">
            <summary>
            Message to include in sign request email. The field is cleaned through sanitization of specific characters.
            However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email.
            The message may contain the following html tags including a, abbr, acronym, b, blockquote, code, em, i, ul, li, ol, and strong.
            Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed.
            If this field is not passed, a default message will be used.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.EmailSubject">
            <summary>
            Subject of sign request email. This is cleaned by sign request. If this field is not passed, a default subject will be used.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.ExternalId">
            <summary>
            This can be used to reference an ID in an external system that the sign request is related to.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.IsDocumentPreparationNeeded">
            <summary>
            Indicates if the sender should receive a prepare_url in the response to complete document preparation via UI.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.ParentFolder">
            <summary>
            The destination folder to place final, signed document and signing log. Only ID and type fields are required. The root folder, folder ID 0, cannot be used.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.PrefillTags">
            <summary>
            When a document contains sign related tags in the content, you can prefill them using this prefill_tags by referencing the 'id' of the tag as the external_id field of the prefill tag.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.Signers">
            <summary>
            List of signers for the sign request. 35 is the max number of signers permitted.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.SourceFiles">
            <summary>
            List of files to create a signing document from. This is currently limited to ten files. Only the ID and type fields are required for each file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.DeclinedRedirectUrl">
            <summary>
            URL to redirect the signer to if they decline to sign the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.RedirectUrl">
            <summary>
            URL to redirect the signer to after they sign the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateRequest.TemplateId">
            <summary>
            The ID of sign template to use to create the sign request.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxSignRequestCreateSourceFile">
            <summary>
            List of files to create a signing document from. This is currently limited to ten files. Only the ID and type fields are required for each file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateSourceFile.Id">
            <summary>
            The unique identifier that represent a file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateSourceFile.Type">
            <summary>
            Value is always file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateSourceFile.FileVersion">
            <summary>
            The information about the current version of the file.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxSignRequestCreateSourceFileVersion">
            <summary>
            The information about the current version of the file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateSourceFileVersion.Id">
            <summary>
            The unique identifier that represent a file version.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestCreateSourceFileVersion.Type">
            <summary>
            Value is always file_version.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxSignRequestSignerCreate">
            <summary>
            Signers for the sign request. 35 is the max number of signers permitted.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.Email">
            <summary>
            Email address of the signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.EmbedUrlExternalUserId">
            <summary>
            User ID for the signer in an external application responsible for authentication when accessing the embed URL.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.IsInPerson">
            <summary>
            Used in combination with an embed URL for a sender. After the sender signs, they will be redirected to the next in_person signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.Order">
            <summary>
            Order of the signer.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.Role">
            <summary>
            Defines the role of the signer in the sign request. A signer must sign the document and an approver must approve the document.
            A final_copy_reader only receives the final signed document and signing log.
            Value is one of signer,approver,final_copy_reader
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.DeclinedRedirectUrl">
            <summary>
            The URL to redirect the signer to if they decline to sign the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.RedirectUrl">
            <summary>
            The URL to redirect the signer to after they sign the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.LoginRequired">
            <summary>
            If set to true, signer will need to login to a Box account before signing the request.
            If the signer does not have an existing account, they will have an option to create a free Box account.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.Password">
            <summary>
            If set, the signer is required to enter the password before they are able to sign a document. This field is write only.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.SignerGroupId">
            <summary>
            If set, signers who have the same group ID will be assigned to the same input.
            A signer group is expected to have more than one signer.
            When a group contains fewer than two signers, it will be converted to a single signer and the group will be removed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxSignRequestSignerCreate.VerificationPhoneNumber">
            <summary>
            If set, this phone number is be used to verify the signer via two factor authentication before they are able to sign the document.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxTaskRequest.Id">
            <summary>
            Id of the task this assignment is for.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxTaskRequest.Type">
            <summary>
            Must be task.
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxTermsOfServiceUserStatusCreateRequest">
            <summary>
            A request class for a create a user status for terms of service request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxTermsOfServiceUserStatusCreateRequest.TermsOfService">
            <summary>
            The Terms Of Service Object.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxTermsOfServiceUserStatusCreateRequest.User">
            <summary>
            The Box User.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxTermsOfServiceUserStatusCreateRequest.IsAccepted">
            <summary>
            The acceptance Status of the Box Terms Of Service object.
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxZipRequest.Name">
            <summary>
            The name of the zip file to be created
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxZipRequest.Items">
            <summary>
            The list of files or folders to be part of the created zip
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxZipRequestItem">
            <summary>
            A request class for a Box item to be included when creating a zip file
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxZipRequestItem.Id">
            <summary>
            The Id of the item 
            </summary>
        </member>
        <member name="P:Box.V2.Models.Request.BoxZipRequestItem.Type">
            <summary>
            The type of the item
            </summary>
        </member>
        <member name="T:Box.V2.Models.Request.BoxZipItemType">
            <summary>
            The available types of Box items to be included when creating a zip file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFilePermission.CanPreview">
            <summary>
            Permission to view the file preview
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderPermission.CanInviteCollaborator">
            <summary>
            Permission to invite additional users to be collaborators
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemPermission.CanDownload">
            <summary>
            Permission to download item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemPermission.CanUpload">
            <summary>
            Permission to upload item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemPermission.CanComment">
            <summary>
            Permission to comment on item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemPermission.CanRename">
            <summary>
            Permission to rename the item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemPermission.CanDelete">
            <summary>
            Permission to delete the item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemPermission.CanShare">
            <summary>
            Permission to share item
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemPermission.CanSetShareAccess">
            <summary>
            Permission to change the access on the share
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxActionableByRequest">
            <summary>
            A request class for who can receives this user invitation
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxActionableByRequest.Login">
            <summary>
            The login that will receive a user invite
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxAIAskRequest">
            <summary>
            Model used to send request to Box AI Ask API
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIAskRequest.Items">
            <summary>
            The items to be processed by the LLM, often files.
            Note: Box AI handles documents with text representations up to 1MB in size, or a maximum of 25 files, whichever comes first.
            If the file size exceeds 1MB, the first 1MB of text representation will be processed.
            If you set mode parameter to single_item_qa, the items array can have one element only.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIAskRequest.Mode">
            <summary>
            The mode specifies if this request is for a single or multiple items.If you select single_item_qa the items array can have one element only.
            Selecting multiple_item_qa allows you to provide up to 25 items.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIAskRequest.Prompt">
            <summary>
            The prompt provided by the client to be answered by the LLM.The prompt's length is limited to 10000 characters.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxAIAskItem">
            <summary>
            The items to be processed by the LLM, often files.
            Note: Box AI handles documents with text representations up to 1MB in size, or a maximum of 25 files, whichever comes first.
            If the file size exceeds 1MB, the first 1MB of text representation will be processed.
            If you set mode parameter to single_item_qa, the items array can have one element only.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIAskItem.Id">
            <summary>
            The id of the item.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIAskItem.Type">
            <summary>
            The type of the item. Value is always file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIAskItem.Content">
            <summary>
            The content of the item, often the text representation.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxAIAskMode">
            <summary>
            The mode specifies if this request is for a single or multiple items. If you select single_item_qa the items array can have one element only.
            Selecting multiple_item_qa allows you to provide up to 25 items.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxAITextGenRequest">
            <summary>
            Model used to send request to Box AI Text Gen API
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAITextGenRequest.DialogueHistory">
            <summary>
            The history of prompts and answers previously passed to the LLM.This provides additional context to the LLM in generating the response.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAITextGenRequest.Items">
            <summary>
            The items to be processed by the LLM, often files.The array can include exactly one element.
            Note: Box AI handles documents with text representations up to 1MB in size.
            If the file size exceeds 1MB, the first 1MB of text representation will be processed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAITextGenRequest.Prompt">
            <summary>
            The prompt provided by the client to be answered by the LLM. The prompt's length is limited to 10000 characters.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxAIDialogueHistory">
            <summary>
            The history of prompts and answers previously passed to the LLM.This provides additional context to the LLM in generating the response.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIDialogueHistory.Answer">
            <summary>
            The answer previously provided by the LLM.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIDialogueHistory.CreatedAt">
            <summary>
            The ISO date formatted timestamp of when the previous answer to the prompt was created.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAIDialogueHistory.Prompt">
            <summary>
            The prompt previously provided by the client and answered by the LLM.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxAITextGenItem">
            <summary>
            The items to be processed by the LLM, often files.The array can include exactly one element.
            Note: Box AI handles documents with text representations up to 1MB in size.
            If the file size exceeds 1MB, the first 1MB of text representation will be processed.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAITextGenItem.Id">
            <summary>
            The id of the item.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAITextGenItem.Type">
            <summary>
            The type of the item. Value is always file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxAITextGenItem.Content">
            <summary>
            The content to use as context for generating new text or editing existing text.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxApplyWatermarkRequest.Watermark">
            <summary>
            Object containing watermark object params
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxCollaborationRequest">
            <summary>
            A request class for collaboration requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationRequest.Item">
            <summary>
            The item to add the collaboration on
            The ID and Type are required. The Type can be folder or file.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationRequest.AccessibleBy">
            <summary>
            The user who this collaboration applies to
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationRequest.Role">
            <summary>
            The access level of this collaboration. Can be editor, viewer, previewer, uploader, previewer uploader, viewer uploader, co-owner, or owner
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationRequest.Status">
            <summary>
            Whether this collaboration has been accepted
            This can be set to ‘accepted’ or ‘rejected’ by the ‘accessible_by’ user if the status is ‘pending’
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationRequest.CanViewPath">
            <summary>
            Whether view path collaboration feature is enabled or not. View path collaborations allow the invitee to see the entire ancestral path to the associated folder. 
            The user will not gain privileges in any ancestral folder (e.g. see content the user is not collaborated on).
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationRequest.ExpiresAt">
            <summary>
            When the collaboration should expire and be automatically removed.  This value can only be updated if
            the collaboration is already set to expire and the user has permission to update the expiration time.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxCollaborationUserRequest">
            <summary>
            A request class for making collaboration user requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollaborationUserRequest.Login">
            <summary>
            An email address (does not need to be a Box user). Omit if this is a group, or if you include the userID above.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxCollectionsRequest">
            <summary>
            Create or update collections request
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCollectionsRequest.Collections">
            <summary>
            Gets or sets the collections.
            </summary>
            <value>
            The collections.
            </value>
        </member>
        <member name="T:Box.V2.Models.BoxCommentRequest">
            <summary>
            A request class for making comment requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCommentRequest.Item">
            <summary>
            The item that this comment will be placed on.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCommentRequest.Message">
            <summary>
            The text body of the comment
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxCommentRequest.TaggedMessage">
            <summary>
            The text body of the comment, including @[userid:Username] (id is user_id and username is display name) somewhere in the message to mention the user,
            which will send them a direct email, letting them know they’ve been mentioned in a comment.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxDeleteSharedLinkRequest">
            <summary>
            The sole purpose of this class is to allow passing null as shared_link property in order to delete a shared link
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxDeleteSharedLinkRequest.SharedLink">
            <summary>
            Allow passing of null to remove the shared link
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxEmailAliasRequest">
            <summary>
            A request class for making email alias requests
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxEmailRequest">
            <summary>
            A request class for making email requests
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFileLockRequest">
            <summary>
            A request class for making file lock requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileLockRequest.Lock">
            <summary>
            The lock object
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFileRequest">
            <summary>
            A request class for making file requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileRequest.ContentCreatedAt">
            <summary>
            The time this file was created on the user’s machine.
            For more information about content times <see>http://developers.box.com/content-times/</see>
            NOTE: creation time MUST be the creation time from the file system. There will be issues with Sync otherwise
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFileUploadSessionRequest">
            <summary>
            A request class for creating a new file upload session
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileUploadSessionRequest.FolderId">
            <summary>
            The parent folder_id is the folder where the upload should happen.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileUploadSessionRequest.FileSize">
            <summary>
            The total number of bytes in the file to be uploaded.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFileUploadSessionRequest.FileName">
            <summary>
            Name of new file.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxFolderRequest">
            <summary>
            A request class for making folder requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderRequest.FolderUploadEmail">
            <summary>
            The email-to-upload address for this folder
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderRequest.OwnedBy">
            <summary>
            The user who owns the folder. Only used when moving a collaborated folder that you are not the owner of to a folder you are the owner of.
            Not a substitute for changing folder owners, please reference collaborations see <a href="http://developers.box.com/docs/#collaborations"/>
            to accomplish folder ownership changes.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderRequest.SyncState">
            <summary>
            Whether Box Sync clients will sync this folder. Values of synced or not_synced can be sent, while partially_synced may also be returned.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderRequest.CanNonOwnersInvite">
            <summary>
            Setting to determine if non-owners can invite others to collaborate on the folder.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxFolderRequest.CollaborationRestricted">
            <summary>
            Setting to determine if collaboration on a folder is restricted to be within an enterprise only.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxItemRequest">
            <summary>
            A request class for making item requests. Is the parent class for Files and Folder requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemRequest.Parent">
            <summary>
            The folder that contains this file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemRequest.Name">
            <summary>
            The name of the file 
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemRequest.Description">
            <summary>
            The new description for the file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemRequest.SharedLink">
            <summary>
            An object representing this item’s shared link and associated permissions
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxItemRequest.Tags">
            <summary>
            Tags associated with the file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyAssignmentRequest.PolicyId">
            <summary>
            Id of Policy to create Assignment for.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyAssignmentRequest.AssignTo">
            <summary>
            Target entity. Can be 'file_version', 'file', 'folder', or 'user'.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyRequest.PolicyName">
            <summary>
            Name of Legal Hold Policy. Max characters 254.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyRequest.Description">
            <summary>
            Description of Legal Hold Policy. Max characters 500.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyRequest.FilterStartedAt">
            <summary>
            Date filter applies to Custodian assignments only.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyRequest.FilterEndedAt">
            <summary>
            Date filter applies to Custodian assignments only.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyRequest.isOngoing">
            <summary>
            After initialization, Assignments under this Policy will continue applying to files based on events, indefinitely.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxLegalHoldPolicyRequest.ReleaseNotes">
            <summary>
            Notes around why the policy was released. Optional property with a 500 character limit.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxMetadataQueryOrderBy">
            <summary>
            Box object to order results returned by a metadata query
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataQueryOrderBy.FieldKey">
            <summary>
            A string which specifies the key property for a field property to order results by
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxMetadataQueryOrderBy.Direction">
            <summary>
            A string that specifies the direction to order the results by
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxPermissionsRequest">
            <summary>
            The set of permissions that apply to this link
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPermissionsRequest.Download">
            <summary>
            Whether this link allows downloads. Can only be used with Open and Company
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPermissionsRequest.Edit">
            <summary>
            Defines if the shared link allows for the item to be edited.
            This value can only be true if can_download is also true and if the item has a type of file
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxPermissionType">
            <summary>
            The available permissions for the request
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxPreflightCheckRequest">
            <summary>
            A request class for making preflight check requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPreflightCheckRequest.Size">
            <summary>
            The size of the file in bytes. Specify 0 for unknown file-sizes
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxPromoteVersionRequest">
            <summary>
            A request class for making promote version requests.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPromoteVersionRequest.Id">
            <summary>
            The ID of the file_version that you want to make current.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxPromoteVersionRequest.Type">
            <summary>
            Must be ‘file_version’ for this request.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationRequest.FileId">
            <summary>
            The id of the Box file a representation is requested on
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationRequest.XRepHints">
            <summary>
            The representation type requested for a Box file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationRequest.SetContentDispositionType">
            <summary>
            String value that should be set to either inline(open in browser) or attachment(download from browser)
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationRequest.SetContentDispositionFilename">
            <summary>
            Sets the downloaded representation's file name, if not defined the name will be the default Box file name
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRepresentationRequest.HandleRetry">
            <summary>
            Boolean value, set to true to try again to make a callout to get representations endpoint if initial call did not return
            complete representation object for file. Set to false if you do not wish to make a callout to representations endpoint again
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxRequestEntity">
            <summary>
            a request class for box requests. This is the parent class for most of the request classes
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRequestEntity.Id">
            <summary>
            The Entity's Id
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxRequestEntity.Type">
            <summary>
            The type of the item 
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxSharedLinkRequest">
            <summary>
            An object representing the request to create a shared link
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLinkRequest.Access">
            <summary>
            The level of access required for this shared link. Can be open, company, collaborators, or null which will be the default value
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLinkRequest.UnsharedAt">
            <summary>
            The day that this link should be disabled at. Timestamps are rounded off to the given day.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLinkRequest.Permissions">
            <summary>
            The set of permissions that apply to this link
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLinkRequest.Password">
            <summary>
            The password to require before viewing this link
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxSharedLinkRequest.VanityName">
            <summary>
            Defines a custom vanity name to use in the shared link URL, for example https://app.box.com/v/my-shared-link.
            Custom URLs should not be used when sharing sensitive content as vanity URLs are a lot easier to guess than regular shared links.
            Vanity name must be at least 12 characters long
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignmentRequest.Task">
            <summary>
            The task this assignment is for.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignmentRequest.AssignTo">
            <summary>
            The user this assignment is for.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxTaskAssignmentUpdateRequest">
            <summary>
            Request to update a task assignment.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignmentUpdateRequest.Id">
            <summary>
            Id of the task assignment.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignmentUpdateRequest.Message">
            <summary>
            A message from the assignee about this task.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskAssignmentUpdateRequest.ResolutionState">
            <summary>
            The login email address for the user this assignment is for.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxTaskCreateRequest">
            <summary>
            Request for creating a single task for single user on a single file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskCreateRequest.Item">
            <summary>
            The item this task is for or id of the task.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskCreateRequest.Action">
            <summary>
            The action the task assignee will be prompted to do. Must be review.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskCreateRequest.Message">
            <summary>
            An optional message to include with the task.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskCreateRequest.DueAt">
            <summary>
            The day at which this task is due.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskCreateRequest.CompletionRule">
            <summary>
            Defines which assignees need to complete this task before the task is considered completed.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxTaskUpdateRequest">
            <summary>
            Request for creating a single task for single user on a single file
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskUpdateRequest.Id">
            <summary>
            Id of the task.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskUpdateRequest.Action">
            <summary>
            The action the task assignee will be prompted to do. Can be review.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskUpdateRequest.Message">
            <summary>
            An optional message to include with the task.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTaskUpdateRequest.DueAt">
            <summary>
            The day at which this task is due.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxTermsOfServicesRequest">
            <summary>
            A request class for making folder requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServicesRequest.Status">
            <summary>
            The status of Terms of Services object. Either in enabled or disabled mode. 
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServicesRequest.TosType">
            <summary>
            The specified type of Terms of Services object. Either set to managed or external.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServicesRequest.Text">
            <summary>
            Description associated with Terms of Services object. Can only by null if Terms Of Service status is set to disabled.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxTermsOfServiceUserStatusesRequest">
            <summary>
            A request class for making folder requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServiceUserStatusesRequest.TermsOfService">
            <summary>
            The Terms Of Service Object
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServiceUserStatusesRequest.User">
            <summary>
            The Box User. Default is current Box User.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxTermsOfServiceUserStatusesRequest.IsAccepted">
            <summary>
            The acceptance Status of the Box Terms Of Service object
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxUserInviteRequest">
            <summary>
            A request class for making user invite requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserInviteRequest.Enterprise">
            <summary>
            Mini representation of the enterprise to invite the user to, including the ID of its enterprise
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserInviteRequest.ActionableBy">
            <summary>
            Box representation of who receives this user invitation
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxUserRequest">
            <summary>
            A request class for making user requests
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.Enterprise">
            <summary>
            Setting this to null will roll the user out of the enterprise and make them a free user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.Login">
            <summary>
            The email address this user uses to login.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.Name">
            <summary>
            The name of this user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.Role">
            <summary>
            This user’s enterprise role. Can be coadmin or user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.Language">
            <summary>
            The language of this user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.IsSyncEnabled">
            <summary>
            Whether or not this user can use Box Sync
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.JobTitle">
            <summary>
            The user’s job title
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.Phone">
            <summary>
            The user’s phone number
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.Address">
            <summary>
            The user’s address
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.SpaceAmount">
            <summary>
            The user’s total available space amount in byte. A value of -1 grants unlimited storage.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.TrackingCodes">
            <summary>
            An array of key/value pairs set by the user’s admin
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.CanSeeManagedUsers">
            <summary>
            Whether this user can see other enterprise users in its contact list
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.Status">
            <summary>
            Can be active or inactive
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.IsExemptFromDeviceLimits">
            <summary>
            Whether to exempt this user from Enterprise device limits
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.IsExemptFromLoginVerification">
            <summary>
            Whether or not this user must use two-factor authentication
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.IsPasswordResetRequired">
            <summary>
            Whether or not the user is required to reset password
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.IsPlatformAccessOnly">
            <summary>
            Whether or not the user is an App User (platform)
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.ExternalAppUserId">
            <summary>
            External app user id
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.IsExternalCollabRestricted">
            <summary>
            Whether this user is restricted from external collaboration
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRequest.NotificationEmail">
            <summary>
            Adds secondary notification email for Box User.
            </summary>
        </member>
        <member name="T:Box.V2.Models.BoxUserRollOutRequest">
            <summary>
            A request class for rolling users out of the enterprise.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxUserRollOutRequest.Enterprise">
            <summary>
            Setting this to null will roll the user out of the enterprise and make them a free user
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWatermarkRequest.Imprint">
            <summary>
            Currently, the value must be "default", as custom watermarks is not yet supported.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebhookRequest.Target">
            <summary>
            The target file or folder.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebhookRequest.Triggers">
            <summary>
            Event types that trigger notifications for the target. For a list of triggers see https://developer.box.com/en/guides/webhooks/manage/triggers/.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebhookRequest.Address">
            <summary>
            HTTPS URL to receive the webhook notification.
            </summary>
        </member>
        <member name="P:Box.V2.Models.BoxWebLinkRequest.Url">
            <summary>
            URL you want the web link to point to. Must include http:// or https://
            </summary>
        </member>
        <member name="T:Box.V2.Plugins.BoxResourcePlugins.ResourceBuilder">
            <summary>
            Builder that allows for lazy creation of the resource
            </summary>
        </member>
        <member name="M:Box.V2.Request.HttpRequestHandler.ForceQuotesOnParam(System.String)">
            <summary>
            Adds quotes around the named parameters
            This is required as the API will currently not take multi-part parameters without quotes
            </summary>
            <param name="name">The name parameter to add quotes to</param>
            <returns>The name parameter surrounded by quotes</returns>
        </member>
        <member name="M:Box.V2.Request.IRequestHandler.ExecuteAsyncWithoutRetry``1(Box.V2.IBoxRequest)">
            <summary>
            Executes the BoxRequest, without retrying failed requests
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="request">The box request to execute</param>
            <returns>A BoxResponse</returns>
        </member>
        <member name="M:Box.V2.Request.IRequestHandler.ExecuteAsync``1(Box.V2.IBoxRequest)">
            <summary>
            Executes the BoxRequest
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="request">The box request to execute</param>
            <returns>A BoxResponse</returns>
        </member>
        <member name="M:Box.V2.Services.BoxService.#ctor(Box.V2.Request.IRequestHandler)">
            <summary>
            Instantiates a new BoxService with the provided handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Box.V2.Services.BoxService.ToResponseAsyncWithoutRetry``1(Box.V2.IBoxRequest)">
            <summary>
            Executes the request according to the default TaskScheduler
            This will allow for concurrent requests and is managed by the thread pool
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Services.BoxService.ToResponseAsync``1(Box.V2.IBoxRequest)">
            <summary>
            Executes the request according to the default TaskScheduler
            This will allow for concurrent requests and is managed by the thread pool
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Services.BoxService.EnqueueAsync``1(Box.V2.IBoxRequest)">
            <summary>
            Executes the request but limits the number of threads that can be used 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Services.IBoxService.ToResponseAsyncWithoutRetry``1(Box.V2.IBoxRequest)">
            <summary>
            Executes the provided BoxRequest and returns a BoxResponse immediately on the thread pool, without retrying failed requests.
            </summary>
            <typeparam name="T">The return type of the response</typeparam>
            <param name="request">The Box Request to execute</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Services.IBoxService.ToResponseAsync``1(Box.V2.IBoxRequest)">
            <summary>
            Executes the provided BoxRequest and returns a BoxResponse immedeately on the thread pool
            </summary>
            <typeparam name="T">The return type of the response</typeparam>
            <param name="request">The Box Request to execute</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Services.IBoxService.EnqueueAsync``1(Box.V2.IBoxRequest)">
            <summary>
            Queues the BoxRequest and executes it as threads become available, returning a BoxResponse
            </summary>
            <typeparam name="T">The return type of the response</typeparam>
            <param name="request">The Box Request to execute</param>
            <returns></returns>
        </member>
        <member name="T:Box.V2.Utility.BoxProgress">
            <summary>
            Class for reporting progress.
            </summary>
        </member>
        <member name="F:Box.V2.Utility.BoxProgress.progress">
            <summary>
            Value from 0 - 100, indicating the percentage.
            </summary>
        </member>
        <member name="T:Box.V2.Utility.ContentTypeMapper">
            <summary>
            Utility class for determining Content-Type header. Should only be used internally by the SDK.
            </summary>
        </member>
        <member name="M:Box.V2.Utility.ContentTypeMapper.GetContentTypeFromFilename(System.String)">
            <summary>
            Get Content-Type header from a filename. Supports most common image formats. Should only be used internally by the SDK.
            </summary>
            <param name="filename">full filename with extension</param>
            <returns>Content-Type header as a string</returns>
        </member>
        <member name="T:Box.V2.Utility.CrossPlatform">
            <summary>
            Cross platform helpers.
            </summary>
        </member>
        <member name="M:Box.V2.Utility.CrossPlatform.CanConvert``1(System.Type)">
            <summary>
            Check if Type can convert to T
            </summary>
            <typeparam name="T">Convert to type.</typeparam>
            <param name="objectType">Convert from type.</param>
            <returns>true if able to convert.</returns>
        </member>
        <member name="M:Box.V2.Utility.CrossPlatform.CanConvert(System.Type,System.Type)">
            <summary>
            Check if sourceType can convert to targetType
            </summary>
            <param name="targetType"></param>
            <param name="sourceType"></param>
            <returns>true if able to convert.</returns>
        </member>
        <member name="T:Box.V2.Utility.Helper">
            <summary>
            A helper class.
            </summary>
        </member>
        <member name="M:Box.V2.Utility.Helper.ConvertToUnixTimestamp(System.DateTimeOffset)">
            <summary>
            Convert DateTimeOffset to unix timestamp.
            </summary>
            <param name="date">DateTimeOffset object.</param>
            <returns>unix timestamp.</returns>
        </member>
        <member name="M:Box.V2.Utility.Helper.ConvertToRFCString(System.Nullable{System.DateTime})">
            <summary>
            Convert DateTime to RFC3339 string.
            </summary>
            <param name="date">DateTime object.</param>
            <returns>RFC3339 string.</returns>
        </member>
        <member name="M:Box.V2.Utility.Helper.ConvertToRFCString(System.Nullable{System.DateTimeOffset})">
            <summary>
            Convert DateTimeOffset to RFC3339 string.
            </summary>
            <param name="date">DateTime object.</param>
            <returns>RFC3339 string.</returns>
        </member>
        <member name="M:Box.V2.Utility.Helper.Base64Encode(System.String)">
            <summary>
            Encode string to base64
            </summary>
            <param name="plainText"> the string to be encoded.</param>
            <returns>base64 encoded string.</returns>
        </member>
        <member name="M:Box.V2.Utility.Helper.ParseQueryString(System.Uri)">
            <summary>
            Parses a URL and returns query string
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Utility.Helper.GetSha1Hash(System.IO.Stream)">
            <summary>
            Calculate sha1 hash.
            </summary>
            <param name="stream"> the input stream. </param>
            <returns>Base64 encoded sha1 hash.</returns>
        </member>
        <member name="T:Box.V2.Utility.IRetryStrategy">
            <summary>
            Retry strategy used when retrying HTTP request.
            </summary>
        </member>
        <member name="M:Box.V2.Utility.IRetryStrategy.GetRetryTimeout(System.Int32)">
            <summary>
            Returns the time interval after which to retry the request.
            </summary>
            <param name="numRetries">Retry number</param>
            <returns>Retry interval</returns>
        </member>
        <member name="T:Box.V2.Utility.LRUCache`2">
            <summary>
            An LRU Cache implementation.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="V">The value type.</typeparam>
        </member>
        <member name="M:Box.V2.Utility.LRUCache`2.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            A least recently used cache with a time to live.
            </summary>
            <param name="capacity">
            The number of entries the cache will hold
            </param>
            <param name="hours">The number of hours in the TTL</param>
            <param name="minutes">The number of minutes in the TTL</param>
            <param name="seconds">The number of seconds in the TTL</param>
            <param name="refreshEntries">
            Whether the TTL should be refreshed upon retrieval
            </param>
        </member>
        <member name="P:Box.V2.Utility.LRUCache`2.Count">
            <summary>
            Gets the current number of entries in the cache.
            </summary>
        </member>
        <member name="P:Box.V2.Utility.LRUCache`2.Capacity">
            <summary>
            Gets the maximum number of entries in the cache.
            </summary>
        </member>
        <member name="P:Box.V2.Utility.LRUCache`2.IsFull">
            <summary>
            Gets whether or not the cache is full.
            </summary>
        </member>
        <member name="M:Box.V2.Utility.LRUCache`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the item being stored.
            </summary>
            <returns>The cached value at the given key.</returns>
        </member>
        <member name="M:Box.V2.Utility.LRUCache`2.Add(`0,`1)">
            <summary>
            Sets the item being stored to the supplied value.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The value to set in the cache.</param>
        </member>
        <member name="M:Box.V2.Utility.LRUCache`2.TryAdd(`0,`1)">
            <summary>
            Sets the item being stored to the supplied value.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The value to set in the cache.</param>
            <returns>True if the set was successful. False otherwise.</returns>
        </member>
        <member name="M:Box.V2.Utility.LRUCache`2.Clear">
            <summary>
            Removes the stored data.
            </summary>
            <returns>True if the removal was successful. False otherwise.</returns>
        </member>
        <member name="M:Box.V2.Utility.LRUCache`2.MoveToHead(Box.V2.Utility.LRUCache{`0,`1}.CacheNode)">
            <summary>
            Moved the provided entry to the head of the list.
            </summary>
            <param name="entry">The CacheNode entry to move up.</param>
        </member>
        <member name="T:Box.V2.Utility.Retry">
            <summary>
            Static class for Retrying
            From : https://github.com/jeroenpot/SimpleRetry
            </summary>
        </member>
        <member name="M:Box.V2.Utility.Retry.Execute(System.Action,System.TimeSpan,System.Int32,System.Action{System.Exception},System.Action{System.Exception},System.Type[])">
            <summary>
            Executes the specified action.
            </summary>
            <example>
            This sample shows how to call the method.
            <code>
            Execute(() =>
            {
                // happy flow
            }, TimeSpan.FromMilliseconds(100), 2);
            </code>
            </example>
            <param name="action">The action.</param>
            <param name="retryInterval">The retry interval.</param>
            <param name="retryCount">The retry count.</param>
            <param name="executeOnEveryException">The execute on every exception.</param>
            <param name="executeBeforeFinalException">The execute before final exception.</param>
            <param name="exceptionTypesToHandle">The exception types to handle.</param>
        </member>
        <member name="M:Box.V2.Utility.Retry.Execute``1(System.Func{``0},System.TimeSpan,System.Int32,System.Action{System.Exception},System.Action{System.Exception},System.Type[])">
            <summary>
            Executes the specified action.
            </summary>
            <example>
            This sample shows how to call the method.
            <code>
            int returnValue = Retry.Execute(() =>
            {
                // Happy flow
                return 1;
            }, TimeSpan.FromMilliseconds(100), 0);
            </code>
            </example>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="retryInterval">The retry interval.</param>
            <param name="retryCount">The retry count.</param>
            <param name="executeOnEveryException">The execute on every exception.</param>
            <param name="executeBeforeFinalException">The execute before final exception.</param>
            <param name="exceptionTypesToHandle">The exception types to handle.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Utility.Retry.ExecuteAsync(System.Action,System.TimeSpan,System.Int32,System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Type[])">
            <summary>
            Executes the action asynchronous.
            </summary>
            <example>
            <code>
            await Retry.ExecuteAsync(async () =>
            {
               // Do work
            }, TimeSpan.FromMilliseconds(100), 2);
            </code>
            </example>
            <param name="action">The action.</param>
            <param name="retryInterval">The retry interval.</param>
            <param name="retryCount">The retry count.</param>
            <param name="executeOnEveryException">The execute on every exception.</param>
            <param name="executeBeforeFinalException">The execute before final exception.</param>
            <param name="exceptionTypesToHandle">The exception types to handle.</param>
            <returns></returns>
        </member>
        <member name="M:Box.V2.Utility.Retry.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.TimeSpan,System.Int32,System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Type[])">
            <summary>
            Executes the action asynchronous.
            </summary>
            <example>
            <code>
            int i = await Retry.ExecuteAsync(async () =>
            {
               // Do work
               return 1;
            }, TimeSpan.FromMilliseconds(100), 2);
            </code>
            </example>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="retryInterval">The retry interval.</param>
            <param name="retryCount">The retry count.</param>
            <param name="executeOnEveryException">The execute on every exception.</param>
            <param name="executeBeforeFinalException">The execute before final exception.</param>
            <param name="exceptionTypesToHandle">The exception types to handle.</param>
            <returns></returns>
        </member>
        <member name="T:Box.V2.Utility.SimpleRetryArgumentException">
            <summary>
            Argument Exception used in SimpleRetry library.
            </summary>
            <seealso cref="T:System.ArgumentException" />
        </member>
        <member name="M:Box.V2.Utility.SimpleRetryArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Box.V2.Utility.SimpleRetryArgumentException"/> class.
            </summary>
        </member>
        <member name="M:Box.V2.Utility.SimpleRetryArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Box.V2.Utility.SimpleRetryArgumentException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Box.V2.Utility.SimpleRetryArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Box.V2.Utility.SimpleRetryArgumentException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Box.V2.Utility.SimpleRetryArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Box.V2.Utility.SimpleRetryArgumentException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Box.V2.Utility.ThreadSafeRandom">
            <summary>
            A thread safe implementation of <see cref="T:System.Random"/>, following best practices
            for .NET Framework and .NET Standard.
            </summary>
            <seealso href="https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-random"/>
        </member>
        <member name="P:Box.V2.Utility.ThreadSafeRandom.Instance">
            <summary>
            An instance of <see cref="T:System.Random"/> specific to the calling thread.
            Do not pass this instance to other threads or contexts.
            </summary>
        </member>
        <member name="T:Box.V2.BoxBinaryRequest">
            <summary>
            A Box representation of a binay request.
            </summary>
        </member>
        <member name="M:Box.V2.BoxBinaryRequest.#ctor(System.Uri)">
            <summary>
            Instantiates a new Box binary request providing the Host URI.
            </summary>
            <param name="hostUri">The host URI.</param>
        </member>
        <member name="P:Box.V2.BoxBinaryRequest.Part">
            <summary>
            The body content.
            </summary>
        </member>
        <member name="T:Box.V2.BoxError">
            <summary>
            Box representation of an Error
            </summary>
        </member>
        <member name="P:Box.V2.BoxError.Name">
            <summary>
            The error received. This value will always be present in the event of an error
            </summary>
        </member>
        <member name="P:Box.V2.BoxError.Description">
            <summary>
            Description of what happened. Provides additional information to the error
            </summary>
        </member>
        <member name="P:Box.V2.BoxError.Status">
            <summary>
            Status of the response
            </summary>
        </member>
        <member name="P:Box.V2.BoxError.Code">
            <summary>
            HTTP Status code
            </summary>
        </member>
        <member name="P:Box.V2.BoxError.Message">
            <summary>
            Associated message with the error
            </summary>
        </member>
        <member name="P:Box.V2.BoxError.RequestId">
            <summary>
            Request ID for the request that produced the error.  This is useful for troubleshooting.
            </summary>
        </member>
        <member name="T:Box.V2.BoxConflictError`1">
            <summary>
            Box representation of a conflict error that includes its context info
            </summary>
            <typeparam name="T">Type of item that is in conflict</typeparam>
        </member>
        <member name="P:Box.V2.BoxConflictError`1.ContextInfo">
            <summary>
            Gets or sets the context information.
            </summary>
            <value>The context information.</value>
        </member>
        <member name="T:Box.V2.BoxPreflightCheckConflictError`1">
            <summary>
            Box representation of a preflight check conflict error that includes its context info
            </summary>
            <typeparam name="T">Type of item that is in conflict</typeparam>
        </member>
        <member name="P:Box.V2.BoxPreflightCheckConflictError`1.ContextInfo">
            <summary>
            Gets or sets the context information.
            </summary>
            <value>The context information.</value>
        </member>
        <member name="T:Box.V2.BoxConflictErrorContextInfo`1">
            <summary>
            A Box representation of a conflict error context.
            </summary>
            <typeparam name="T">The type conflict</typeparam>
        </member>
        <member name="P:Box.V2.BoxConflictErrorContextInfo`1.Conflicts">
            <summary>
            Gets or sets the conflicts.
            </summary>
            <value>The conflicts.</value>
        </member>
        <member name="T:Box.V2.BoxPreflightCheckConflictErrorContextInfo`1">
            <summary>
            A Box representation of a preflight check conflict error context.
            </summary>
            <typeparam name="T">The type conflict</typeparam>
        </member>
        <member name="P:Box.V2.BoxPreflightCheckConflictErrorContextInfo`1.Conflict">
            <summary>
            Gets or sets the conflicts.
            </summary>
            <value>The conflicts.</value>
        </member>
        <member name="T:Box.V2.BoxStringFormPart">
            <summary>
            A Box representation of the string part of a multi-part form
            </summary>
        </member>
        <member name="T:Box.V2.BoxFileFormPart">
            <summary>
            A Box representation of the file part of a multi-part form
            </summary>
        </member>
        <member name="P:Box.V2.BoxFileFormPart.FileName">
            <summary>
            The file name 
            </summary>
        </member>
        <member name="P:Box.V2.BoxFileFormPart.ContentType">
            <summary>
            The content type of form part
            </summary>
        </member>
        <member name="T:Box.V2.BoxMultiPartRequest">
            <summary>
            A Box representation of a multi-part form request
            </summary>
        </member>
        <member name="M:Box.V2.BoxMultiPartRequest.#ctor(System.Uri)">
            <summary>
            Instantiates a new Box multi-part form request providing the Host URI
            </summary>
            <param name="hostUri">The host URI for the multi-part request</param>
        </member>
        <member name="M:Box.V2.BoxMultiPartRequest.#ctor(System.Uri,System.String)">
            <summary>
            Instantiates a new Box multi-part form request providing the Host URI
            </summary>
            <param name="hostUri">The host URI for the multi-part request</param>
            <param name="path">The path for the multi-part request</param>
        </member>
        <member name="P:Box.V2.BoxMultiPartRequest.Method">
            <summary>
            Request Method is always a POST in a multipart request
            </summary>
        </member>
        <member name="P:Box.V2.BoxMultiPartRequest.Parts">
            <summary>
            The different parts of the multi-part form
            </summary>
        </member>
        <member name="T:Box.V2.BoxFilePart">
            <summary>
            A Box representation of the file part.
            </summary>
        </member>
        <member name="M:Box.V2.BoxRequest.#ctor(System.Uri)">
            <summary>
            Instantiates a new Box request with the provided host URI
            </summary>
            <param name="hostUri"></param>
        </member>
        <member name="M:Box.V2.BoxRequest.#ctor(System.Uri,System.String)">
            <summary>
            Instantiates a new Box request with the provided host URI and path
            </summary>
            <param name="hostUri"></param>
            <param name="path"></param>
        </member>
        <member name="P:Box.V2.BoxRequest.AbsoluteUri">
            <summary>
            Returns the full Uri including host, path, and querystring
            </summary>
        </member>
        <member name="M:Box.V2.BoxRequest.GetQueryString">
            <summary>
            Returns the query string of the parameters dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="T:Box.V2.RequestMethod">
            <summary>
            The available request types
            </summary>
        </member>
        <member name="T:Box.V2.BoxResponse`1">
            <summary>
            The Box response returned from the API
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Box.V2.BoxResponse`1.ResponseObject">
            <summary>
            The object representation of a successful response
            </summary>
        </member>
        <member name="P:Box.V2.BoxResponse`1.ContentString">
            <summary>
            The full response string from the request
            </summary>
        </member>
        <member name="P:Box.V2.BoxResponse`1.Status">
            <summary>
            Status of the response
            </summary>
        </member>
        <member name="P:Box.V2.BoxResponse`1.StatusCode">
            <summary>
            Status code of the HTTP response
            </summary>
        </member>
        <member name="P:Box.V2.BoxResponse`1.Error">
            <summary>
            The error associated with an Error status
            This will be null in all other cases
            </summary>
        </member>
        <member name="P:Box.V2.BoxResponse`1.Headers">
            <summary>
            Headers returned as part of the response
            </summary>
        </member>
        <member name="T:Box.V2.ResponseStatus">
            <summary>
            The available Response statuses
            </summary>
        </member>
        <member name="T:Box.V2.IBoxFormPart">
            <summary>
            Interface that defines a Box form part
            </summary>
        </member>
        <member name="P:Box.V2.IBoxFormPart.Name">
            <summary>
            The name of the form part
            </summary>
        </member>
        <member name="T:Box.V2.IBoxFormPart`1">
            <summary>
            Interface that takes different types of Form parts
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Box.V2.IBoxFormPart`1.Value">
            <summary>
            The value of the form part
            </summary>
        </member>
        <member name="T:Box.V2.IBoxPart">
            <summary>
            Interface that defines a Box part
            </summary>
        </member>
        <member name="T:Box.V2.IBoxPart`1">
            <summary>
            Interface that takes different types of box part
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Box.V2.IBoxPart`1.Value">
            <summary>
            The value of the part
            </summary>
        </member>
        <member name="T:Box.V2.IBoxRequest">
            <summary>
            Interface for all Box requests
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.Host">
            <summary>
            The host URI
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.Path">
            <summary>
            The endpoint path
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.HttpHeaders">
            <summary>
            Dictionary of headers
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.Parameters">
            <summary>
            Dictionary of querystring parameters
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.PayloadParameters">
            <summary>
            Dictionary of parameters to be included in the request payload
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.ContentType">
            <summary>
            The Content Type of the Payload. The Content Type must be set here and not as part of the Header
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.ContentEncoding">
            <summary>
            The Encoding for the Payload
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.Payload">
            <summary>
            The string payload to be included in the body of a request
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.Authorization">
            <summary>
            The authorization to be used for the request
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.Method">
            <summary>
            The type of request method
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.AbsoluteUri">
            <summary>
            Gets the full URI including the host, path and querystring parameters
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.Uri">
            <summary>
            Gets the URI including just the host and path
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.Timeout">
            <summary>
            Gets or Sets the timeout value used for the request
            </summary>
        </member>
        <member name="P:Box.V2.IBoxRequest.FollowRedirect">
            <summary>
            Gets or Sets whether or not to follow an HTTP redirect
            </summary>
        </member>
        <member name="M:Box.V2.IBoxRequest.GetQueryString">
            <summary>
            Gets just the query string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Box.V2.IBoxResponse`1">
            <summary>
            Interface for all Box responses
            </summary>
            <typeparam name="T">The return type of the Box response</typeparam>
        </member>
        <member name="P:Box.V2.IBoxResponse`1.ResponseObject">
            <summary>
            The response object from a successful response
            </summary>
        </member>
        <member name="P:Box.V2.IBoxResponse`1.ContentString">
            <summary>
            The full response string from the request
            </summary>
        </member>
        <member name="P:Box.V2.IBoxResponse`1.Status">
            <summary>
            Status of the response
            </summary>
        </member>
        <member name="P:Box.V2.IBoxResponse`1.StatusCode">
            <summary>
            Status code of the HTTP response
            </summary>
        </member>
        <member name="P:Box.V2.IBoxResponse`1.Error">
            <summary>
            The error associated with an Error status
            This will be null in all other cases
            </summary>
        </member>
        <member name="P:Box.V2.IBoxResponse`1.Headers">
            <summary>
            Headers returned as part of the response
            </summary>
        </member>
        <member name="T:BoxType">
            <summary>
            The types available for the request
            </summary>
        </member>
    </members>
</doc>
